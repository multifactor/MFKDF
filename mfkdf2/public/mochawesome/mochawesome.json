{
  "stats": {
    "suites": 76,
    "tests": 268,
    "passes": 268,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-23T15:55:29.111Z",
    "end": "2025-09-23T15:55:48.151Z",
    "duration": 19040,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ce8985b7-eaf5-4918-843c-a84f5c43c4c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
          "title": "aes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\aes.js",
          "file": "\\test\\crypto\\aes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "encrypt throws on invalid inputs",
              "fullTitle": "aes encrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.encrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.encrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "41bd178e-03d6-4334-a4f7-713d79ee7b10",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt throws on invalid inputs",
              "fullTitle": "aes decrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.decrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.decrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "0e0c15c2-b8ed-4dbb-97a7-9eba97e79e6d",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "encrypts and decrypts correctly",
              "fullTitle": "aes encrypts and decrypts correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.true",
              "err": {},
              "uuid": "fd303056-b18d-4fad-8795-84832ab456f2",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting with wrong key fails",
              "fullTitle": "aes decrypting with wrong key fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst wrongKey = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, wrongKey)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "28b6c18a-2770-416c-9d23-9765e904c051",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting modified data fails",
              "fullTitle": "aes decrypting modified data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\n// Modify the encrypted data\nencrypted[0] ^= 0xff\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "5c3b5147-78c8-4e4d-b1a5-fb70240ea5fc",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ciphertext length equals plaintext length",
              "fullTitle": "aes ciphertext length equals plaintext length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nencrypted.length.should.equal(data.length)",
              "err": {},
              "uuid": "27be630b-f44e-4b6e-a039-a7d45e7f614c",
              "parentUUID": "bacdb2a2-1389-426f-9e24-3104f854f3dc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41bd178e-03d6-4334-a4f7-713d79ee7b10",
            "0e0c15c2-b8ed-4dbb-97a7-9eba97e79e6d",
            "fd303056-b18d-4fad-8795-84832ab456f2",
            "28b6c18a-2770-416c-9d23-9765e904c051",
            "5c3b5147-78c8-4e4d-b1a5-fb70240ea5fc",
            "27be630b-f44e-4b6e-a039-a7d45e7f614c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dcaa5126-0251-4e09-85e0-aff5b04370b4",
          "title": "encrypt",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "769d0873-50e0-4130-9810-bb32464a6514",
              "title": "utils",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid1',\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey()\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "ce13d7c2-843f-4040-8397-ebb25220b7a3",
                  "parentUUID": "769d0873-50e0-4130-9810-bb32464a6514",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce13d7c2-843f-4040-8397-ebb25220b7a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "25fb5682-b9e2-48b3-bd25-d9d48c8cb275",
          "title": "derive/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "df563fd4-3a7f-4ceb-8557-c4769b5e8712",
              "parentUUID": "25fb5682-b9e2-48b3-bd25-d9d48c8cb275",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "df3b08e4-64ad-49ef-bf95-db423e04613b",
              "parentUUID": "25fb5682-b9e2-48b3-bd25-d9d48c8cb275",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df563fd4-3a7f-4ceb-8557-c4769b5e8712",
            "df3b08e4-64ad-49ef-bf95-db423e04613b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7310a1e5-c37d-427a-992f-c9b51c91c6a3",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "3baf952e-180a-4f07-9947-528c98cae751",
              "parentUUID": "7310a1e5-c37d-427a-992f-c9b51c91c6a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "6a87e893-8dc3-4237-a39b-bd30f2fca2de",
              "parentUUID": "7310a1e5-c37d-427a-992f-c9b51c91c6a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3baf952e-180a-4f07-9947-528c98cae751",
            "6a87e893-8dc3-4237-a39b-bd30f2fca2de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "16ec2033-77a8-47f0-8d4d-e2b0889119dd",
          "title": "derive/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hkdf",
              "fullTitle": "derive/key hkdf",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "0e72d83a-c8d3-49ae-bbab-eff842c6543d",
              "parentUUID": "16ec2033-77a8-47f0-8d4d-e2b0889119dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "cb8e4ff9-602a-4c72-84a5-3566546dd4af",
              "parentUUID": "16ec2033-77a8-47f0-8d4d-e2b0889119dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: false }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('wrongpassword2')\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password2: mfkdf.derive.factors.password('wrongpassword2'),\n    password3: mfkdf.derive.factors.password('wrongpassword3')\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password4')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "f7fd7797-522f-472e-8190-4b005c87fc28",
              "parentUUID": "16ec2033-77a8-47f0-8d4d-e2b0889119dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    )\n  })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "f4d8490d-e7ae-4529-a51e-9cbbfe17f70a",
              "parentUUID": "16ec2033-77a8-47f0-8d4d-e2b0889119dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ca95d096-4458-4c15-af01-aa82f3dad994",
              "title": "shares",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "af1baa4a-c4bd-4344-b2e5-f1c43e78bebd",
                  "parentUUID": "ca95d096-4458-4c15-af01-aa82f3dad994",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af1baa4a-c4bd-4344-b2e5-f1c43e78bebd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "570ddf1d-d168-4805-a98a-518016c3d001",
              "title": "invalid",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "50e3875c-a593-4d0e-8c11-0acc5af96659",
                  "parentUUID": "570ddf1d-d168-4805-a98a-518016c3d001",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d9150cc1-38e3-4671-a386-566f5c4f7186",
                  "parentUUID": "570ddf1d-d168-4805-a98a-518016c3d001",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50e3875c-a593-4d0e-8c11-0acc5af96659",
                "d9150cc1-38e3-4671-a386-566f5c4f7186"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0e72d83a-c8d3-49ae-bbab-eff842c6543d",
            "cb8e4ff9-602a-4c72-84a5-3566546dd4af",
            "f7fd7797-522f-472e-8190-4b005c87fc28",
            "f4d8490d-e7ae-4529-a51e-9cbbfe17f70a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 356,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
          "title": "derive/outputs",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\outputs.js",
          "file": "\\test\\derive\\outputs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stack",
              "fullTitle": "derive/outputs stack",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    })\n  ]),\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid3',\n    uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n  })\n])\ndelete setup.outputs.stack.entropyBits\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  }),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "a38f66e4-7e85-4b30-a8cf-a0237c091692",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "hmacsha1",
              "fullTitle": "derive/outputs hmacsha1",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.outputs.should.not.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "522f5b75-e7c6-4cb2-9f36-73b01b28ee01",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uuid",
              "fullTitle": "derive/outputs uuid",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "86c84bff-3a8e-4ee3-9e5f-ae051ed692a2",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "question",
              "fullTitle": "derive/outputs question",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.outputs.question.strength.calc_time = null\nderive.outputs.question.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "1f883958-6432-4d28-a655-2d86e3e1b6bf",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ooba",
              "fullTitle": "derive/outputs ooba",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "736246ce-9e93-48f0-bc5e-09c403f7439e",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password",
              "fullTitle": "derive/outputs password",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.outputs.password.strength.calc_time = null\nderive.outputs.password.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "c58d2046-2651-4469-9ac0-df8756905352",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple",
              "fullTitle": "derive/outputs multiple",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nderive.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})",
              "err": {},
              "uuid": "bf179fa5-811e-4fe6-b9b0-68786cb20a75",
              "parentUUID": "adc1e7c8-2af2-4171-9dc8-39482f99eda6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a38f66e4-7e85-4b30-a8cf-a0237c091692",
            "522f5b75-e7c6-4cb2-9f36-73b01b28ee01",
            "86c84bff-3a8e-4ee3-9e5f-ae051ed692a2",
            "1f883958-6432-4d28-a655-2d86e3e1b6bf",
            "736246ce-9e93-48f0-bc5e-09c403f7439e",
            "c58d2046-2651-4469-9ac0-df8756905352",
            "bf179fa5-811e-4fe6-b9b0-68786cb20a75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 517,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5cae50fa-8d83-423a-ad7b-a2daf07eea93",
          "title": "examples",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "17b55fcd-d09f-420b-9e26-5a3fa1ad65b7",
              "parentUUID": "5cae50fa-8d83-423a-ad7b-a2daf07eea93",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "c3e20a52-bbf6-4624-905c-4315dc293e7d",
              "parentUUID": "5cae50fa-8d83-423a-ad7b-a2daf07eea93",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    }),\n    await mfkdf.setup.factors.password('password2', {\n      id: 'password2'\n    })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "944d0ec3-9fec-40ba-a299-fa53f62f71c4",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f70bb8aa-3987-4ffe-8aaa-b811b0f6ae55",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 482,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "99173c9c-064c-4109-9ce0-3e67a5e909e8",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "66c3b8c6-8fe5-4e9d-aaf9-aefb40bed82e",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0a0b1d05-74d6-4e7b-9e2e-786e7c3448d1",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "b05d9cdf-5572-4fdd-9305-12e927559ee5",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "69f141cd-d3b4-450b-a043-f093a7fc0e89",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "8d08662d-8c2f-4185-ae72-5398f2842636",
                  "parentUUID": "c7b83704-87e9-4267-b6a9-b17aa8a476f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "944d0ec3-9fec-40ba-a299-fa53f62f71c4",
                "f70bb8aa-3987-4ffe-8aaa-b811b0f6ae55",
                "99173c9c-064c-4109-9ce0-3e67a5e909e8",
                "66c3b8c6-8fe5-4e9d-aaf9-aefb40bed82e",
                "0a0b1d05-74d6-4e7b-9e2e-786e7c3448d1",
                "b05d9cdf-5572-4fdd-9305-12e927559ee5",
                "69f141cd-d3b4-450b-a043-f093a7fc0e89",
                "8d08662d-8c2f-4185-ae72-5398f2842636"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 916,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f5ad89a2-2bed-4493-83d9-cde7bbf1a644",
              "title": "secrets",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(\n  Buffer.from('abcdefghijklmnopqrst'),\n  2,\n  3\n) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "ede59dbe-29e1-4330-8902-f11adb7ae20b",
                  "parentUUID": "f5ad89a2-2bed-4493-83d9-cde7bbf1a644",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ede59dbe-29e1-4330-8902-f11adb7ae20b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
              "title": "policy",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "bd35dcf3-a47f-4a37-9967-3ecce2f7a984",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "ee201425-fa46-4616-998b-5775603375b6",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordA',\n  'passwordC'\n]) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordB',\n  'passwordC'\n]) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "f2931405-12b6-4453-9c86-7942e508908a",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "4e2560a5-9fc7-47df-9436-746225f1871e",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "9221c0cd-2021-49a5-b10b-d52f1a075f27",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "8ef15f53-7228-4c05-a5f7-6b55a7756126",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "fbbee48c-5f9b-4f2a-a22e-588bf0078f78",
                  "parentUUID": "cd1090f7-362b-48c1-971e-ea9c8cb23c1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd35dcf3-a47f-4a37-9967-3ecce2f7a984",
                "ee201425-fa46-4616-998b-5775603375b6",
                "f2931405-12b6-4453-9c86-7942e508908a",
                "4e2560a5-9fc7-47df-9436-746225f1871e",
                "9221c0cd-2021-49a5-b10b-d52f1a075f27",
                "8ef15f53-7228-4c05-a5f7-6b55a7756126",
                "fbbee48c-5f9b-4f2a-a22e-588bf0078f78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 279,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
              "title": "reconstitution",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "07c9ca39-ff5b-4d14-934f-96306367a1f6",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "4729926a-21b1-4a7f-abeb-f8aca940f296",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "8c8426b0-6320-4144-a694-2d2657c6ad20",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "f4b9f0fb-9bda-4f9d-82ca-f86757a9add9",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "5d96daf9-1e2d-4c9c-ac18-46ee279c0e06",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "f2708ec0-14ba-4e29-a954-612cd5ab3d4c",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "c739e079-1f30-4f05-a092-6f6787f4f4de",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "7e33b2b7-6c81-4740-b425-80d111cfda25",
                  "parentUUID": "4a01ec22-6fe3-4aa0-ba47-2aac8a1d8163",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07c9ca39-ff5b-4d14-934f-96306367a1f6",
                "4729926a-21b1-4a7f-abeb-f8aca940f296",
                "8c8426b0-6320-4144-a694-2d2657c6ad20",
                "f4b9f0fb-9bda-4f9d-82ca-f86757a9add9",
                "5d96daf9-1e2d-4c9c-ac18-46ee279c0e06",
                "f2708ec0-14ba-4e29-a954-612cd5ab3d4c",
                "c739e079-1f30-4f05-a092-6f6787f4f4de",
                "7e33b2b7-6c81-4740-b425-80d111cfda25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 400,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e68df82b-937a-40b6-8c7c-c46a46e11690",
              "title": "persistence",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "a067ca15-fdf8-49cb-9e1f-2b21679f0237",
                  "parentUUID": "e68df82b-937a-40b6-8c7c-c46a46e11690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a067ca15-fdf8-49cb-9e1f-2b21679f0237"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1231e448-3db5-4e65-96cd-8b0adc412973",
              "title": "crypto",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// get sub-key for \"eth\"\nconst subkey = key.getSubkey('eth')\nsubkey.toString('hex') // -> 97cb…bac5",
                  "err": {},
                  "uuid": "b7d924d8-ef6f-4e29-a6a8-7b779fa6d3a0",
                  "parentUUID": "1231e448-3db5-4e65-96cd-8b0adc412973",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7d924d8-ef6f-4e29-a6a8-7b779fa6d3a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "17b55fcd-d09f-420b-9e26-5a3fa1ad65b7",
            "c3e20a52-bbf6-4624-905c-4315dc293e7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bb9228a8-fd6d-4d73-b1e9-b452be8d347c",
          "title": "site",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp({\n        secret: Buffer.from('abcdefghijklmnopqrst')\n      }),\n      await mfkdf.setup.factors.uuid({\n        id: 'recovery',\n        uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n      })\n    ])\n  ).policy\n)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recovery: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "2bee0055-8a6d-47c5-8bb6-7965fbc5c980",
              "parentUUID": "bb9228a8-fd6d-4d73-b1e9-b452be8d347c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour')\n    ])\n  ).entropyBits.real\n).should.equal(16)\nMath.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp(),\n      await mfkdf.setup.factors.hmacsha1()\n    ])\n  ).entropyBits.real\n).should.equal(196)",
              "err": {},
              "uuid": "33e25a77-c3fa-4ebc-8cd7-c39eec188f61",
              "parentUUID": "bb9228a8-fd6d-4d73-b1e9-b452be8d347c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "3344b313-1baf-4613-a9b5-ce50d96dc534",
              "parentUUID": "bb9228a8-fd6d-4d73-b1e9-b452be8d347c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('password'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recoveryCode',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2 }\n    )\n  ).policy\n)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recoveryCode: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "eebda7d4-ce50-41bd-ac9a-bb8947c2e23d",
              "parentUUID": "bb9228a8-fd6d-4d73-b1e9-b452be8d347c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2bee0055-8a6d-47c5-8bb6-7965fbc5c980",
            "33e25a77-c3fa-4ebc-8cd7-c39eec188f61",
            "3344b313-1baf-4613-a9b5-ce50d96dc534",
            "eebda7d4-ce50-41bd-ac9a-bb8947c2e23d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 519,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
          "title": "tutorials",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\nsetup.key.toString('hex') // -> 6458…dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "8097eff6-9d75-456c-8c19-437eb99cb4cb",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// reconstitute key to change password\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword')\n)\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771",
              "err": {},
              "uuid": "641b5f0d-9967-47e9-847c-384d0d243e87",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack([\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ]),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\nsetup.key.toString('hex') // -> 01d0…2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "17a304cb-ec05-43b2-a1d4-3a4b087513b4",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d2…5771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d2…5771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "cda42d37-2293-4e57-8713-71d07ef51477",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.key.toString('hex') // -> 34d2…5771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "143d51dc-42b1-4a8a-9961-522b2c64b9cc",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n])\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n])\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n])\nconst threshold = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n    await mfkdf.setup.factors.uuid(),\n    await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "749fa00a-b950-4829-b079-cda142ed8a29",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "b5f5fe03-12cd-4689-bb8b-94522afb812f",
              "parentUUID": "f2855a15-ba7a-43e8-bae9-e8647e7da29b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8097eff6-9d75-456c-8c19-437eb99cb4cb",
            "641b5f0d-9967-47e9-847c-384d0d243e87",
            "17a304cb-ec05-43b2-a1d4-3a4b087513b4",
            "cda42d37-2293-4e57-8713-71d07ef51477",
            "143d51dc-42b1-4a8a-9961-522b2c64b9cc",
            "749fa00a-b950-4829-b079-cda142ed8a29",
            "b5f5fe03-12cd-4689-bb8b-94522afb812f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 444,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9676bacf-ff31-4e90-a43a-37d9cd9798da",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key).update(challenge).digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "47084423-f012-4086-98da-480f8050c4f5",
              "parentUUID": "9676bacf-ff31-4e90-a43a-37d9cd9798da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response1 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(\n  derive1.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response2 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "136be70d-c345-4faf-810e-08f6a1b8fc6c",
              "parentUUID": "9676bacf-ff31-4e90-a43a-37d9cd9798da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.equal(\n    '2747ebf65219aee6630a758e40fd05ccbb39ab465745ea1c9a6c5adb6673d2d3'\n  )",
              "err": {},
              "uuid": "706c6c27-efe9-4a68-81c9-f7bbb1cdf09c",
              "parentUUID": "9676bacf-ff31-4e90-a43a-37d9cd9798da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "wrong-salt",
              "fullTitle": "factors/hmacsha1 wrong-salt",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PlS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nconst setup2 =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive2 = await mfkdf.derive.key(\n  JSON.parse(setup2),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.not.equal(\n    '64393334663330303639356134323533393937376561636234363262373662316562616564393838663531393337303563666432633265373130636663666230'\n  )\nderive.key.toString('hex').should.not.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "c908ce49-d6a7-4821-bff2-c46ba606d3a3",
              "parentUUID": "9676bacf-ff31-4e90-a43a-37d9cd9798da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3de7655d-d2f1-486d-b844-50e04d992c89",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "81604380-a5da-4477-9df1-250bc189fbcf",
                  "parentUUID": "3de7655d-d2f1-486d-b844-50e04d992c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fd2aa525-3dc9-4c14-ae30-832d1ab268d0",
                  "parentUUID": "3de7655d-d2f1-486d-b844-50e04d992c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "056c8ca8-67b2-4d7c-96da-1c8c88925f31",
                  "parentUUID": "3de7655d-d2f1-486d-b844-50e04d992c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: Buffer.from('12345') })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "4d6acdfa-68d9-4394-812d-5b06ba8edbae",
                  "parentUUID": "3de7655d-d2f1-486d-b844-50e04d992c89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "3f00890d-caeb-4505-935f-24334e774f75",
                  "parentUUID": "3de7655d-d2f1-486d-b844-50e04d992c89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81604380-a5da-4477-9df1-250bc189fbcf",
                "fd2aa525-3dc9-4c14-ae30-832d1ab268d0",
                "056c8ca8-67b2-4d7c-96da-1c8c88925f31",
                "4d6acdfa-68d9-4394-812d-5b06ba8edbae",
                "3f00890d-caeb-4505-935f-24334e774f75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "47084423-f012-4086-98da-480f8050c4f5",
            "136be70d-c345-4faf-810e-08f6a1b8fc6c",
            "706c6c27-efe9-4a68-81c9-f7bbb1cdf09c",
            "c908ce49-d6a7-4821-bff2-c46ba606d3a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e6b985ff-1daa-41b0-9401-59a3efeb8e72",
          "title": "factors/hotp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/hotp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "c89a1403-821e-48ae-ab4d-fca1348ed6d9",
              "parentUUID": "e6b985ff-1daa-41b0-9401-59a3efeb8e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(361687)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(979122)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "7e1cd240-d299-4c7d-95aa-ec85bf24aeb9",
              "parentUUID": "e6b985ff-1daa-41b0-9401-59a3efeb8e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.hotp()])",
              "err": {},
              "uuid": "913b145a-9cdf-49f5-bc6a-8333cd6f7380",
              "parentUUID": "e6b985ff-1daa-41b0-9401-59a3efeb8e72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a73ad360-b396-4213-98c8-66cfde148f6a",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "1935dc03-eb2c-4539-bc25-d75660a13dec",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ab42646b-45af-417e-ad49-6d60e7080dd9",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b5d081b7-2cb5-4c4c-b787-a859ac83ea9b",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "cdff2d49-4884-406f-a10d-fd3c4a6ec09b",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0c007675-18b9-4c7e-b97d-668fae439063",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e7a3e72c-217f-484e-9b1e-3eedf64dde59",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "400b41c3-1237-455b-a3a7-31ea9843c129",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a769fbc4-3e73-4c5a-8d16-07b7c4b22e56",
                  "parentUUID": "a73ad360-b396-4213-98c8-66cfde148f6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1935dc03-eb2c-4539-bc25-d75660a13dec",
                "ab42646b-45af-417e-ad49-6d60e7080dd9",
                "b5d081b7-2cb5-4c4c-b787-a859ac83ea9b",
                "cdff2d49-4884-406f-a10d-fd3c4a6ec09b",
                "0c007675-18b9-4c7e-b97d-668fae439063",
                "e7a3e72c-217f-484e-9b1e-3eedf64dde59",
                "400b41c3-1237-455b-a3a7-31ea9843c129",
                "a769fbc4-3e73-4c5a-8d16-07b7c4b22e56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "c89a1403-821e-48ae-ab4d-fca1348ed6d9",
            "7e1cd240-d299-4c7d-95aa-ec85bf24aeb9",
            "913b145a-9cdf-49f5-bc6a-8333cd6f7380"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dc197c1a-b928-423f-8020-5b936ae29a86",
          "title": "factors/ooba",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "8f758360-efb3-4e2f-9c32-bf30ee4f2cd4",
              "parentUUID": "dc197c1a-b928-423f-8020-5b936ae29a86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a02f2180-4e85-4029-964f-61dcff1fb7d0",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "6b3006fd-b8a0-431d-bc95-83923399f096",
                  "parentUUID": "a02f2180-4e85-4029-964f-61dcff1fb7d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nawait mfkdf.setup.factors\n  .ooba({\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 'foo'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 0\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 100\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: '12345'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: keyPair.publicKey,\n    params: '12345'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d04efaab-120f-46a0-87b7-507735c84edb",
                  "parentUUID": "a02f2180-4e85-4029-964f-61dcff1fb7d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b3006fd-b8a0-431d-bc95-83923399f096",
                "d04efaab-120f-46a0-87b7-507735c84edb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 56,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "8f758360-efb3-4e2f-9c32-bf30ee4f2cd4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 152,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "204c038e-3216-45cf-8a2b-f89d297f3bfd",
          "title": "persistence",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "3a08f97b-1464-44df-bb61-501f6b5ee046",
              "parentUUID": "204c038e-3216-45cf-8a2b-f89d297f3bfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "167bf693-dc1e-47b6-bee5-d3f238f0c848",
              "parentUUID": "204c038e-3216-45cf-8a2b-f89d297f3bfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a08f97b-1464-44df-bb61-501f6b5ee046",
            "167bf693-dc1e-47b6-bee5-d3f238f0c848"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5d87241e-ce65-40b8-a9ca-9ace3b9c1725",
          "title": "factors/question",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "7845f64c-d1a8-43cd-a9ce-5e27dbe4b4c3",
              "parentUUID": "5d87241e-ce65-40b8-a9ca-9ace3b9c1725",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    question: mfkdf.derive.factors.question('Rex')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "295c8f46-247f-40c2-b7db-77d8f491f28c",
              "parentUUID": "5d87241e-ce65-40b8-a9ca-9ace3b9c1725",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "43fbcfe2-fc9c-43bf-a686-15baee881f7e",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "62b0b036-3971-4c64-8958-1022f0d3a1df",
                  "parentUUID": "43fbcfe2-fc9c-43bf-a686-15baee881f7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .question(12345)\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { question: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "5c6c1228-8c76-4a3f-8d64-3d2f951315ce",
                  "parentUUID": "43fbcfe2-fc9c-43bf-a686-15baee881f7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62b0b036-3971-4c64-8958-1022f0d3a1df",
                "5c6c1228-8c76-4a3f-8d64-3d2f951315ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "7845f64c-d1a8-43cd-a9ce-5e27dbe4b4c3",
            "295c8f46-247f-40c2-b7db-77d8f491f28c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "543c8113-aed8-44a3-b3c2-ce4bb2a8d73f",
          "title": "factors/stack",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: 12345 }\n  )\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "13cc30aa-3686-4b8f-9836-0a23eb9a4ee5",
              "parentUUID": "543c8113-aed8-44a3-b3c2-ce4bb2a8d73f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: '' }\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "4ad250e6-2701-4fef-8407-f2c34bcb8921",
              "parentUUID": "543c8113-aed8-44a3-b3c2-ce4bb2a8d73f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ],\n      { id: 'stack1' }\n    ),\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        })\n      ],\n      { id: 'stack2' }\n    )\n  ],\n  { threshold: 1 }\n)\nsetup.policy.factors[0].params.should.not.have.property('hmac')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "219dc3c5-8011-4cea-a11a-8a77052867e0",
              "parentUUID": "543c8113-aed8-44a3-b3c2-ce4bb2a8d73f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13cc30aa-3686-4b8f-9836-0a23eb9a4ee5",
            "4ad250e6-2701-4fef-8407-f2c34bcb8921",
            "219dc3c5-8011-4cea-a11a-8a77052867e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5207af86-c603-42b1-b89c-7069dea0f4dd",
          "title": "factors/totp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/totp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "a2997ecb-580c-4c73-8459-498eb9482b38",
              "parentUUID": "5207af86-c603-42b1-b89c-7069dea0f4dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "89ea7c83-6d22-4638-87a3-08a0b0d1ec55",
              "parentUUID": "5207af86-c603-42b1-b89c-7069dea0f4dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "cdfa90c1-120e-482f-80e7-e604ef3c1b2a",
              "parentUUID": "5207af86-c603-42b1-b89c-7069dea0f4dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.totp()])",
              "err": {},
              "uuid": "a7547f65-8972-46a0-b7d6-18a56c7b6ffc",
              "parentUUID": "5207af86-c603-42b1-b89c-7069dea0f4dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a686116e-9475-4efb-8a38-69cee6f5e08a",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "088cdded-7ee5-46eb-ae0d-e24efae8ba1c",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 365,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597\n  })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    totp: mfkdf.derive.factors.totp(953265, { time: 1750430943604 })\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0dd6397b-5c51-4166-8adb-e559bda542eb",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "a45830ee-b81a-498b-8d96-c5476021b645",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "720db2e2-350f-4d96-bb53-ccd428ad5a58",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "83fd9074-c066-4e47-b3d6-ae1393875c17",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f6c1ac9e-5864-4cb8-99ba-7019dfeedda9",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "1400044b-4059-49a6-93f6-1278009abf64",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3d619550-7570-459e-9c45-a27e3bdaad27",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e3f7483b-7e03-46b2-b464-a91b0d1f44a9",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cc81f36c-84fb-4400-bc8d-5c88e222ac31",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c943f1af-7f32-4313-9c1c-6bef5fd40ac8",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9b15f056-e4be-4dca-bca8-04a40ad6cd61",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "84c21a39-558c-4d58-af70-6c9632747a1f",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b0fe0dcd-bddd-4348-9526-ce0e21672475",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a6a3f041-7119-4951-b393-68f0f75f16e2",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f0d2d9c6-c29b-43a5-8fd0-9d2e2d8febd1",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ef9d77a7-b5e1-44d3-acd2-74253a960a6b",
                  "parentUUID": "a686116e-9475-4efb-8a38-69cee6f5e08a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "088cdded-7ee5-46eb-ae0d-e24efae8ba1c",
                "0dd6397b-5c51-4166-8adb-e559bda542eb",
                "a45830ee-b81a-498b-8d96-c5476021b645",
                "720db2e2-350f-4d96-bb53-ccd428ad5a58",
                "83fd9074-c066-4e47-b3d6-ae1393875c17",
                "f6c1ac9e-5864-4cb8-99ba-7019dfeedda9",
                "1400044b-4059-49a6-93f6-1278009abf64",
                "3d619550-7570-459e-9c45-a27e3bdaad27",
                "e3f7483b-7e03-46b2-b464-a91b0d1f44a9",
                "cc81f36c-84fb-4400-bc8d-5c88e222ac31",
                "c943f1af-7f32-4313-9c1c-6bef5fd40ac8",
                "9b15f056-e4be-4dca-bca8-04a40ad6cd61",
                "84c21a39-558c-4d58-af70-6c9632747a1f",
                "b0fe0dcd-bddd-4348-9526-ce0e21672475",
                "a6a3f041-7119-4951-b393-68f0f75f16e2",
                "f0d2d9c6-c29b-43a5-8fd0-9d2e2d8febd1",
                "ef9d77a7-b5e1-44d3-acd2-74253a960a6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 366,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a2997ecb-580c-4c73-8459-498eb9482b38",
            "89ea7c83-6d22-4638-87a3-08a0b0d1ec55",
            "cdfa90c1-120e-482f-80e7-e604ef3c1b2a",
            "a7547f65-8972-46a0-b7d6-18a56c7b6ffc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1253,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "da363e10-c89f-41c9-a176-e8fa935a1ac9",
          "title": "factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "3fdd0d10-87a4-43ae-a029-1c07c655abe1",
              "parentUUID": "da363e10-c89f-41c9-a176-e8fa935a1ac9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 132,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c'\n    )\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d'\n    )\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    )\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "2e6407ca-74ae-4341-9ca9-49c3d0d8874a",
              "parentUUID": "da363e10-c89f-41c9-a176-e8fa935a1ac9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fdd0d10-87a4-43ae-a029-1c07c655abe1",
            "2e6407ca-74ae-4341-9ca9-49c3d0d8874a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7203c7a6-fe2a-4191-a493-4938247d94f3",
          "title": "entropy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "4e0e9da9-1eb9-4747-9009-4919d35b4b97",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "0f527fc5-cf76-4456-94fd-93fe0914ae03",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "cb30c644-5599-4d4e-bf86-5477f1051378",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "a50c21c7-f79d-45a4-8199-78a97006b057",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "63f1c26a-e6b7-4112-bb71-cff018710905",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "9246683c-ceac-4c1d-ae73-b2939fb35868",
              "parentUUID": "7203c7a6-fe2a-4191-a493-4938247d94f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e0e9da9-1eb9-4747-9009-4919d35b4b97",
            "0f527fc5-cf76-4456-94fd-93fe0914ae03",
            "cb30c644-5599-4d4e-bf86-5477f1051378",
            "a50c21c7-f79d-45a4-8199-78a97006b057",
            "63f1c26a-e6b7-4112-bb71-cff018710905",
            "9246683c-ceac-4c1d-ae73-b2939fb35868"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 813,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
          "title": "integrity",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\integrity.js",
          "file": "\\test\\features\\integrity.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "disabled",
              "fullTitle": "integrity disabled",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  false\n)",
              "err": {},
              "uuid": "ca777dac-0ff3-4829-a12c-3439bc7c9db8",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "integrity safety",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "e9778fb2-04e1-4c64-aa04-d8c334b8dfc0",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "liveness",
              "fullTitle": "integrity liveness",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)",
              "err": {},
              "uuid": "d77ea2f5-5cb7-413c-984c-a0a14057d042",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "$id",
              "fullTitle": "integrity $id",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.$id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "2681cdd1-9cac-47e2-b037-d2b5b95132ee",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "threshold",
              "fullTitle": "integrity threshold",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.threshold += 1\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "5e0d31da-e9e6-45fd-9fe5-c9a904ee2efe",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "salt",
              "fullTitle": "integrity salt",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.salt = 'Ny9+L9LQHOKh1x3Acqy7pMb9JaEIfNfxU/TsDON+Ht4='\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "576f2451-b82c-4238-8b9a-9302dce332fe",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "factor/id",
              "fullTitle": "integrity factor/id",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "baf4aab4-a9ec-41d8-86b2-4e24e7bd249e",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "derive",
              "fullTitle": "integrity derive",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nderive.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    derive.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "96507151-e2b6-4456-8486-7c16a4aeb0e9",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitution",
              "fullTitle": "integrity reconstitution",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: true }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('differentPassword3')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "215665e9-8da4-4f2b-8e75-73815d5bab35",
              "parentUUID": "506497fa-31e2-4bd3-99e7-65b3e18caeaf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca777dac-0ff3-4829-a12c-3439bc7c9db8",
            "e9778fb2-04e1-4c64-aa04-d8c334b8dfc0",
            "d77ea2f5-5cb7-413c-984c-a0a14057d042",
            "2681cdd1-9cac-47e2-b037-d2b5b95132ee",
            "5e0d31da-e9e6-45fd-9fe5-c9a904ee2efe",
            "576f2451-b82c-4238-8b9a-9302dce332fe",
            "baf4aab4-a9ec-41d8-86b2-4e24e7bd249e",
            "96507151-e2b6-4456-8486-7c16a4aeb0e9",
            "215665e9-8da4-4f2b-8e75-73815d5bab35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 534,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "be48fdfe-eed4-4c56-b8b9-3b7bf7c227da",
          "title": "policy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8c98dc90-ecd9-4605-93f7-37dd00f11ed2",
              "title": "validate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "e8b957c3-d10d-42a3-8d81-a8d01f85224d",
                  "parentUUID": "8c98dc90-ecd9-4605-93f7-37dd00f11ed2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.policy\n  .setup(\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password2'\n        })\n      )\n    )\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "896fc7ee-0cad-4970-b494-46ffea22adec",
                  "parentUUID": "8c98dc90-ecd9-4605-93f7-37dd00f11ed2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8b957c3-d10d-42a3-8d81-a8d01f85224d",
                "896fc7ee-0cad-4970-b494-46ffea22adec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0296a85d-07b1-4001-a842-cfe905d2094a",
              "title": "evaluate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .true",
                  "err": {},
                  "uuid": "be57eb96-2016-46b2-ac95-4aee1952cc90",
                  "parentUUID": "0296a85d-07b1-4001-a842-cfe905d2094a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .false",
                  "err": {},
                  "uuid": "d4240eab-ed60-4a29-8fae-7a0c029f5aa8",
                  "parentUUID": "0296a85d-07b1-4001-a842-cfe905d2094a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be57eb96-2016-46b2-ac95-4aee1952cc90",
                "d4240eab-ed60-4a29-8fae-7a0c029f5aa8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
              "title": "derive",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "0e874119-4f54-40f9-9f20-13929dc2d32b",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "120505ad-4172-4e04-a155-79e381e4b3b5",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "9f24805c-886b-4851-a255-780f1fff0632",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "3a94a160-25fa-4ed2-bfa3-88c18f403131",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 90,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "2e879a3b-7688-486c-a60b-f6c403545261",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f724793b-6143-4981-bac1-292ba136810e",
                  "parentUUID": "a9547ec4-30d1-496b-bd7c-d62c28db2697",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e874119-4f54-40f9-9f20-13929dc2d32b",
                "120505ad-4172-4e04-a155-79e381e4b3b5",
                "9f24805c-886b-4851-a255-780f1fff0632",
                "3a94a160-25fa-4ed2-bfa3-88c18f403131",
                "2e879a3b-7688-486c-a60b-f6c403545261",
                "f724793b-6143-4981-bac1-292ba136810e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 477,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f58d66ad-1ce4-4e4d-af21-2dc5e45025e0",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n])\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4'),\n    password6: mfkdf.derive.factors.password('password6')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "220b19c2-b214-4bab-91a7-6dd4da192cb0",
                  "parentUUID": "f58d66ad-1ce4-4e4d-af21-2dc5e45025e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1bc91752-2837-455b-a65a-fc7fd3ca173d",
                  "parentUUID": "f58d66ad-1ce4-4e4d-af21-2dc5e45025e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "220b19c2-b214-4bab-91a7-6dd4da192cb0",
                "1bc91752-2837-455b-a65a-fc7fd3ca173d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
          "title": "reconstitution",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 3, integrity: false }\n)\nconst key = setup.key.toString('hex')\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "007dfca0-76dd-4ad2-a3b7-113750f93e6d",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)\nawait derive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "1cc922d2-055c-47f2-a6f6-ff4a7db2d888",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "107f6aba-0fb3-46ad-8553-c25757e201fd",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "303e799e-2c4a-4d16-85f5-bfeb7e42c68d",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "503b8fed-a89e-4342-a6fa-3c99a5e81cd3",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "34d0fc4f-eece-44ce-84d7-84ac8d1451e7",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "f4631762-fa60-4a9f-85da-7dbae097c5c7",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(\n  ['password1'],\n  [\n    await mfkdf.setup.factors.password('otherPassword2', {\n      id: 'password2'\n    })\n  ],\n  2\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "33795e26-5db1-4fbf-abe8-dee25926e415",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "e94b1438-7e2c-44c5-8baf-b58edb3afb3a",
              "parentUUID": "1d4cf84c-a232-4389-b6d1-e649437b8ce4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6f837775-226f-4b62-ad53-51ba1b8bff68",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [12345],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "255574a6-141c-483e-8e0f-a58da681f624",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    ['password4'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f7c79bc2-c95d-4476-9780-eaf4f6b30f7f",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait setup\n  .reconstitute(\n    ['password3'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      }),\n      await mfkdf.setup.factors.password('diffPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9f69e110-229f-459e-a561-457fc0036e84",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    'hello',\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "1a62b69b-f1ad-41ba-ac58-38cd9703e624",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], '12345', 2)\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "05860abe-c5ce-46cc-8900-d1024a65790b",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], [], '12345')\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "78598e86-49eb-4a79-b773-beabe19491fa",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9921891f-6189-4bbb-bd13-667e3ac3fcd1",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 12345,\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "5417bd5d-d39a-41f7-988c-692c5aff8303",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: '',\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6b7fdd24-b4b4-45fb-99be-465e87614f5f",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 12345,\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9f7e4f99-52c6-4d25-bcb2-32807bc8ff8a",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: '',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "269ee043-ce48-45be-bd41-36932803c8a2",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: 12345,\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "371048d4-e786-49fc-9244-fdd64d969d34",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from(''),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cd27c476-4104-4ac0-8232-b48c94a3743a",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: 12345,\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f6ec6d27-5c11-4966-89ca-bd1118c8b433",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: async () => {\n          return {}\n        },\n        output: 12345\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "89b52409-aceb-4e42-a03b-9c0c117dc97e",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c26370ea-2ea1-49a6-9c5a-699e89d73dd5",
                  "parentUUID": "6f837775-226f-4b62-ad53-51ba1b8bff68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "255574a6-141c-483e-8e0f-a58da681f624",
                "f7c79bc2-c95d-4476-9780-eaf4f6b30f7f",
                "9f69e110-229f-459e-a561-457fc0036e84",
                "1a62b69b-f1ad-41ba-ac58-38cd9703e624",
                "05860abe-c5ce-46cc-8900-d1024a65790b",
                "78598e86-49eb-4a79-b773-beabe19491fa",
                "9921891f-6189-4bbb-bd13-667e3ac3fcd1",
                "5417bd5d-d39a-41f7-988c-692c5aff8303",
                "6b7fdd24-b4b4-45fb-99be-465e87614f5f",
                "9f7e4f99-52c6-4d25-bcb2-32807bc8ff8a",
                "269ee043-ce48-45be-bd41-36932803c8a2",
                "371048d4-e786-49fc-9244-fdd64d969d34",
                "cd27c476-4104-4ac0-8232-b48c94a3743a",
                "f6ec6d27-5c11-4966-89ca-bd1118c8b433",
                "89b52409-aceb-4e42-a03b-9c0c117dc97e",
                "c26370ea-2ea1-49a6-9c5a-699e89d73dd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 364,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "007dfca0-76dd-4ad2-a3b7-113750f93e6d",
            "1cc922d2-055c-47f2-a6f6-ff4a7db2d888",
            "107f6aba-0fb3-46ad-8553-c25757e201fd",
            "303e799e-2c4a-4d16-85f5-bfeb7e42c68d",
            "503b8fed-a89e-4342-a6fa-3c99a5e81cd3",
            "34d0fc4f-eece-44ce-84d7-84ac8d1451e7",
            "f4631762-fa60-4a9f-85da-7dbae097c5c7",
            "33795e26-5db1-4fbf-abe8-dee25926e415",
            "e94b1438-7e2c-44c5-8baf-b58edb3afb3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c38af4a6-91a5-46f9-8d45-9d8b4832a29c",
          "title": "stage",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\stage.js",
          "file": "\\test\\features\\stage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "basic",
              "fullTitle": "stage basic",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password')\n)\nconst setup = await mfkdf.setup.key([passwordSetup])\nconst passwordDerive = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: passwordDerive\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "ad88362a-bf3d-422f-819e-e97c61c7e449",
              "parentUUID": "c38af4a6-91a5-46f9-8d45-9d8b4832a29c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "full",
              "fullTitle": "stage full",
              "timedOut": false,
              "duration": 514,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst init = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password'),\n  init.key\n)\nconst hmacsha1Setup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hmacsha1(),\n  init.key\n)\nconst hotpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hotp({ secret: Buffer.from('abcdefghijklmnopqrst') }),\n  init.key\n)\nconst oobaSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.ooba({ key: keyPair.publicKey, params: {} }),\n  init.key\n)\nconst questionSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.question('fido'),\n  init.key\n)\nconst totpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  }),\n  init.key\n)\nconst uuidSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  }),\n  init.key\n)\nconst setup = await mfkdf.setup.key([\n  passwordSetup,\n  hmacsha1Setup,\n  hotpSetup,\n  oobaSetup,\n  questionSetup,\n  totpSetup,\n  uuidSetup\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[1].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst next = setup.policy.factors[3].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst json = JSON.parse(Buffer.from(decrypted).toString())\nconst code = json.code\nconst password = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params,\n  setup.key\n)\nconst hmacsha1 = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hmacsha1(response),\n  setup.policy.factors[1].params,\n  setup.key\n)\nconst hotp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hotp(241063),\n  setup.policy.factors[2].params,\n  setup.key\n)\nconst ooba = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.ooba(code),\n  setup.policy.factors[3].params,\n  setup.key\n)\nconst question = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.question('fido'),\n  setup.policy.factors[4].params,\n  setup.key\n)\nconst totp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.totp(953265, { time: 1 }),\n  setup.policy.factors[5].params,\n  setup.key\n)\nconst uuid = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  setup.policy.factors[6].params,\n  setup.key\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password,\n  hmacsha1,\n  hotp,\n  ooba,\n  question,\n  totp,\n  uuid\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "f0f87ddf-cf43-45ba-9bf9-bf65590cc475",
              "parentUUID": "c38af4a6-91a5-46f9-8d45-9d8b4832a29c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad88362a-bf3d-422f-819e-e97c61c7e449",
            "f0f87ddf-cf43-45ba-9bf9-bf65590cc475"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c780d3ff-f0ac-4225-8a3f-3fdced12bf00",
          "title": "mfkdf2/changes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
          "file": "\\test\\mfkdf2\\changes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b19bcac3-e5e3-4a3f-9584-2c2c0081645e",
              "title": "key-size-256",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes key-size-256 default",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "dcbc5f05-1008-4116-9ca2-03a709a3ee66",
                  "parentUUID": "b19bcac3-e5e3-4a3f-9584-2c2c0081645e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override",
                  "fullTitle": "mfkdf2/changes key-size-256 override",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "542f2c14-ab27-4498-8ad6-cb141663f0f4",
                  "parentUUID": "b19bcac3-e5e3-4a3f-9584-2c2c0081645e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcbc5f05-1008-4116-9ca2-03a709a3ee66",
                "542f2c14-ab27-4498-8ad6-cb141663f0f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "700801f5-42cb-45dc-8883-3360db451378",
              "title": "kdf-argon2id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes kdf-argon2id default",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "e39237b2-7bc5-4794-bf93-5f945d186d64",
                  "parentUUID": "700801f5-42cb-45dc-8883-3360db451378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/time",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/time",
                  "timedOut": false,
                  "duration": 163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.time = 4\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "01a4e512-8d2d-4685-8ba6-5e5e123be6f4",
                  "parentUUID": "700801f5-42cb-45dc-8883-3360db451378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/memory",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/memory",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 1024 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.memory = 2048\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "8eb547d8-65eb-4692-8ab0-0282d984fe61",
                  "parentUUID": "700801f5-42cb-45dc-8883-3360db451378",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/matching",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/matching",
                  "timedOut": false,
                  "duration": 427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 65536, time: 3 }\n)\nsetup.policy.memory.should.equal(65536)\nsetup.policy.time.should.equal(3)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "6d29427f-8171-4867-9cbf-e98b563d83e1",
                  "parentUUID": "700801f5-42cb-45dc-8883-3360db451378",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e39237b2-7bc5-4794-bf93-5f945d186d64",
                "01a4e512-8d2d-4685-8ba6-5e5e123be6f4",
                "8eb547d8-65eb-4692-8ab0-0282d984fe61",
                "6d29427f-8171-4867-9cbf-e98b563d83e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 713,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ca88f9a7-a5e9-4eb6-9feb-6e0440876410",
              "title": "encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "aes-256-ecb",
                  "fullTitle": "mfkdf2/changes encryption aes-256-ecb",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stretched = await crypto.randomBytes(32)\nconst share = await crypto.randomBytes(32)\nconst cipher = crypto.createCipheriv('AES-256-ECB', stretched, null)\ncipher.setAutoPadding(false)\nconst pad = Buffer.concat([cipher.update(share), cipher.final()])\nconst decipher = crypto.createDecipheriv('AES-256-ECB', stretched, null)\ndecipher.setAutoPadding(false)\nconst share2 = Buffer.concat([decipher.update(pad), decipher.final()])\nshare2.toString('hex').should.equal(share.toString('hex'))",
                  "err": {},
                  "uuid": "8e18f426-4383-4437-a21f-e3d4854ca60a",
                  "parentUUID": "ca88f9a7-a5e9-4eb6-9feb-6e0440876410",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e18f426-4383-4437-a21f-e3d4854ca60a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a75a1c3b-94c6-4535-bcdc-52ad6d186de8",
          "title": "mfkdf2/hints",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\hints.js",
          "file": "\\test\\mfkdf2\\hints.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getHint",
              "fullTitle": "mfkdf2/hints getHint",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst hint = await setup.getHint('password1', 7)\nhint.should.be.a('string')\nhint.length.should.equal(7)\nconst hinta = await setup.getHint('password1', 24)\nhinta.should.be.a('string')\nhinta.length.should.equal(24)\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderived.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst hint2 = await derived.getHint('password1', 7)\nhint2.should.equal(hint)\nconst hinta2 = await derived.getHint('password1', 24)\nhinta2.should.equal(hinta)\nconst derived2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('wrongpassword')\n  },\n  false\n)\nconst hinta3 = await derived2.getHint('password1', 24)\nhinta3.should.not.equal(hinta)",
              "err": {},
              "uuid": "cb53f22a-79db-456d-9cec-bb08a973cc83",
              "parentUUID": "a75a1c3b-94c6-4535-bcdc-52ad6d186de8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addHint",
              "fullTitle": "mfkdf2/hints addHint",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nawait setup.addHint('password1')\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(7)\nawait setup.addHint('password1', 24)\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(24)\nawait mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "14ff4fc6-fc8a-4825-af0d-a381826100e5",
              "parentUUID": "a75a1c3b-94c6-4535-bcdc-52ad6d186de8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/hints coverage",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nsetup.getHint().should.be.rejectedWith(TypeError)\nsetup.getHint(123).should.be.rejectedWith(TypeError)\nsetup.getHint('unknown').should.be.rejectedWith(RangeError)\nsetup.getHint('password1', 'string').should.be.rejectedWith(TypeError)\nsetup.getHint('password1', 0).should.be.rejectedWith(TypeError)\nsetup.getHint('password1', 300).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "3a0fbc2e-93ff-4732-b79e-47eaf02bbbd4",
              "parentUUID": "a75a1c3b-94c6-4535-bcdc-52ad6d186de8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb53f22a-79db-456d-9cec-bb08a973cc83",
            "14ff4fc6-fc8a-4825-af0d-a381826100e5",
            "3a0fbc2e-93ff-4732-b79e-47eaf02bbbd4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 151,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5a8ffd80-98f5-4814-aa2e-edbed5d96b38",
          "title": "mfkdf2/mfdpg2",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
          "file": "\\test\\mfkdf2\\mfdpg.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d4d0b428-7201-43cd-8212-4368d7ced246",
              "title": "basics",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "portability",
                  "fullTitle": "mfkdf2/mfdpg2 basics portability",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11);\n/[a-zA-Z]{6,10}/.test(password).should.be.true\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password3)",
                  "err": {},
                  "uuid": "69dacb57-2098-46ab-9ca0-38c837b54533",
                  "parentUUID": "d4d0b428-7201-43cd-8212-4368d7ced246",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-example",
                  "fullTitle": "mfkdf2/mfdpg2 basics full-example",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst policy = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\npassword1.should.equal(password3)",
                  "err": {},
                  "uuid": "01079b69-fb74-424b-90ad-54220cf2c129",
                  "parentUUID": "d4d0b428-7201-43cd-8212-4368d7ced246",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69dacb57-2098-46ab-9ca0-38c837b54533",
                "01079b69-fb74-424b-90ad-54220cf2c129"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fff2fba7-9a39-410b-b1b4-62941d9f1336",
              "title": "correctness",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness basic-test",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "06c07193-97ae-4521-b85e-dd42590ae856",
                  "parentUUID": "fff2fba7-9a39-410b-b1b4-62941d9f1336",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness full-test",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "796374ad-140e-45ee-a6c3-397d98a3dd8f",
                  "parentUUID": "fff2fba7-9a39-410b-b1b4-62941d9f1336",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06c07193-97ae-4521-b85e-dd42590ae856",
                "796374ad-140e-45ee-a6c3-397d98a3dd8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 75,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "27301bf2-e141-49ed-97c1-76063e2d8a39",
              "title": "safety",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety basic-test",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst setup2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup1.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password2)",
                  "err": {},
                  "uuid": "2c6e9cf8-43a0-41e3-9b99-e134ce3bee80",
                  "parentUUID": "27301bf2-e141-49ed-97c1-76063e2d8a39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety full-test",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst password3 = await derive2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password3)",
                  "err": {},
                  "uuid": "80bb2d0a-6e97-42aa-8695-04cd0e7d4c35",
                  "parentUUID": "27301bf2-e141-49ed-97c1-76063e2d8a39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c6e9cf8-43a0-41e3-9b99-e134ce3bee80",
                "80bb2d0a-6e97-42aa-8695-04cd0e7d4c35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3ed23621-c985-4520-9aa4-a7cc39b7157d",
              "title": "compatibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility basic-policy",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11)",
                  "err": {},
                  "uuid": "da6a5201-8ce9-4d7b-b7b4-b23a326dcf00",
                  "parentUUID": "3ed23621-c985-4520-9aa4-a7cc39b7157d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "custom-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility custom-policy",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst regex = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password = await setup.derivePassword('example.com', 'salt', regex)\nregex.test(password).should.be.true",
                  "err": {},
                  "uuid": "403886c0-a5d5-4b83-bed1-cefb69591391",
                  "parentUUID": "3ed23621-c985-4520-9aa4-a7cc39b7157d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da6a5201-8ce9-4d7b-b7b4-b23a326dcf00",
                "403886c0-a5d5-4b83-bed1-cefb69591391"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e8810e4b-0d63-40b1-93c8-57eef9a18a61",
          "title": "mfkdf2/passkeys",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\passkeys.js",
          "file": "\\test\\mfkdf2\\passkeys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "liveness",
              "fullTitle": "mfkdf2/passkeys liveness",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  passkey: mfkdf.derive.factors.passkey(prf)\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "a9fcd4a4-8ee9-457f-a542-04e1c7048c9e",
              "parentUUID": "e8810e4b-0d63-40b1-93c8-57eef9a18a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "mfkdf2/passkeys safety",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst prf2 = await crypto.randomBytes(32)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    passkey: mfkdf.derive.factors.passkey(prf2)\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "93899dfb-e3a6-4790-a34d-12ff16e4b031",
              "parentUUID": "e8810e4b-0d63-40b1-93c8-57eef9a18a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/passkeys coverage",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .passkey('hello')\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: 123 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .passkey(Buffer.from('hello'))\n  .should.be.rejectedWith(RangeError);\n(() => {\n  mfkdf.derive.factors.passkey('hello')\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.passkey(Buffer.from('hello'))\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "bdec4648-8477-4580-b8f4-3406332f5cb9",
              "parentUUID": "e8810e4b-0d63-40b1-93c8-57eef9a18a61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a9fcd4a4-8ee9-457f-a542-04e1c7048c9e",
            "93899dfb-e3a6-4790-a34d-12ff16e4b031",
            "bdec4648-8477-4580-b8f4-3406332f5cb9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dc54b5b7-6da9-4c50-8412-67333656ccf0",
          "title": "mfkdf2/security",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
          "file": "\\test\\mfkdf2\\security.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "totp",
              "fullTitle": "mfkdf2/security totp",
              "timedOut": false,
              "duration": 394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
              "err": {},
              "uuid": "9ec39975-5d74-4567-b7de-5fcf82605744",
              "parentUUID": "dc54b5b7-6da9-4c50-8412-67333656ccf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bf74c7f7-3652-45a3-b032-c059c5aba202",
              "title": "factor-fungibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security factor-fungibility correct",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "41d8a238-a93b-46da-bc85-e43c82ee5e8c",
                  "parentUUID": "bf74c7f7-3652-45a3-b032-c059c5aba202",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "incorrect",
                  "fullTitle": "mfkdf2/security factor-fungibility incorrect",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2'),\n    password2: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "9d86d584-c0e6-4eab-beab-4a8b25e265bf",
                  "parentUUID": "bf74c7f7-3652-45a3-b032-c059c5aba202",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41d8a238-a93b-46da-bc85-e43c82ee5e8c",
                "9d86d584-c0e6-4eab-beab-4a8b25e265bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c9514407-0946-4696-8d1e-d7345c04b62d",
              "title": "share-indistinguishability",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "share-size",
                  "fullTitle": "mfkdf2/security share-indistinguishability share-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret = crypto.randomBytes(32)\nconst shares1 = mfkdf.secrets.share(secret, 1, 3)\nshares1.should.have.length(3)\nfor (const share of shares1) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares1.slice(0, 1).concat([null, null]), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null, null].concat(shares1.slice(2, 3)), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares2 = mfkdf.secrets.share(secret, 2, 3)\nshares2.should.have.length(3)\nfor (const share of shares2) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares2.slice(0, 2).concat([null]), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null].concat(shares2.slice(1, 3)), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares3 = mfkdf.secrets.share(secret, 3, 3)\nshares3.should.have.length(3)\nfor (const share of shares3) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares3.slice(0, 3), 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
                  "err": {},
                  "uuid": "91f8729f-4e05-4cf4-84c9-a3c39a8cca5b",
                  "parentUUID": "c9514407-0946-4696-8d1e-d7345c04b62d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91f8729f-4e05-4cf4-84c9-a3c39a8cca5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e4293cfc-51ed-49c3-9bfc-d58a9a27f43b",
              "title": "share-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security share-encryption correct",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst materialp1 = await mfkdf.derive.factors.password('password1')(\n  setup.policy.factors[0].params\n)\nconst padp1 = Buffer.from(setup.policy.factors[0].pad, 'base64')\nconst stretchedp1 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp1.data,\n    setup.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep1 = xor(padp1, stretchedp1)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword1', { id: 'password1' })\n)\nconst derive2f = await mfkdf.policy.derive(\n  derive.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive2f.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(derive.policy, {\n  password1: mfkdf.derive.factors.password('newPassword1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst materialp3 = await mfkdf.derive.factors.password('newPassword1')(\n  derive.policy.factors[0].params\n)\nconst padp3 = Buffer.from(derive.policy.factors[0].pad, 'base64')\nconst stretchedp3 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp3.data,\n    derive.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep3 = xor(padp3, stretchedp3)\nawait derive2.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password1' })\n)\nconst derive3 = await mfkdf.policy.derive(derive2.policy, {\n  password1: mfkdf.derive.factors.password('newPassword2'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nsharep1.should.not.equal(sharep3)",
                  "err": {},
                  "uuid": "40a793da-50d5-44d2-b133-f8eaf755ba27",
                  "parentUUID": "e4293cfc-51ed-49c3-9bfc-d58a9a27f43b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40a793da-50d5-44d2-b133-f8eaf755ba27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d53484a2-b8fa-47f3-a15c-cac897b0f22f",
              "title": "factor-secret-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "hotp",
                  "fullTitle": "mfkdf2/security factor-secret-encryption hotp",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
                  "err": {},
                  "uuid": "84d09b12-81e8-41bf-9a3b-8c717fc45c2b",
                  "parentUUID": "d53484a2-b8fa-47f3-a15c-cac897b0f22f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84d09b12-81e8-41bf-9a3b-8c717fc45c2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3b12e80f-49a0-491e-9e26-6839e6144dc4",
              "title": "timing-oracle",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                  "title": "totp/dynamic",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic no-oracle",
                      "timedOut": false,
                      "duration": 441,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "dae1dac2-a22a-49b7-a406-e627472c08e2",
                      "parentUUID": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 517,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "f50e9a90-1578-4537-b21e-c2c2bad0ed24",
                      "parentUUID": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 550,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "e1cd0c5f-16c8-4058-b4f6-bbd78c241bbd",
                      "parentUUID": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 524,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "e54fe683-010b-44a5-bf56-1042d4aa1507",
                      "parentUUID": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 551,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "f9e04153-2d13-404b-b5f2-4e123976518f",
                      "parentUUID": "b1829df1-aa56-4ce4-b686-6ddcf386e328",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dae1dac2-a22a-49b7-a406-e627472c08e2",
                    "f50e9a90-1578-4537-b21e-c2c2bad0ed24",
                    "e1cd0c5f-16c8-4058-b4f6-bbd78c241bbd",
                    "e54fe683-010b-44a5-bf56-1042d4aa1507",
                    "f9e04153-2d13-404b-b5f2-4e123976518f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2583,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                  "title": "totp/static",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static no-oracle",
                      "timedOut": false,
                      "duration": 453,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "ec9060f2-9fcc-4a63-8e74-eb6770dcb7fb",
                      "parentUUID": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 476,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "8079666c-cca7-48a2-8d79-356d151338bd",
                      "parentUUID": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 547,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "442134bb-60d9-4d55-99e3-62ee179a220a",
                      "parentUUID": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 471,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "eade603c-946c-4318-8dd9-c0cf84f3ddec",
                      "parentUUID": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 546,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "280fbcdd-d128-425f-aa0f-22e82aa32a21",
                      "parentUUID": "8e8ce9a3-6e50-4414-9cc2-dcfc0d0ba5d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ec9060f2-9fcc-4a63-8e74-eb6770dcb7fb",
                    "8079666c-cca7-48a2-8d79-356d151338bd",
                    "442134bb-60d9-4d55-99e3-62ee179a220a",
                    "eade603c-946c-4318-8dd9-c0cf84f3ddec",
                    "280fbcdd-d128-425f-aa0f-22e82aa32a21"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2493,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d223ee2e-8abe-4d4b-8eb9-f278fc4f65a8",
              "title": "policy-integrity",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security policy-integrity correct",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "8a6aa7e1-558e-459a-9239-18eb1dadf87e",
                  "parentUUID": "d223ee2e-8abe-4d4b-8eb9-f278fc4f65a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/$id",
                  "fullTitle": "mfkdf2/security policy-integrity invalid/$id",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nsetup.policy.$id = 'invalid-id'\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    {},\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "25a7c66d-19a6-415a-ba72-9c2cf4d7c52a",
                  "parentUUID": "d223ee2e-8abe-4d4b-8eb9-f278fc4f65a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a6aa7e1-558e-459a-9239-18eb1dadf87e",
                "25a7c66d-19a6-415a-ba72-9c2cf4d7c52a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9ec39975-5d74-4567-b7de-5fcf82605744"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "74bf8ecb-d334-49b4-8f3e-5a6832f7af18",
          "title": "mfkdf2/strengthening",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
          "file": "\\test\\mfkdf2\\strengthening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "strengthening-throws",
              "fullTitle": "mfkdf2/strengthening strengthening-throws",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nawait derive\n  .strengthen(-1, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strengthen(1.5, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strengthen(0, -1)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )\nawait derive\n  .strengthen(0, 1.5)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )",
              "err": {},
              "uuid": "ad575ba0-80fb-4e1f-81ed-26692bd2aa0c",
              "parentUUID": "74bf8ecb-d334-49b4-8f3e-5a6832f7af18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-works-multiple-times",
              "fullTitle": "mfkdf2/strengthening strengthening-works-multiple-times",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive.policy.time = 0\nderive.policy.memory = 0\nawait mfkdf.derive\n  .key(derive.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)\nawait derive2.strengthen(3, 16384)\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive3.policy.time.should.equal(3)\nderive3.policy.memory.should.equal(16384)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.policy.time = 0\nderive2.policy.memory = 0\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)",
              "err": {},
              "uuid": "c2508892-2793-406e-95e1-3677129a00b2",
              "parentUUID": "74bf8ecb-d334-49b4-8f3e-5a6832f7af18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-other-factors",
              "fullTitle": "mfkdf2/strengthening strengthening-with-other-factors",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive2.strengthen()\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(0)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.policy.time.should.equal(0)\nderive3.policy.memory.should.equal(0)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "c7c10644-690c-4837-b38c-fa5becaf330a",
              "parentUUID": "74bf8ecb-d334-49b4-8f3e-5a6832f7af18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-reconstitution",
              "fullTitle": "mfkdf2/strengthening strengthening-with-reconstitution",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nawait derive.setThreshold(1)\nawait derive.removeFactor('password2')\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "77da6908-48b2-4917-97f9-cc25135129b0",
              "parentUUID": "74bf8ecb-d334-49b4-8f3e-5a6832f7af18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8a25b843-fc7c-4b96-a6c3-0be1f06bd064",
              "title": "setup",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening setup time",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 5 }\n)\nsetup.policy.time.should.equal(5)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(5)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f252a791-d891-4aa8-858a-deb0fdef8c09",
                  "parentUUID": "8a25b843-fc7c-4b96-a6c3-0be1f06bd064",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening setup memory",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 32768 }\n)\nsetup.policy.memory.should.equal(32768)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(32768)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "857d2e8b-88b7-4618-8806-1bc09f6ff554",
                  "parentUUID": "8a25b843-fc7c-4b96-a6c3-0be1f06bd064",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening setup time-and-memory",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3, memory: 16384 }\n)\nsetup.policy.time.should.equal(3)\nsetup.policy.memory.should.equal(16384)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "bb18727b-38e2-4c22-9a23-b105569a2ee7",
                  "parentUUID": "8a25b843-fc7c-4b96-a6c3-0be1f06bd064",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws",
                  "fullTitle": "mfkdf2/strengthening setup throws",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'time must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'time must be an integer')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'memory must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'memory must be an integer')",
                  "err": {},
                  "uuid": "c7294ee7-97f9-4796-9344-519fb59fdb70",
                  "parentUUID": "8a25b843-fc7c-4b96-a6c3-0be1f06bd064",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f252a791-d891-4aa8-858a-deb0fdef8c09",
                "857d2e8b-88b7-4618-8806-1bc09f6ff554",
                "bb18727b-38e2-4c22-9a23-b105569a2ee7",
                "c7294ee7-97f9-4796-9344-519fb59fdb70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 420,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3090086f-7367-452f-9c59-8853d8e9e6bb",
              "title": "strengthening",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening strengthening time",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(5, 0)\nderive.policy.time.should.equal(5)\nderive.policy.memory.should.equal(0)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(5)\nderive2.policy.memory.should.equal(0)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "dedc4aca-a544-4804-b24b-0227320230d7",
                  "parentUUID": "3090086f-7367-452f-9c59-8853d8e9e6bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening strengthening memory",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(0, 32768)\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(32768)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(32768)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "72499733-e922-4800-95b8-d8b6a3604b45",
                  "parentUUID": "3090086f-7367-452f-9c59-8853d8e9e6bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening strengthening time-and-memory",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(3, 16384)\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e08abf0c-4f98-4ae4-9ea0-a7e407cb4972",
                  "parentUUID": "3090086f-7367-452f-9c59-8853d8e9e6bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dedc4aca-a544-4804-b24b-0227320230d7",
                "72499733-e922-4800-95b8-d8b6a3604b45",
                "e08abf0c-4f98-4ae4-9ea0-a7e407cb4972"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 556,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "ad575ba0-80fb-4e1f-81ed-26692bd2aa0c",
            "c2508892-2793-406e-95e1-3677129a00b2",
            "c7c10644-690c-4837-b38c-fa5becaf330a",
            "77da6908-48b2-4917-97f9-cc25135129b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 783,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b87a9d2a-7f9b-402f-8d33-8e9660cda00d",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "d6fc5c1d-b9d3-4fa1-a223-dbee35fba4d2",
              "parentUUID": "b87a9d2a-7f9b-402f-8d33-8e9660cda00d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "5e498605-dc23-4cfb-904d-aa8d3e282899",
              "parentUUID": "b87a9d2a-7f9b-402f-8d33-8e9660cda00d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f0110096-80b4-4f2f-a78b-76ed81ea7dc0",
              "parentUUID": "b87a9d2a-7f9b-402f-8d33-8e9660cda00d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6fc5c1d-b9d3-4fa1-a223-dbee35fba4d2",
            "5e498605-dc23-4cfb-904d-aa8d3e282899",
            "f0110096-80b4-4f2f-a78b-76ed81ea7dc0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c64b0162-56db-4b51-80d6-06f12da0c100",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1902c78d-f37f-41fb-95e2-365a2cb9ebb6",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  1,\n  5\n)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f52c1a5f-6edf-4c7d-8869-12008e05c124",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  2,\n  3\n)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "86e92226-ac11-4aec-b423-904da10fe5e7",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "386bb3b7-c788-4d2f-9648-5429a3287ff0",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nshares.should.be.an('array').of.length(255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 250; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 255)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[251] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "935cf52c-1ac7-4c44-b454-83ce9f284c16",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)",
              "err": {},
              "uuid": "cfe18cef-b713-425b-bb9d-86a656391929",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e60e18d0-a57d-4353-8f9d-34e7ee6bec13",
              "parentUUID": "c64b0162-56db-4b51-80d6-06f12da0c100",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1902c78d-f37f-41fb-95e2-365a2cb9ebb6",
            "f52c1a5f-6edf-4c7d-8869-12008e05c124",
            "86e92226-ac11-4aec-b423-904da10fe5e7",
            "386bb3b7-c788-4d2f-9648-5429a3287ff0",
            "935cf52c-1ac7-4c44-b454-83ce9f284c16",
            "cfe18cef-b713-425b-bb9d-86a656391929",
            "e60e18d0-a57d-4353-8f9d-34e7ee6bec13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1388a073-a696-4137-9df4-fcfb22ddba61",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\new.js",
          "file": "\\test\\secrets\\new.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "share-size",
              "fullTitle": "secrets share-size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let secret = crypto.randomBytes(32)\nlet shares = mfkdf.secrets.share(secret, 1, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[0].should.equal(secret)\nshares[1].length.should.equal(32)\nshares[1].should.equal(secret)\nshares[2].length.should.equal(32)\nshares[2].should.equal(secret)\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[2] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 2, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 3, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
              "err": {},
              "uuid": "4534b8d3-e9dc-46df-b374-6834a6de942f",
              "parentUUID": "1388a073-a696-4137-9df4-fcfb22ddba61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4534b8d3-e9dc-46df-b374-6834a6de942f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
          "title": "secrets/recover",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "47ee5905-44f5-4be7-a254-46537933a171",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "20d8f7a8-8e44-4978-acdb-213f17ec310f",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "f41a56a1-50b9-4117-9462-cb6eedf9773a",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "09d9b0f5-49b1-48f8-8d1e-4f37d5a9f050",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d951c0ab-b21b-4a6e-8f4c-b862edf41474",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "3157ffb0-1646-4947-b829-541f5fbada70",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "0d4a3361-ec14-43e5-bba7-871d2b64b44c",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "ee4ff8af-52a1-44c4-b6cc-daad8b008b32",
              "parentUUID": "82378dd7-94e6-43ee-ac5d-d457ce28db22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47ee5905-44f5-4be7-a254-46537933a171",
            "20d8f7a8-8e44-4978-acdb-213f17ec310f",
            "f41a56a1-50b9-4117-9462-cb6eedf9773a",
            "09d9b0f5-49b1-48f8-8d1e-4f37d5a9f050",
            "d951c0ab-b21b-4a6e-8f4c-b862edf41474",
            "3157ffb0-1646-4947-b829-541f5fbada70",
            "0d4a3361-ec14-43e5-bba7-871d2b64b44c",
            "ee4ff8af-52a1-44c4-b6cc-daad8b008b32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "be0d3a12-b92f-4e3b-be63-d6a0d629be63",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "1280cc4b-8e99-4ffa-bf8b-30a10c694e3b",
              "parentUUID": "be0d3a12-b92f-4e3b-be63-d6a0d629be63",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "ff60e001-4885-4bac-af1d-5748518ab059",
              "parentUUID": "be0d3a12-b92f-4e3b-be63-d6a0d629be63",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5daaf6f8-44e0-4e7a-bbed-dfc82c84932c",
              "parentUUID": "be0d3a12-b92f-4e3b-be63-d6a0d629be63",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1280cc4b-8e99-4ffa-bf8b-30a10c694e3b",
            "ff60e001-4885-4bac-af1d-5748518ab059",
            "5daaf6f8-44e0-4e7a-bbed-dfc82c84932c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "89dc7987-a040-4858-b10f-92eda28bca53",
          "title": "setup/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .password('password', { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "af3a5c7e-506e-4a82-9bda-99b82e603071",
              "parentUUID": "89dc7987-a040-4858-b10f-92eda28bca53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .password('password', { id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "b31027f3-9a34-4434-b297-b7d939c1436f",
              "parentUUID": "89dc7987-a040-4858-b10f-92eda28bca53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "7f5fe5f7-db0f-4071-9d01-beeff985421f",
              "parentUUID": "89dc7987-a040-4858-b10f-92eda28bca53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af3a5c7e-506e-4a82-9bda-99b82e603071",
            "b31027f3-9a34-4434-b297-b7d939c1436f",
            "7f5fe5f7-db0f-4071-9d01-beeff985421f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1d009dcc-d75d-450a-8891-687a76d46192",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ uuid: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ uuid: 'hello' })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "d1bb871f-5b18-4af7-8483-648a93af3ea5",
              "parentUUID": "1d009dcc-d75d-450a-8891-687a76d46192",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "65d01881-ba1b-4472-9c35-b2f6b93731dc",
              "parentUUID": "1d009dcc-d75d-450a-8891-687a76d46192",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({\n  uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n})\nfactor.type.should.equal('uuid')\nfactor.data\n  .toString('hex')\n  .should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "2c71ac23-3707-4c4b-a4d2-2052b7c2e90d",
              "parentUUID": "1d009dcc-d75d-450a-8891-687a76d46192",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "37f0567f-ec0f-4982-b784-ddf0036a330e",
              "parentUUID": "1d009dcc-d75d-450a-8891-687a76d46192",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1bb871f-5b18-4af7-8483-648a93af3ea5",
            "65d01881-ba1b-4472-9c35-b2f6b93731dc",
            "2c71ac23-3707-4c4b-a4d2-2052b7c2e90d",
            "37f0567f-ec0f-4982-b784-ddf0036a330e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f689b784-98b9-4226-99f8-307d5c5f066c",
          "title": "setup/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "aaee432f-826b-4463-9f00-91c30543a86d",
              "parentUUID": "f689b784-98b9-4226-99f8-307d5c5f066c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5150b5d7-b73e-4dea-b42c-01b1f213101a",
              "title": "id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "ca06adb0-2775-41f2-a082-898d04a18f79",
                  "parentUUID": "5150b5d7-b73e-4dea-b42c-01b1f213101a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { id: 'hello-world' }\n)\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "25a1a397-b6d6-45f8-8d88-a3a1a7515db4",
                  "parentUUID": "5150b5d7-b73e-4dea-b42c-01b1f213101a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "79620013-5f71-4dd9-a716-81ce252148e9",
                  "parentUUID": "5150b5d7-b73e-4dea-b42c-01b1f213101a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "938564e7-5723-4488-a59d-62aafa696e0c",
                  "parentUUID": "5150b5d7-b73e-4dea-b42c-01b1f213101a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca06adb0-2775-41f2-a082-898d04a18f79",
                "25a1a397-b6d6-45f8-8d88-a3a1a7515db4",
                "79620013-5f71-4dd9-a716-81ce252148e9",
                "938564e7-5723-4488-a59d-62aafa696e0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "06202fbd-5702-440c-ade2-4d584b1d95d3",
              "title": "threshold",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "5aee2533-b710-4127-8db9-7c8f03a70fff",
                  "parentUUID": "06202fbd-5702-440c-ade2-4d584b1d95d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password2' })\n  ],\n  { threshold: 1 }\n)\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "2c146235-5a5b-4cf0-8ee4-019c2b386b84",
                  "parentUUID": "06202fbd-5702-440c-ade2-4d584b1d95d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], {\n    threshold: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "164b45f2-423d-4eb3-86f0-6e88c13fb259",
                  "parentUUID": "06202fbd-5702-440c-ade2-4d584b1d95d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 0 })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 2 })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "159b8c28-54a2-4be7-ba46-5544fbfd5267",
                  "parentUUID": "06202fbd-5702-440c-ade2-4d584b1d95d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5aee2533-b710-4127-8db9-7c8f03a70fff",
                "2c146235-5a5b-4cf0-8ee4-019c2b386b84",
                "164b45f2-423d-4eb3-86f0-6e88c13fb259",
                "159b8c28-54a2-4be7-ba46-5544fbfd5267"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "98210b0a-8e9c-4213-81e4-2f9e93c55420",
              "title": "salt",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(32)",
                  "err": {},
                  "uuid": "7c7a5d9f-3a32-453b-a0d2-78ea13b8fc20",
                  "parentUUID": "98210b0a-8e9c-4213-81e4-2f9e93c55420",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { salt: Buffer.from('1234567812345678', 'base64') }\n)\npolicy.salt.should.equal('1234567812345678')",
                  "err": {},
                  "uuid": "a240a5f3-db2d-400a-b72b-51f4067b2f3b",
                  "parentUUID": "98210b0a-8e9c-4213-81e4-2f9e93c55420",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { salt: 'hello' })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2d89963e-e057-48f8-bcbe-a66dcf3844b3",
                  "parentUUID": "98210b0a-8e9c-4213-81e4-2f9e93c55420",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c7a5d9f-3a32-453b-a0d2-78ea13b8fc20",
                "a240a5f3-db2d-400a-b72b-51f4067b2f3b",
                "2d89963e-e057-48f8-bcbe-a66dcf3844b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fc1b4aca-315c-4572-a1d5-01a83ebc4ccb",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "93ec02a2-2ae3-46c6-a4f4-4cf5fdc6ee86",
                  "parentUUID": "fc1b4aca-315c-4572-a1d5-01a83ebc4ccb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password1' })\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b34c9b52-faee-4c08-9d77-3902da41589d",
                  "parentUUID": "fc1b4aca-315c-4572-a1d5-01a83ebc4ccb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 12345,\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 12345,\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: 12345,\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: 12345\n    }\n  ])\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8ce0268d-41b0-4918-b3dd-92bb9004a62f",
                  "parentUUID": "fc1b4aca-315c-4572-a1d5-01a83ebc4ccb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([]).should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: '',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: '',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2cc77103-ac71-4885-9231-ddd2d488c443",
                  "parentUUID": "fc1b4aca-315c-4572-a1d5-01a83ebc4ccb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93ec02a2-2ae3-46c6-a4f4-4cf5fdc6ee86",
                "b34c9b52-faee-4c08-9d77-3902da41589d",
                "8ce0268d-41b0-4918-b3dd-92bb9004a62f",
                "2cc77103-ac71-4885-9231-ddd2d488c443"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "aaee432f-826b-4463-9f00-91c30543a86d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mfkdf2/public/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}