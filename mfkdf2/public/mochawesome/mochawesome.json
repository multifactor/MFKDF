{
  "stats": {
    "suites": 76,
    "tests": 268,
    "passes": 268,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-13T19:43:57.724Z",
    "end": "2025-09-13T19:44:16.411Z",
    "duration": 18687,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "668966c8-d9a6-4449-a197-0eadf194bca6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7484c2b3-07f5-498c-aead-d15f73d42b91",
          "title": "aes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\aes.js",
          "file": "\\test\\crypto\\aes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "encrypt throws on invalid inputs",
              "fullTitle": "aes encrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.encrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.encrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "d84e1618-7077-4dbe-95d5-882c66f92695",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt throws on invalid inputs",
              "fullTitle": "aes decrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.decrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.decrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "4b13286f-b6ef-4956-8e2d-842fba0e8eb9",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "encrypts and decrypts correctly",
              "fullTitle": "aes encrypts and decrypts correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.true",
              "err": {},
              "uuid": "2e007684-3ca6-44d1-a45f-00e7c0ed2117",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting with wrong key fails",
              "fullTitle": "aes decrypting with wrong key fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst wrongKey = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, wrongKey)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "5cdbf036-8236-4589-9292-14e70ca0d368",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting modified data fails",
              "fullTitle": "aes decrypting modified data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\n// Modify the encrypted data\nencrypted[0] ^= 0xff\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "2d7e218c-6056-4545-ba53-4f5cecf25bdb",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ciphertext length equals plaintext length",
              "fullTitle": "aes ciphertext length equals plaintext length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nencrypted.length.should.equal(data.length)",
              "err": {},
              "uuid": "042ba564-68d7-4773-b2b3-e29340d76d52",
              "parentUUID": "7484c2b3-07f5-498c-aead-d15f73d42b91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d84e1618-7077-4dbe-95d5-882c66f92695",
            "4b13286f-b6ef-4956-8e2d-842fba0e8eb9",
            "2e007684-3ca6-44d1-a45f-00e7c0ed2117",
            "5cdbf036-8236-4589-9292-14e70ca0d368",
            "2d7e218c-6056-4545-ba53-4f5cecf25bdb",
            "042ba564-68d7-4773-b2b3-e29340d76d52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1fd2f452-920d-42bd-8dec-142dbb44a1e5",
          "title": "encrypt",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2110410f-19df-4026-a0ef-830261af23a9",
              "title": "utils",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid1',\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey()\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "5d178586-8ab5-43d5-b951-98954bacf80b",
                  "parentUUID": "2110410f-19df-4026-a0ef-830261af23a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d178586-8ab5-43d5-b951-98954bacf80b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18cfb831-96d0-43b2-8abc-8e9d23355cf4",
          "title": "derive/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "61046047-88a9-4b82-b8c3-e4f147e2608d",
              "parentUUID": "18cfb831-96d0-43b2-8abc-8e9d23355cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1db37bd8-719d-47cf-96e0-262bff55e248",
              "parentUUID": "18cfb831-96d0-43b2-8abc-8e9d23355cf4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61046047-88a9-4b82-b8c3-e4f147e2608d",
            "1db37bd8-719d-47cf-96e0-262bff55e248"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1454073f-d557-4b36-9333-d82a8fee2409",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "548b1518-3177-4269-a9c6-f43bbae7fde6",
              "parentUUID": "1454073f-d557-4b36-9333-d82a8fee2409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "2021d5ab-b60f-4171-8c43-2afab8d5da6f",
              "parentUUID": "1454073f-d557-4b36-9333-d82a8fee2409",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "548b1518-3177-4269-a9c6-f43bbae7fde6",
            "2021d5ab-b60f-4171-8c43-2afab8d5da6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4c00d17d-779a-4917-a98e-43c46811fe17",
          "title": "derive/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hkdf",
              "fullTitle": "derive/key hkdf",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "68722069-6d32-49d2-8f7f-123e2cb06506",
              "parentUUID": "4c00d17d-779a-4917-a98e-43c46811fe17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "e5f19b79-a9f2-494a-b487-c7bfd8a5c47b",
              "parentUUID": "4c00d17d-779a-4917-a98e-43c46811fe17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: false }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('wrongpassword2')\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password2: mfkdf.derive.factors.password('wrongpassword2'),\n    password3: mfkdf.derive.factors.password('wrongpassword3')\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password4')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "be8607d7-aeb6-48fa-ada7-7a34e79d1d2d",
              "parentUUID": "4c00d17d-779a-4917-a98e-43c46811fe17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    )\n  })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "c187c5d4-8093-442b-87a4-59f9779c0c60",
              "parentUUID": "4c00d17d-779a-4917-a98e-43c46811fe17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "b644df69-a456-479b-852e-b55815601290",
              "title": "shares",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "a4aaa0e9-9019-41d0-97bd-0f84c76d07ff",
                  "parentUUID": "b644df69-a456-479b-852e-b55815601290",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4aaa0e9-9019-41d0-97bd-0f84c76d07ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1e4eaec7-5b1f-4256-96d3-c0ef4e53e931",
              "title": "invalid",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7c8de0f7-3ab4-432b-ad73-d683ddf93b50",
                  "parentUUID": "1e4eaec7-5b1f-4256-96d3-c0ef4e53e931",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "dbb61ff4-1f16-46fc-ad21-0fa96d5fd006",
                  "parentUUID": "1e4eaec7-5b1f-4256-96d3-c0ef4e53e931",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c8de0f7-3ab4-432b-ad73-d683ddf93b50",
                "dbb61ff4-1f16-46fc-ad21-0fa96d5fd006"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "68722069-6d32-49d2-8f7f-123e2cb06506",
            "e5f19b79-a9f2-494a-b487-c7bfd8a5c47b",
            "be8607d7-aeb6-48fa-ada7-7a34e79d1d2d",
            "c187c5d4-8093-442b-87a4-59f9779c0c60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 353,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18882176-f7b6-47de-8844-9d705fa45bfa",
          "title": "derive/outputs",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\outputs.js",
          "file": "\\test\\derive\\outputs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stack",
              "fullTitle": "derive/outputs stack",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    })\n  ]),\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid3',\n    uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n  })\n])\ndelete setup.outputs.stack.entropyBits\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  }),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "8e8efff6-e2c2-4354-b39a-9457e7b7eb68",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "hmacsha1",
              "fullTitle": "derive/outputs hmacsha1",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.outputs.should.not.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "4866a13e-492c-47b4-bb87-8d7e344cc47a",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uuid",
              "fullTitle": "derive/outputs uuid",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "21f712de-04bc-4f36-8cd5-b93556e0a595",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "question",
              "fullTitle": "derive/outputs question",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.outputs.question.strength.calc_time = null\nderive.outputs.question.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "112424c9-c3b9-4ba0-853b-acf2c34795f3",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ooba",
              "fullTitle": "derive/outputs ooba",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "cc2c4e2d-4c9b-4234-800e-ef4b9aded81f",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password",
              "fullTitle": "derive/outputs password",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.outputs.password.strength.calc_time = null\nderive.outputs.password.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "353902c7-b245-4a6a-9f84-cb254c6e8fab",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple",
              "fullTitle": "derive/outputs multiple",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nderive.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})",
              "err": {},
              "uuid": "7c09ecf7-1864-49a0-8c37-1ae6676b1c31",
              "parentUUID": "18882176-f7b6-47de-8844-9d705fa45bfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e8efff6-e2c2-4354-b39a-9457e7b7eb68",
            "4866a13e-492c-47b4-bb87-8d7e344cc47a",
            "21f712de-04bc-4f36-8cd5-b93556e0a595",
            "112424c9-c3b9-4ba0-853b-acf2c34795f3",
            "cc2c4e2d-4c9b-4234-800e-ef4b9aded81f",
            "353902c7-b245-4a6a-9f84-cb254c6e8fab",
            "7c09ecf7-1864-49a0-8c37-1ae6676b1c31"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b6e9fbb2-fb97-42f8-ab6d-43cf21fc98c0",
          "title": "examples",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "6d5795e9-6009-44d9-b92d-f43125235193",
              "parentUUID": "b6e9fbb2-fb97-42f8-ab6d-43cf21fc98c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "f15b6e39-9f91-40a3-a2ed-b64c0d098fec",
              "parentUUID": "b6e9fbb2-fb97-42f8-ab6d-43cf21fc98c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    }),\n    await mfkdf.setup.factors.password('password2', {\n      id: 'password2'\n    })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e733b501-8016-4012-ad50-7eeb7a505ded",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "3699ff84-0d37-47e2-9703-1d23b4fe0bb7",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 481,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f9936483-67a4-4ed5-a361-0e44fee6471f",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "b7ac1d7d-1e67-4498-8dbc-d2b62dffb07e",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "65dd4c29-d408-4133-a66e-50b7fd5fed59",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "97f7bb0c-aaba-47f9-8431-335424d558d3",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0e4a4a37-6193-49f2-9ec9-ec72a35e301c",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ec418640-c019-4114-92cc-52a5db13a74b",
                  "parentUUID": "6cd9ce9e-59eb-4961-a305-c07a4c2aa565",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e733b501-8016-4012-ad50-7eeb7a505ded",
                "3699ff84-0d37-47e2-9703-1d23b4fe0bb7",
                "f9936483-67a4-4ed5-a361-0e44fee6471f",
                "b7ac1d7d-1e67-4498-8dbc-d2b62dffb07e",
                "65dd4c29-d408-4133-a66e-50b7fd5fed59",
                "97f7bb0c-aaba-47f9-8431-335424d558d3",
                "0e4a4a37-6193-49f2-9ec9-ec72a35e301c",
                "ec418640-c019-4114-92cc-52a5db13a74b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 878,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d4288d7c-06b4-4ffb-8deb-cce5f20a5755",
              "title": "secrets",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(\n  Buffer.from('abcdefghijklmnopqrst'),\n  2,\n  3\n) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "d6aee0bd-81c9-474c-95bb-1da7b808cbef",
                  "parentUUID": "d4288d7c-06b4-4ffb-8deb-cce5f20a5755",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6aee0bd-81c9-474c-95bb-1da7b808cbef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "00a08e18-e23a-4807-bc37-14a90b81dd90",
              "title": "policy",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "110670ff-1e06-49c5-ab37-b4ee4a566469",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "f743fce0-de34-4f43-bd1a-c86e4e1767f9",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordA',\n  'passwordC'\n]) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordB',\n  'passwordC'\n]) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "8dd31d0c-2bc3-4b20-bcab-0e1b48459682",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "4591cb53-92f5-4328-b4d8-9a7886b22bae",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "4431678a-8ccb-442e-aa63-f2208181de9c",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "02b56872-c493-425c-b950-8cc4e7e93975",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "a5b868a5-2f9f-45aa-9e4f-5261fedf3fc8",
                  "parentUUID": "00a08e18-e23a-4807-bc37-14a90b81dd90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "110670ff-1e06-49c5-ab37-b4ee4a566469",
                "f743fce0-de34-4f43-bd1a-c86e4e1767f9",
                "8dd31d0c-2bc3-4b20-bcab-0e1b48459682",
                "4591cb53-92f5-4328-b4d8-9a7886b22bae",
                "4431678a-8ccb-442e-aa63-f2208181de9c",
                "02b56872-c493-425c-b950-8cc4e7e93975",
                "a5b868a5-2f9f-45aa-9e4f-5261fedf3fc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 269,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "13897149-1d72-4fda-bff9-f82da20063ad",
              "title": "reconstitution",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "25fbc25a-9e8d-4e19-8f65-d3499aff92e0",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "64b49109-18a5-4ee4-bf91-b0d37b47d02e",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "13b05a03-88db-40f4-9361-f0a306d43934",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "b24529f0-542c-458f-8c90-8f8e41fdd4af",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "cd51b781-2b48-43c1-8330-861a3f280c1c",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "a3a697f1-b338-4fe2-b762-c8c5923af2f2",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "842e7dd1-5391-469e-8cba-3d1d752da2b4",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ccbadb9f-389b-46ae-9ace-c91398194b67",
                  "parentUUID": "13897149-1d72-4fda-bff9-f82da20063ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25fbc25a-9e8d-4e19-8f65-d3499aff92e0",
                "64b49109-18a5-4ee4-bf91-b0d37b47d02e",
                "13b05a03-88db-40f4-9361-f0a306d43934",
                "b24529f0-542c-458f-8c90-8f8e41fdd4af",
                "cd51b781-2b48-43c1-8330-861a3f280c1c",
                "a3a697f1-b338-4fe2-b762-c8c5923af2f2",
                "842e7dd1-5391-469e-8cba-3d1d752da2b4",
                "ccbadb9f-389b-46ae-9ace-c91398194b67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 378,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "586f1863-e4f6-46df-908a-8f3608da705e",
              "title": "persistence",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "bd32cc59-8374-410a-a0d8-293d3d5c13c1",
                  "parentUUID": "586f1863-e4f6-46df-908a-8f3608da705e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd32cc59-8374-410a-a0d8-293d3d5c13c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "57c8f4ea-321d-4025-a4f3-87f3d468d8f0",
              "title": "crypto",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// get sub-key for \"eth\"\nconst subkey = key.getSubkey('eth')\nsubkey.toString('hex') // -> 97cb…bac5",
                  "err": {},
                  "uuid": "f0e8dc78-b325-4b9a-aacf-0b02becba940",
                  "parentUUID": "57c8f4ea-321d-4025-a4f3-87f3d468d8f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0e8dc78-b325-4b9a-aacf-0b02becba940"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "6d5795e9-6009-44d9-b92d-f43125235193",
            "f15b6e39-9f91-40a3-a2ed-b64c0d098fec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "272379c2-c35e-43fe-8458-7962b3bb3e4b",
          "title": "site",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('Tr0ub4dour'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recovery',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recovery: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "775c1d10-6a05-43ce-8696-07b7f5128fd1",
              "parentUUID": "272379c2-c35e-43fe-8458-7962b3bb3e4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour')\n    ])\n  ).entropyBits.real\n).should.equal(16)\nMath.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp(),\n      await mfkdf.setup.factors.hmacsha1()\n    ])\n  ).entropyBits.real\n).should.equal(196)",
              "err": {},
              "uuid": "4f80bc3a-10ad-41a9-8184-c23c4e20f3f9",
              "parentUUID": "272379c2-c35e-43fe-8458-7962b3bb3e4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "1ad604d7-108c-4268-b35a-2937fbd29ff0",
              "parentUUID": "272379c2-c35e-43fe-8458-7962b3bb3e4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('password'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recoveryCode',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recoveryCode: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "0199c56d-71ad-4004-9433-4579509736ed",
              "parentUUID": "272379c2-c35e-43fe-8458-7962b3bb3e4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "775c1d10-6a05-43ce-8696-07b7f5128fd1",
            "4f80bc3a-10ad-41a9-8184-c23c4e20f3f9",
            "1ad604d7-108c-4268-b35a-2937fbd29ff0",
            "0199c56d-71ad-4004-9433-4579509736ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 503,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
          "title": "tutorials",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\nsetup.key.toString('hex') // -> 6458…dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "58ea5cd7-3b0e-483e-ac67-b1b534628baa",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// reconstitute key to change password\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword')\n)\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771",
              "err": {},
              "uuid": "2283b624-9deb-4519-b2b6-6f05e9021cb0",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack([\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ]),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\nsetup.key.toString('hex') // -> 01d0…2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "932f0db0-d57b-4f39-9b0f-c499059358c0",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d2…5771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d2…5771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "c44b3b5d-f2b4-4a2a-a64d-606968e4a638",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.key.toString('hex') // -> 34d2…5771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "eea49cdb-ee69-4be7-92b4-fd66f40771dd",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n])\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n])\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n])\nconst threshold = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n    await mfkdf.setup.factors.uuid(),\n    await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "c2ae860b-7acf-47d8-9e5e-f19679a20e11",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "9188deed-400e-42df-a063-69033908dae5",
              "parentUUID": "0968d011-0e1f-468c-9611-78ee30d1d0d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58ea5cd7-3b0e-483e-ac67-b1b534628baa",
            "2283b624-9deb-4519-b2b6-6f05e9021cb0",
            "932f0db0-d57b-4f39-9b0f-c499059358c0",
            "c44b3b5d-f2b4-4a2a-a64d-606968e4a638",
            "eea49cdb-ee69-4be7-92b4-fd66f40771dd",
            "c2ae860b-7acf-47d8-9e5e-f19679a20e11",
            "9188deed-400e-42df-a063-69033908dae5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 411,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "98cf99d2-dcff-40f2-82ce-da3cfdbbfb0b",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key).update(challenge).digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "db8e538c-1cb5-4f36-9a09-f3fc629b4af6",
              "parentUUID": "98cf99d2-dcff-40f2-82ce-da3cfdbbfb0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response1 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(\n  derive1.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response2 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "ba00c6f2-fbb4-4ed0-b77d-c7a76f24cf16",
              "parentUUID": "98cf99d2-dcff-40f2-82ce-da3cfdbbfb0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.equal(\n    '2747ebf65219aee6630a758e40fd05ccbb39ab465745ea1c9a6c5adb6673d2d3'\n  )",
              "err": {},
              "uuid": "e8acb12f-fd6d-4483-bbf1-e1df79b7112a",
              "parentUUID": "98cf99d2-dcff-40f2-82ce-da3cfdbbfb0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "wrong-salt",
              "fullTitle": "factors/hmacsha1 wrong-salt",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PlS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nconst setup2 =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive2 = await mfkdf.derive.key(\n  JSON.parse(setup2),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.not.equal(\n    '64393334663330303639356134323533393937376561636234363262373662316562616564393838663531393337303563666432633265373130636663666230'\n  )\nderive.key.toString('hex').should.not.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "2cc77687-4f24-46e3-b163-b004438d0eea",
              "parentUUID": "98cf99d2-dcff-40f2-82ce-da3cfdbbfb0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c21ae1a8-85ff-4808-b265-35f12b929402",
                  "parentUUID": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "72e9e700-60fb-43fd-ba95-66a23bb66c9d",
                  "parentUUID": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bfe0a993-735d-4344-9c5a-083b6151ea20",
                  "parentUUID": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: Buffer.from('12345') })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a0cb7946-cf17-4cb6-bc30-dfb28fed4539",
                  "parentUUID": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "ef8defc7-7459-4b94-bd90-031412f921a9",
                  "parentUUID": "17312ee4-ac92-42ec-a0dd-1bc775c01a3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c21ae1a8-85ff-4808-b265-35f12b929402",
                "72e9e700-60fb-43fd-ba95-66a23bb66c9d",
                "bfe0a993-735d-4344-9c5a-083b6151ea20",
                "a0cb7946-cf17-4cb6-bc30-dfb28fed4539",
                "ef8defc7-7459-4b94-bd90-031412f921a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "db8e538c-1cb5-4f36-9a09-f3fc629b4af6",
            "ba00c6f2-fbb4-4ed0-b77d-c7a76f24cf16",
            "e8acb12f-fd6d-4483-bbf1-e1df79b7112a",
            "2cc77687-4f24-46e3-b163-b004438d0eea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "667f6c4b-e3c4-44bb-9757-f1d94c3fd026",
          "title": "factors/hotp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/hotp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "bf651a06-753a-4343-8f5a-a1161c495c53",
              "parentUUID": "667f6c4b-e3c4-44bb-9757-f1d94c3fd026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(361687)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(979122)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "0f981ab1-7921-4fd5-b173-50743b4c3bee",
              "parentUUID": "667f6c4b-e3c4-44bb-9757-f1d94c3fd026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.hotp()])",
              "err": {},
              "uuid": "d333dfc7-77ca-45ac-970d-e8965af24433",
              "parentUUID": "667f6c4b-e3c4-44bb-9757-f1d94c3fd026",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "ebe90f87-3215-4079-a190-1352d6b4399e",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ac37e52e-12d2-4785-ac2b-6338c1719b9e",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8763557c-9825-44e9-812f-4149d3ec84f0",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "93f425a0-8ed2-46b1-b021-be673ef82114",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b14c110b-02ba-465c-9f9b-68cb052f3dc9",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f989dae8-dabc-43e8-801b-360842559c85",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7be70ce0-a87b-49f1-854c-82ac68bb032a",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "24ffd32a-1813-48c1-9b65-0b8a4f90f512",
                  "parentUUID": "1a7f869e-1e65-4158-aa3a-f3f7711705fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebe90f87-3215-4079-a190-1352d6b4399e",
                "ac37e52e-12d2-4785-ac2b-6338c1719b9e",
                "8763557c-9825-44e9-812f-4149d3ec84f0",
                "93f425a0-8ed2-46b1-b021-be673ef82114",
                "b14c110b-02ba-465c-9f9b-68cb052f3dc9",
                "f989dae8-dabc-43e8-801b-360842559c85",
                "7be70ce0-a87b-49f1-854c-82ac68bb032a",
                "24ffd32a-1813-48c1-9b65-0b8a4f90f512"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "bf651a06-753a-4343-8f5a-a1161c495c53",
            "0f981ab1-7921-4fd5-b173-50743b4c3bee",
            "d333dfc7-77ca-45ac-970d-e8965af24433"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "eb2ab7d0-be5a-43bd-ac42-e285ee6a7f34",
          "title": "factors/ooba",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "3db18b23-cac9-47fa-aa9a-833484fa706a",
              "parentUUID": "eb2ab7d0-be5a-43bd-ac42-e285ee6a7f34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f214cdee-e44a-4fab-a6d3-fc00d053c192",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "0786793d-3da3-4f07-a2d2-4436abe047c8",
                  "parentUUID": "f214cdee-e44a-4fab-a6d3-fc00d053c192",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nawait mfkdf.setup.factors\n  .ooba({\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 'foo'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 0\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 100\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: '12345'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: keyPair.publicKey,\n    params: '12345'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b580a264-af7a-4f20-93a3-bde64ad3e0ea",
                  "parentUUID": "f214cdee-e44a-4fab-a6d3-fc00d053c192",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0786793d-3da3-4f07-a2d2-4436abe047c8",
                "b580a264-af7a-4f20-93a3-bde64ad3e0ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "3db18b23-cac9-47fa-aa9a-833484fa706a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 225,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f1c6264a-648d-4664-b8cb-960a63059e40",
          "title": "persistence",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "fafc1892-a4e0-4521-97d6-3986e62b05fc",
              "parentUUID": "f1c6264a-648d-4664-b8cb-960a63059e40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "b16c42d2-195c-497b-990e-5d88430877d4",
              "parentUUID": "f1c6264a-648d-4664-b8cb-960a63059e40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fafc1892-a4e0-4521-97d6-3986e62b05fc",
            "b16c42d2-195c-497b-990e-5d88430877d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1b20d3a2-8b5a-4913-b519-932d907c0141",
          "title": "factors/question",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "96e1466f-d8d4-4753-9894-93f3536a1cb5",
              "parentUUID": "1b20d3a2-8b5a-4913-b519-932d907c0141",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    question: mfkdf.derive.factors.question('Rex')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "3da055dc-a00e-4d09-bdb6-87717cba89e8",
              "parentUUID": "1b20d3a2-8b5a-4913-b519-932d907c0141",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c8b5fa59-1ef9-40be-b0ed-545b75de5dea",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "a653acde-7ee7-4e74-a913-5d1ea7749147",
                  "parentUUID": "c8b5fa59-1ef9-40be-b0ed-545b75de5dea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .question(12345)\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { question: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8caa405c-d6e2-491f-8058-6f5db2ee0032",
                  "parentUUID": "c8b5fa59-1ef9-40be-b0ed-545b75de5dea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a653acde-7ee7-4e74-a913-5d1ea7749147",
                "8caa405c-d6e2-491f-8058-6f5db2ee0032"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "96e1466f-d8d4-4753-9894-93f3536a1cb5",
            "3da055dc-a00e-4d09-bdb6-87717cba89e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b29a8891-10df-441f-b0a1-47a3eee7c71d",
          "title": "factors/stack",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: 12345 }\n  )\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "d69ad9ec-15ee-4c1b-a8ba-05b4d6ecde6e",
              "parentUUID": "b29a8891-10df-441f-b0a1-47a3eee7c71d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: '' }\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "fd19d0e6-44ad-4526-973a-02cd351e731a",
              "parentUUID": "b29a8891-10df-441f-b0a1-47a3eee7c71d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ],\n      { id: 'stack1' }\n    ),\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        })\n      ],\n      { id: 'stack2' }\n    )\n  ],\n  { threshold: 1 }\n)\nsetup.policy.factors[0].params.should.not.have.property('hmac')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "f431e66f-d606-432e-aaa8-4282a20839cd",
              "parentUUID": "b29a8891-10df-441f-b0a1-47a3eee7c71d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d69ad9ec-15ee-4c1b-a8ba-05b4d6ecde6e",
            "fd19d0e6-44ad-4526-973a-02cd351e731a",
            "f431e66f-d606-432e-aaa8-4282a20839cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3e422380-005c-4380-b327-6f0d3ff9d0e1",
          "title": "factors/totp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/totp size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "f5bc22d0-1578-4063-a9f9-68d0b5e0b7c0",
              "parentUUID": "3e422380-005c-4380-b327-6f0d3ff9d0e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "e199f55f-8b6c-4834-b1a7-3d79758d790e",
              "parentUUID": "3e422380-005c-4380-b327-6f0d3ff9d0e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 435,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "16df6efa-4a86-44c7-9bec-6301f1a6febf",
              "parentUUID": "3e422380-005c-4380-b327-6f0d3ff9d0e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.totp()])",
              "err": {},
              "uuid": "85d117ff-4f21-4fe7-86b4-d01de9dc014a",
              "parentUUID": "3e422380-005c-4380-b327-6f0d3ff9d0e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "aee06760-be35-4fab-8971-134df6c976b6",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "7fc01d27-9f4e-4254-8a96-0ac2920f5f8e",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597\n  })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    totp: mfkdf.derive.factors.totp(953265, { time: 1750430943604 })\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0474da32-6ecc-466f-9135-f88f917f3641",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "66082aaa-478e-4446-bf6c-01b549d0fe47",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "8ec591a1-ae54-4611-a3fb-443aad4727da",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "05b773df-8aa4-4b47-9c3a-c2777efbb1dd",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "16193a90-44fe-4335-9f5c-af34da678d78",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "84f2ffbe-cf86-4683-aad2-52929fb943f6",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "bffe42a0-11e6-4624-ac82-d0014b9750ed",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e0310e25-92d5-4a31-84cb-d8fa7f4701ea",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "103edf7b-0756-4a32-adbb-92ea48b74ed6",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "154d6656-8bce-4a12-b0ea-5a0858bf0d63",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bc1d7e73-c355-4844-907a-5d3790d9c994",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3a72d17a-5760-424e-aab2-cd206d11c3a9",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f670b7fe-a0c9-4e4b-b296-8199bdd89b7f",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "89aae72c-75fe-46ab-b72b-2862d146f9a9",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d61b93b1-e630-42e9-9ecd-f0ac1d616c0c",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7896a5a2-76c0-489c-8678-665f1c428b5a",
                  "parentUUID": "aee06760-be35-4fab-8971-134df6c976b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fc01d27-9f4e-4254-8a96-0ac2920f5f8e",
                "0474da32-6ecc-466f-9135-f88f917f3641",
                "66082aaa-478e-4446-bf6c-01b549d0fe47",
                "8ec591a1-ae54-4611-a3fb-443aad4727da",
                "05b773df-8aa4-4b47-9c3a-c2777efbb1dd",
                "16193a90-44fe-4335-9f5c-af34da678d78",
                "84f2ffbe-cf86-4683-aad2-52929fb943f6",
                "bffe42a0-11e6-4624-ac82-d0014b9750ed",
                "e0310e25-92d5-4a31-84cb-d8fa7f4701ea",
                "103edf7b-0756-4a32-adbb-92ea48b74ed6",
                "154d6656-8bce-4a12-b0ea-5a0858bf0d63",
                "bc1d7e73-c355-4844-907a-5d3790d9c994",
                "3a72d17a-5760-424e-aab2-cd206d11c3a9",
                "f670b7fe-a0c9-4e4b-b296-8199bdd89b7f",
                "89aae72c-75fe-46ab-b72b-2862d146f9a9",
                "d61b93b1-e630-42e9-9ecd-f0ac1d616c0c",
                "7896a5a2-76c0-489c-8678-665f1c428b5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "f5bc22d0-1578-4063-a9f9-68d0b5e0b7c0",
            "e199f55f-8b6c-4834-b1a7-3d79758d790e",
            "16df6efa-4a86-44c7-9bec-6301f1a6febf",
            "85d117ff-4f21-4fe7-86b4-d01de9dc014a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f6bf3de6-cbf5-4564-9abb-392755c94afd",
          "title": "factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "34dd9c62-6197-4446-8e65-84d9b61594f3",
              "parentUUID": "f6bf3de6-cbf5-4564-9abb-392755c94afd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c'\n    )\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d'\n    )\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    )\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "cbd8a4a3-1026-4e0f-baef-d43bf44d0ab1",
              "parentUUID": "f6bf3de6-cbf5-4564-9abb-392755c94afd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34dd9c62-6197-4446-8e65-84d9b61594f3",
            "cbd8a4a3-1026-4e0f-baef-d43bf44d0ab1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 242,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "de565435-7d05-4898-aa81-3c1a69ff4463",
          "title": "entropy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "e4d9bb05-97d8-4598-b535-8d40443985ba",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "037af2b8-bde9-443c-ba3d-de08f4ce6a7f",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "ea8a66c3-4523-4fe4-88b4-7ce78082190c",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "ab727466-f82b-4b0b-a72f-a621ba223182",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "15f2791a-b5be-4ddf-a528-d707c989ee65",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "999f1ffb-8146-4b3a-b6b3-193cb8d577f1",
              "parentUUID": "de565435-7d05-4898-aa81-3c1a69ff4463",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4d9bb05-97d8-4598-b535-8d40443985ba",
            "037af2b8-bde9-443c-ba3d-de08f4ce6a7f",
            "ea8a66c3-4523-4fe4-88b4-7ce78082190c",
            "ab727466-f82b-4b0b-a72f-a621ba223182",
            "15f2791a-b5be-4ddf-a528-d707c989ee65",
            "999f1ffb-8146-4b3a-b6b3-193cb8d577f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 792,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "beb4f5ae-0f45-4d60-8678-e687704c360d",
          "title": "integrity",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\integrity.js",
          "file": "\\test\\features\\integrity.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "disabled",
              "fullTitle": "integrity disabled",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  false\n)",
              "err": {},
              "uuid": "3cce7904-5d01-4b9f-81fb-6a306f54c9d9",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "integrity safety",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "f0c9a2d5-f5da-47b5-bcb9-5332bda422b2",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "liveness",
              "fullTitle": "integrity liveness",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)",
              "err": {},
              "uuid": "31970273-bdda-4d10-8ade-6672c39e8b2f",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "$id",
              "fullTitle": "integrity $id",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.$id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "6af157d3-8e0c-4a1e-b07c-11bff147285f",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "threshold",
              "fullTitle": "integrity threshold",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.threshold += 1\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "1506e3df-3b64-4b7b-9a16-1e24c87519d1",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "salt",
              "fullTitle": "integrity salt",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.salt = 'Ny9+L9LQHOKh1x3Acqy7pMb9JaEIfNfxU/TsDON+Ht4='\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "1f79cf06-957f-4557-9be1-ca8636e691a4",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "factor/id",
              "fullTitle": "integrity factor/id",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8009c1f3-2ec6-4ac8-bfda-097e87250e56",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "derive",
              "fullTitle": "integrity derive",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nderive.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    derive.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "e96d1180-9844-4eb7-94b6-10af855984c2",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitution",
              "fullTitle": "integrity reconstitution",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: true }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('differentPassword3')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "21b7fd54-69e8-49b1-9158-2fc57f34452b",
              "parentUUID": "beb4f5ae-0f45-4d60-8678-e687704c360d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3cce7904-5d01-4b9f-81fb-6a306f54c9d9",
            "f0c9a2d5-f5da-47b5-bcb9-5332bda422b2",
            "31970273-bdda-4d10-8ade-6672c39e8b2f",
            "6af157d3-8e0c-4a1e-b07c-11bff147285f",
            "1506e3df-3b64-4b7b-9a16-1e24c87519d1",
            "1f79cf06-957f-4557-9be1-ca8636e691a4",
            "8009c1f3-2ec6-4ac8-bfda-097e87250e56",
            "e96d1180-9844-4eb7-94b6-10af855984c2",
            "21b7fd54-69e8-49b1-9158-2fc57f34452b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e7f5c636-97db-4ae6-800c-36f15afeef08",
          "title": "policy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "957593ac-d917-48d2-8ffb-967deab931c1",
              "title": "validate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "46af72f3-4403-4efd-9f76-8b7d8d481dbf",
                  "parentUUID": "957593ac-d917-48d2-8ffb-967deab931c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.policy\n  .setup(\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password2'\n        })\n      )\n    )\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0966e6e0-55e3-4c95-9653-aa7f1cefe6df",
                  "parentUUID": "957593ac-d917-48d2-8ffb-967deab931c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46af72f3-4403-4efd-9f76-8b7d8d481dbf",
                "0966e6e0-55e3-4c95-9653-aa7f1cefe6df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1946e42c-ef44-469f-a872-bda1129221f2",
              "title": "evaluate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .true",
                  "err": {},
                  "uuid": "63d1ed30-8108-4e6a-baf5-7bd3f25ae87d",
                  "parentUUID": "1946e42c-ef44-469f-a872-bda1129221f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .false",
                  "err": {},
                  "uuid": "365d022e-136f-4566-8657-0818b5878954",
                  "parentUUID": "1946e42c-ef44-469f-a872-bda1129221f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63d1ed30-8108-4e6a-baf5-7bd3f25ae87d",
                "365d022e-136f-4566-8657-0818b5878954"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
              "title": "derive",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "38598d07-7464-4201-b335-e517e7163aff",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b1f9ac2e-b10c-4040-9c75-4df93c5f9366",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "61cb242c-f90a-4784-bc9e-6fe8618f94c3",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 156,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac6437db-af02-47e2-8723-56701ac9a907",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a8d74a70-81c5-4d11-a94a-f98d83ca6a58",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e74345bf-13e1-4d06-b65c-c4e228497c06",
                  "parentUUID": "ae79901b-35da-46d3-99d1-ac2fd7f0bf53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38598d07-7464-4201-b335-e517e7163aff",
                "b1f9ac2e-b10c-4040-9c75-4df93c5f9366",
                "61cb242c-f90a-4784-bc9e-6fe8618f94c3",
                "ac6437db-af02-47e2-8723-56701ac9a907",
                "a8d74a70-81c5-4d11-a94a-f98d83ca6a58",
                "e74345bf-13e1-4d06-b65c-c4e228497c06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 460,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "cb0fd0c8-95b2-41bf-be4f-7fb1d264280c",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n])\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4'),\n    password6: mfkdf.derive.factors.password('password6')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "270bdd4a-45d0-4292-a367-7292e237a354",
                  "parentUUID": "cb0fd0c8-95b2-41bf-be4f-7fb1d264280c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2a53bf85-ff69-4c8b-af34-87973330a4ae",
                  "parentUUID": "cb0fd0c8-95b2-41bf-be4f-7fb1d264280c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "270bdd4a-45d0-4292-a367-7292e237a354",
                "2a53bf85-ff69-4c8b-af34-87973330a4ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "37c8f795-923c-4456-8b12-cc10c96f740b",
          "title": "reconstitution",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 3, integrity: false }\n)\nconst key = setup.key.toString('hex')\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "90972d11-8d33-4f4c-889f-2bd5e44289dc",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)\nawait derive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "c2f986db-ba06-4b1f-bf13-bb43254893cc",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "673fc71e-7f40-495f-b257-1ab6b3818f78",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "4f5ec356-7415-4655-97bd-504b79fc2456",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "4efd04a6-5520-404e-955a-717472658ee7",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "02710605-1406-4746-be67-3085fffc3f95",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "06266866-86f0-4211-be2f-461d5ca49332",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(\n  ['password1'],\n  [\n    await mfkdf.setup.factors.password('otherPassword2', {\n      id: 'password2'\n    })\n  ],\n  2\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "ffd0b868-f5e7-4c95-a8e2-88d03230a96e",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "88f781ac-6a86-450d-bd6e-bb9341df3e0f",
              "parentUUID": "37c8f795-923c-4456-8b12-cc10c96f740b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "039b07be-04e8-4440-9870-9575d50dd015",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [12345],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "941aee92-0391-4d12-bc09-a2534075ff90",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    ['password4'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fe4b92fd-c467-4403-9eda-52fd274df9bc",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait setup\n  .reconstitute(\n    ['password3'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      }),\n      await mfkdf.setup.factors.password('diffPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "69103359-df4c-4c7d-a643-686967ae734a",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    'hello',\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c8c342b4-3e37-4808-bd08-7cf70bdfd917",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], '12345', 2)\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "be77427d-88ea-4559-bc88-1b994f1ba517",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], [], '12345')\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2e1d65e5-f2de-4808-bb73-0e74da0c005a",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a0f5bb2d-4644-4663-986f-b85d5179c992",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 12345,\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "76a5ceca-ccec-4286-bdbf-12d654e8c748",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: '',\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8a203c92-689a-4679-a111-265e5f6c96aa",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 12345,\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "06d9bf87-d6ed-4a60-84d1-00396aeba242",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: '',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c90f9479-0213-48ce-ae8e-80fef4f4feaf",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: 12345,\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3e225c39-8a6d-476d-a31c-bc1dc80c78b1",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from(''),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8658cf7a-a053-44e6-afc0-9403d7e1d76b",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: 12345,\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7db352f8-efd2-4697-b7ce-e11276a46d7b",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: async () => {\n          return {}\n        },\n        output: 12345\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9877ab1f-53f0-4ef9-888e-be19ebd58654",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "07ba8ba8-a915-4cdf-8ae7-2a61dfde8801",
                  "parentUUID": "039b07be-04e8-4440-9870-9575d50dd015",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "941aee92-0391-4d12-bc09-a2534075ff90",
                "fe4b92fd-c467-4403-9eda-52fd274df9bc",
                "69103359-df4c-4c7d-a643-686967ae734a",
                "c8c342b4-3e37-4808-bd08-7cf70bdfd917",
                "be77427d-88ea-4559-bc88-1b994f1ba517",
                "2e1d65e5-f2de-4808-bb73-0e74da0c005a",
                "a0f5bb2d-4644-4663-986f-b85d5179c992",
                "76a5ceca-ccec-4286-bdbf-12d654e8c748",
                "8a203c92-689a-4679-a111-265e5f6c96aa",
                "06d9bf87-d6ed-4a60-84d1-00396aeba242",
                "c90f9479-0213-48ce-ae8e-80fef4f4feaf",
                "3e225c39-8a6d-476d-a31c-bc1dc80c78b1",
                "8658cf7a-a053-44e6-afc0-9403d7e1d76b",
                "7db352f8-efd2-4697-b7ce-e11276a46d7b",
                "9877ab1f-53f0-4ef9-888e-be19ebd58654",
                "07ba8ba8-a915-4cdf-8ae7-2a61dfde8801"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 333,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "90972d11-8d33-4f4c-889f-2bd5e44289dc",
            "c2f986db-ba06-4b1f-bf13-bb43254893cc",
            "673fc71e-7f40-495f-b257-1ab6b3818f78",
            "4f5ec356-7415-4655-97bd-504b79fc2456",
            "4efd04a6-5520-404e-955a-717472658ee7",
            "02710605-1406-4746-be67-3085fffc3f95",
            "06266866-86f0-4211-be2f-461d5ca49332",
            "ffd0b868-f5e7-4c95-a8e2-88d03230a96e",
            "88f781ac-6a86-450d-bd6e-bb9341df3e0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 533,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dfffcd5c-1d9c-4c45-9bd5-cba1a499880a",
          "title": "stage",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\stage.js",
          "file": "\\test\\features\\stage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "basic",
              "fullTitle": "stage basic",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password')\n)\nconst setup = await mfkdf.setup.key([passwordSetup])\nconst passwordDerive = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: passwordDerive\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "f0ad80d0-1750-4163-bfa4-aa0185fa0e99",
              "parentUUID": "dfffcd5c-1d9c-4c45-9bd5-cba1a499880a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "full",
              "fullTitle": "stage full",
              "timedOut": false,
              "duration": 514,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst init = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password'),\n  init.key\n)\nconst hmacsha1Setup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hmacsha1(),\n  init.key\n)\nconst hotpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hotp({ secret: Buffer.from('abcdefghijklmnopqrst') }),\n  init.key\n)\nconst oobaSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.ooba({ key: keyPair.publicKey, params: {} }),\n  init.key\n)\nconst questionSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.question('fido'),\n  init.key\n)\nconst totpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  }),\n  init.key\n)\nconst uuidSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  }),\n  init.key\n)\nconst setup = await mfkdf.setup.key([\n  passwordSetup,\n  hmacsha1Setup,\n  hotpSetup,\n  oobaSetup,\n  questionSetup,\n  totpSetup,\n  uuidSetup\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[1].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst next = setup.policy.factors[3].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst json = JSON.parse(Buffer.from(decrypted).toString())\nconst code = json.code\nconst password = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params,\n  setup.key\n)\nconst hmacsha1 = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hmacsha1(response),\n  setup.policy.factors[1].params,\n  setup.key\n)\nconst hotp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hotp(241063),\n  setup.policy.factors[2].params,\n  setup.key\n)\nconst ooba = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.ooba(code),\n  setup.policy.factors[3].params,\n  setup.key\n)\nconst question = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.question('fido'),\n  setup.policy.factors[4].params,\n  setup.key\n)\nconst totp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.totp(953265, { time: 1 }),\n  setup.policy.factors[5].params,\n  setup.key\n)\nconst uuid = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  setup.policy.factors[6].params,\n  setup.key\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password,\n  hmacsha1,\n  hotp,\n  ooba,\n  question,\n  totp,\n  uuid\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "ad46acc5-ff21-4845-aeef-87c2cb675b0c",
              "parentUUID": "dfffcd5c-1d9c-4c45-9bd5-cba1a499880a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0ad80d0-1750-4163-bfa4-aa0185fa0e99",
            "ad46acc5-ff21-4845-aeef-87c2cb675b0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "03eaecbd-6011-4c6d-b54a-2711b6668157",
          "title": "mfkdf2/changes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
          "file": "\\test\\mfkdf2\\changes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49accb23-a1ae-4290-9d40-57bbc239d6b1",
              "title": "key-size-256",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes key-size-256 default",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "03a3ff80-b51d-4300-86eb-60c264dfb67e",
                  "parentUUID": "49accb23-a1ae-4290-9d40-57bbc239d6b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override",
                  "fullTitle": "mfkdf2/changes key-size-256 override",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "1d782184-b141-4715-bb25-9131fba14f48",
                  "parentUUID": "49accb23-a1ae-4290-9d40-57bbc239d6b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03a3ff80-b51d-4300-86eb-60c264dfb67e",
                "1d782184-b141-4715-bb25-9131fba14f48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ba1162f8-21c1-4e4c-a64e-e20749ad232f",
              "title": "kdf-argon2id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes kdf-argon2id default",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "37d70795-9388-4720-95f3-416ebb91d16f",
                  "parentUUID": "ba1162f8-21c1-4e4c-a64e-e20749ad232f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/time",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/time",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.time = 4\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "25389133-bf8c-4c6b-91b8-1f77fd312b4e",
                  "parentUUID": "ba1162f8-21c1-4e4c-a64e-e20749ad232f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/memory",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/memory",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 1024 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.memory = 2048\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "4420fee9-a36c-47a0-af85-a71c13bc077c",
                  "parentUUID": "ba1162f8-21c1-4e4c-a64e-e20749ad232f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/matching",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/matching",
                  "timedOut": false,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 65536, time: 3 }\n)\nsetup.policy.memory.should.equal(65536)\nsetup.policy.time.should.equal(3)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "ad4508b2-1434-4746-a7ae-c7b012cbb11f",
                  "parentUUID": "ba1162f8-21c1-4e4c-a64e-e20749ad232f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37d70795-9388-4720-95f3-416ebb91d16f",
                "25389133-bf8c-4c6b-91b8-1f77fd312b4e",
                "4420fee9-a36c-47a0-af85-a71c13bc077c",
                "ad4508b2-1434-4746-a7ae-c7b012cbb11f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 689,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "97e9f4be-b254-4b98-9546-7fa6e4928111",
              "title": "encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "aes-256-ecb",
                  "fullTitle": "mfkdf2/changes encryption aes-256-ecb",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stretched = await crypto.randomBytes(32)\nconst share = await crypto.randomBytes(32)\nconst cipher = crypto.createCipheriv('AES-256-ECB', stretched, null)\ncipher.setAutoPadding(false)\nconst pad = Buffer.concat([cipher.update(share), cipher.final()])\nconst decipher = crypto.createDecipheriv('AES-256-ECB', stretched, null)\ndecipher.setAutoPadding(false)\nconst share2 = Buffer.concat([decipher.update(pad), decipher.final()])\nshare2.toString('hex').should.equal(share.toString('hex'))",
                  "err": {},
                  "uuid": "f136b032-ff02-428a-b3d6-8aa1fa4553e6",
                  "parentUUID": "97e9f4be-b254-4b98-9546-7fa6e4928111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f136b032-ff02-428a-b3d6-8aa1fa4553e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b3d2ec19-fd77-486f-992d-fc96bf5fd5b1",
          "title": "mfkdf2/hints",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\hints.js",
          "file": "\\test\\mfkdf2\\hints.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getHint",
              "fullTitle": "mfkdf2/hints getHint",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst hint = setup.getHint('password1', 7)\nhint.should.be.a('string')\nhint.length.should.equal(7)\nconst hinta = setup.getHint('password1', 24)\nhinta.should.be.a('string')\nhinta.length.should.equal(24)\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderived.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst hint2 = derived.getHint('password1', 7)\nhint2.should.equal(hint)\nconst hinta2 = derived.getHint('password1', 24)\nhinta2.should.equal(hinta)\nconst derived2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('wrongpassword')\n  },\n  false\n)\nconst hinta3 = derived2.getHint('password1', 24)\nhinta3.should.not.equal(hinta)",
              "err": {},
              "uuid": "c704dfb2-6668-48e0-9da1-fba9cf335588",
              "parentUUID": "b3d2ec19-fd77-486f-992d-fc96bf5fd5b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addHint",
              "fullTitle": "mfkdf2/hints addHint",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nsetup.addHint('password1')\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(7)\nsetup.addHint('password1', 24)\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(24)\nawait mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "fcae46d5-90d9-4ffe-bd81-894e2c3f0d8c",
              "parentUUID": "b3d2ec19-fd77-486f-992d-fc96bf5fd5b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/hints coverage",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n);\n(() => setup.getHint()).should.throw(TypeError);\n(() => setup.getHint(123)).should.throw(TypeError);\n(() => setup.getHint('unknown')).should.throw(RangeError);\n(() => setup.getHint('password1', 'string')).should.throw(TypeError);\n(() => setup.getHint('password1', 0)).should.throw(TypeError);\n(() => setup.getHint('password1', 300)).should.throw(TypeError)",
              "err": {},
              "uuid": "f2fe9732-5dbd-451b-8ef0-e781a45f74e2",
              "parentUUID": "b3d2ec19-fd77-486f-992d-fc96bf5fd5b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c704dfb2-6668-48e0-9da1-fba9cf335588",
            "fcae46d5-90d9-4ffe-bd81-894e2c3f0d8c",
            "f2fe9732-5dbd-451b-8ef0-e781a45f74e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 142,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c93074ac-19f9-4f1d-9c2b-70cdff046983",
          "title": "mfkdf2/mfdpg2",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
          "file": "\\test\\mfkdf2\\mfdpg.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fac83f9d-3e25-4967-87e0-c06ca88499be",
              "title": "basics",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "portability",
                  "fullTitle": "mfkdf2/mfdpg2 basics portability",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11);\n/[a-zA-Z]{6,10}/.test(password).should.be.true\nconst password2 = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst password3 = derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password3)",
                  "err": {},
                  "uuid": "94738076-2da9-46a3-b22e-0c096f76aed8",
                  "parentUUID": "fac83f9d-3e25-4967-87e0-c06ca88499be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-example",
                  "fullTitle": "mfkdf2/mfdpg2 basics full-example",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst policy = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\npassword1.should.equal(password3)",
                  "err": {},
                  "uuid": "f58613cd-f152-4c51-98b8-5f505256e834",
                  "parentUUID": "fac83f9d-3e25-4967-87e0-c06ca88499be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94738076-2da9-46a3-b22e-0c096f76aed8",
                "f58613cd-f152-4c51-98b8-5f505256e834"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "95ba3da7-9f24-4bb1-a6ee-ef2ce082234f",
              "title": "correctness",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness basic-test",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "a887fea2-2f53-42b7-a27e-19d55229122d",
                  "parentUUID": "95ba3da7-9f24-4bb1-a6ee-ef2ce082234f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness full-test",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "ec3a2bbe-9cf6-40f3-a17a-4f8a4175e7a8",
                  "parentUUID": "95ba3da7-9f24-4bb1-a6ee-ef2ce082234f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a887fea2-2f53-42b7-a27e-19d55229122d",
                "ec3a2bbe-9cf6-40f3-a17a-4f8a4175e7a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1a1630c3-4b7d-4349-a61a-8cdd4af74599",
              "title": "safety",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety basic-test",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst setup2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup1.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password2)",
                  "err": {},
                  "uuid": "77d92c40-2604-4d19-a3bc-20dd689a795f",
                  "parentUUID": "1a1630c3-4b7d-4349-a61a-8cdd4af74599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety full-test",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst password3 = await derive2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password3)",
                  "err": {},
                  "uuid": "af5bd9f9-1930-4a34-8daf-31f6d7bc9a94",
                  "parentUUID": "1a1630c3-4b7d-4349-a61a-8cdd4af74599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77d92c40-2604-4d19-a3bc-20dd689a795f",
                "af5bd9f9-1930-4a34-8daf-31f6d7bc9a94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ef9c23c6-162e-4043-8a4e-617451e65a4b",
              "title": "compatibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility basic-policy",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11)",
                  "err": {},
                  "uuid": "b8fecb75-84cb-4824-bc38-9f9faf74b14a",
                  "parentUUID": "ef9c23c6-162e-4043-8a4e-617451e65a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "custom-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility custom-policy",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst regex = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password = await setup.derivePassword('example.com', 'salt', regex)\nregex.test(password).should.be.true",
                  "err": {},
                  "uuid": "f2cb97df-1241-4717-be86-1332519a306e",
                  "parentUUID": "ef9c23c6-162e-4043-8a4e-617451e65a4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8fecb75-84cb-4824-bc38-9f9faf74b14a",
                "f2cb97df-1241-4717-be86-1332519a306e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aeee96d9-80ed-4d43-beb4-5899aa613c15",
          "title": "mfkdf2/passkeys",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\passkeys.js",
          "file": "\\test\\mfkdf2\\passkeys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "liveness",
              "fullTitle": "mfkdf2/passkeys liveness",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  passkey: mfkdf.derive.factors.passkey(prf)\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "a85af3a4-50a3-4915-97ba-b9355db40f8e",
              "parentUUID": "aeee96d9-80ed-4d43-beb4-5899aa613c15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "mfkdf2/passkeys safety",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst prf2 = await crypto.randomBytes(32)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    passkey: mfkdf.derive.factors.passkey(prf2)\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "68ae0ae1-6158-419b-bb9a-bdd18bafc731",
              "parentUUID": "aeee96d9-80ed-4d43-beb4-5899aa613c15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/passkeys coverage",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .passkey('hello')\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: 123 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .passkey(Buffer.from('hello'))\n  .should.be.rejectedWith(RangeError);\n(() => {\n  mfkdf.derive.factors.passkey('hello')\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.passkey(Buffer.from('hello'))\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a3703c62-9a58-4929-bcbf-ac6666a6823a",
              "parentUUID": "aeee96d9-80ed-4d43-beb4-5899aa613c15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a85af3a4-50a3-4915-97ba-b9355db40f8e",
            "68ae0ae1-6158-419b-bb9a-bdd18bafc731",
            "a3703c62-9a58-4929-bcbf-ac6666a6823a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a7548a37-8bb3-44e3-9d86-e797a3b77ef8",
          "title": "mfkdf2/security",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
          "file": "\\test\\mfkdf2\\security.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "totp",
              "fullTitle": "mfkdf2/security totp",
              "timedOut": false,
              "duration": 382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
              "err": {},
              "uuid": "50fc07be-7fca-46ec-b839-b1b9424fd011",
              "parentUUID": "a7548a37-8bb3-44e3-9d86-e797a3b77ef8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "08e63583-5c13-4fb2-9c85-75ef327471c3",
              "title": "factor-fungibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security factor-fungibility correct",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "73c325e6-e5dd-4cfa-a92f-427ebdbca81e",
                  "parentUUID": "08e63583-5c13-4fb2-9c85-75ef327471c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "incorrect",
                  "fullTitle": "mfkdf2/security factor-fungibility incorrect",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2'),\n    password2: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "fda2cb6c-055a-46a6-a3c0-e55a391d3604",
                  "parentUUID": "08e63583-5c13-4fb2-9c85-75ef327471c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73c325e6-e5dd-4cfa-a92f-427ebdbca81e",
                "fda2cb6c-055a-46a6-a3c0-e55a391d3604"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1a2068b8-ed5e-4bcf-9eba-740e3553e8de",
              "title": "share-indistinguishability",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "share-size",
                  "fullTitle": "mfkdf2/security share-indistinguishability share-size",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret = crypto.randomBytes(32)\nconst shares1 = mfkdf.secrets.share(secret, 1, 3)\nshares1.should.have.length(3)\nfor (const share of shares1) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares1.slice(0, 1).concat([null, null]), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null, null].concat(shares1.slice(2, 3)), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares2 = mfkdf.secrets.share(secret, 2, 3)\nshares2.should.have.length(3)\nfor (const share of shares2) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares2.slice(0, 2).concat([null]), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null].concat(shares2.slice(1, 3)), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares3 = mfkdf.secrets.share(secret, 3, 3)\nshares3.should.have.length(3)\nfor (const share of shares3) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares3.slice(0, 3), 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
                  "err": {},
                  "uuid": "2691347e-f92f-4ee8-b7d0-24cc32585ca3",
                  "parentUUID": "1a2068b8-ed5e-4bcf-9eba-740e3553e8de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2691347e-f92f-4ee8-b7d0-24cc32585ca3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fae9fd53-b55a-4929-966d-83dd62f9c180",
              "title": "share-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security share-encryption correct",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst materialp1 = await mfkdf.derive.factors.password('password1')(\n  setup.policy.factors[0].params\n)\nconst padp1 = Buffer.from(setup.policy.factors[0].pad, 'base64')\nconst stretchedp1 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp1.data,\n    setup.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep1 = xor(padp1, stretchedp1)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword1', { id: 'password1' })\n)\nconst derive2f = await mfkdf.policy.derive(\n  derive.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive2f.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(derive.policy, {\n  password1: mfkdf.derive.factors.password('newPassword1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst materialp3 = await mfkdf.derive.factors.password('newPassword1')(\n  derive.policy.factors[0].params\n)\nconst padp3 = Buffer.from(derive.policy.factors[0].pad, 'base64')\nconst stretchedp3 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp3.data,\n    derive.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep3 = xor(padp3, stretchedp3)\nawait derive2.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password1' })\n)\nconst derive3 = await mfkdf.policy.derive(derive2.policy, {\n  password1: mfkdf.derive.factors.password('newPassword2'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nsharep1.should.not.equal(sharep3)",
                  "err": {},
                  "uuid": "0c27460e-a589-49de-a977-e7f9686045d6",
                  "parentUUID": "fae9fd53-b55a-4929-966d-83dd62f9c180",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c27460e-a589-49de-a977-e7f9686045d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9625dc3a-608e-4283-9bf6-3400a65f4db6",
              "title": "factor-secret-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "hotp",
                  "fullTitle": "mfkdf2/security factor-secret-encryption hotp",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
                  "err": {},
                  "uuid": "a020e9a0-e9be-4257-87c2-4164f4b7e638",
                  "parentUUID": "9625dc3a-608e-4283-9bf6-3400a65f4db6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a020e9a0-e9be-4257-87c2-4164f4b7e638"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "af09a08f-6328-4a0a-898d-54655032dba7",
              "title": "timing-oracle",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                  "title": "totp/dynamic",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic no-oracle",
                      "timedOut": false,
                      "duration": 432,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "4c2e37cc-74c4-43ae-ae08-2181df5913e6",
                      "parentUUID": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 502,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "459173b8-ff64-44c3-adfb-e2e837412e0e",
                      "parentUUID": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 544,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "e33b4860-bba8-48ee-ac26-0db1c12ded9a",
                      "parentUUID": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 508,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "5811fbff-bd5a-4c6f-b3fb-aa32da352c57",
                      "parentUUID": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 541,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "14420350-2f1b-4dc4-9b04-562e12d00995",
                      "parentUUID": "fa9218ba-96c6-45ed-b301-7a3209f82f02",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4c2e37cc-74c4-43ae-ae08-2181df5913e6",
                    "459173b8-ff64-44c3-adfb-e2e837412e0e",
                    "e33b4860-bba8-48ee-ac26-0db1c12ded9a",
                    "5811fbff-bd5a-4c6f-b3fb-aa32da352c57",
                    "14420350-2f1b-4dc4-9b04-562e12d00995"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2527,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b491affd-b282-429e-bf99-0375af458c00",
                  "title": "totp/static",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static no-oracle",
                      "timedOut": false,
                      "duration": 439,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "6873f75a-260c-45e2-95c3-5e6df1c04c36",
                      "parentUUID": "b491affd-b282-429e-bf99-0375af458c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 454,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "cae872cf-9e1d-4d0f-a07a-435d621cd842",
                      "parentUUID": "b491affd-b282-429e-bf99-0375af458c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 538,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "b388139c-1f94-45a7-a26c-8bcbaa4a0256",
                      "parentUUID": "b491affd-b282-429e-bf99-0375af458c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 466,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "f611baa0-b31e-4c07-b479-ede12231d3a1",
                      "parentUUID": "b491affd-b282-429e-bf99-0375af458c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 531,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "8c76ac9c-af29-46d0-8472-3f2707595baf",
                      "parentUUID": "b491affd-b282-429e-bf99-0375af458c00",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6873f75a-260c-45e2-95c3-5e6df1c04c36",
                    "cae872cf-9e1d-4d0f-a07a-435d621cd842",
                    "b388139c-1f94-45a7-a26c-8bcbaa4a0256",
                    "f611baa0-b31e-4c07-b479-ede12231d3a1",
                    "8c76ac9c-af29-46d0-8472-3f2707595baf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2428,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bd928fe8-cc14-4340-a1ab-b4731f0d5cff",
              "title": "policy-integrity",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security policy-integrity correct",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b606b710-dfb0-40a4-8eea-3143f4c63048",
                  "parentUUID": "bd928fe8-cc14-4340-a1ab-b4731f0d5cff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/$id",
                  "fullTitle": "mfkdf2/security policy-integrity invalid/$id",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nsetup.policy.$id = 'invalid-id'\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    {},\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f1752bd8-8faf-4080-9eed-d03732dd0bba",
                  "parentUUID": "bd928fe8-cc14-4340-a1ab-b4731f0d5cff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b606b710-dfb0-40a4-8eea-3143f4c63048",
                "f1752bd8-8faf-4080-9eed-d03732dd0bba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "50fc07be-7fca-46ec-b839-b1b9424fd011"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 382,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c3475d8-a1c5-47cb-8360-1a66cd862a45",
          "title": "mfkdf2/strengthening",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
          "file": "\\test\\mfkdf2\\strengthening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "strengthening-throws",
              "fullTitle": "mfkdf2/strengthening strengthening-throws",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nawait derive\n  .strenthen(-1, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(1.5, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(0, -1)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )\nawait derive\n  .strenthen(0, 1.5)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )",
              "err": {},
              "uuid": "85b41efe-8c3d-4eac-bdac-6466d4915dc3",
              "parentUUID": "2c3475d8-a1c5-47cb-8360-1a66cd862a45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-works-multiple-times",
              "fullTitle": "mfkdf2/strengthening strengthening-works-multiple-times",
              "timedOut": false,
              "duration": 369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive.policy.time = 0\nderive.policy.memory = 0\nawait mfkdf.derive\n  .key(derive.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)\nawait derive2.strenthen(3, 16384)\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive3.policy.time.should.equal(3)\nderive3.policy.memory.should.equal(16384)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.policy.time = 0\nderive2.policy.memory = 0\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)",
              "err": {},
              "uuid": "ec5248e3-1186-48c2-8902-5644b2a47cb3",
              "parentUUID": "2c3475d8-a1c5-47cb-8360-1a66cd862a45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-other-factors",
              "fullTitle": "mfkdf2/strengthening strengthening-with-other-factors",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive2.strenthen()\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(0)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.policy.time.should.equal(0)\nderive3.policy.memory.should.equal(0)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "24b7f873-5149-445d-a741-399876415770",
              "parentUUID": "2c3475d8-a1c5-47cb-8360-1a66cd862a45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-reconstitution",
              "fullTitle": "mfkdf2/strengthening strengthening-with-reconstitution",
              "timedOut": false,
              "duration": 148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nawait derive.setThreshold(1)\nawait derive.removeFactor('password2')\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "bfc6ec00-2dfc-4227-922c-3826e16bc6e2",
              "parentUUID": "2c3475d8-a1c5-47cb-8360-1a66cd862a45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "099c53b3-690e-4258-8183-425e437179bd",
              "title": "setup",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening setup time",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 5 }\n)\nsetup.policy.time.should.equal(5)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(5)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e4a31921-769f-4c6a-8859-8e426a2cfdca",
                  "parentUUID": "099c53b3-690e-4258-8183-425e437179bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening setup memory",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 32768 }\n)\nsetup.policy.memory.should.equal(32768)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(32768)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f56e0599-c9ba-47a9-ac94-7180cd1e145b",
                  "parentUUID": "099c53b3-690e-4258-8183-425e437179bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening setup time-and-memory",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3, memory: 16384 }\n)\nsetup.policy.time.should.equal(3)\nsetup.policy.memory.should.equal(16384)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e720a5d6-b390-4029-88be-1c54422da359",
                  "parentUUID": "099c53b3-690e-4258-8183-425e437179bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws",
                  "fullTitle": "mfkdf2/strengthening setup throws",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'time must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'time must be an integer')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'memory must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'memory must be an integer')",
                  "err": {},
                  "uuid": "57d5e4f6-9d72-4561-9f30-caefb80a1579",
                  "parentUUID": "099c53b3-690e-4258-8183-425e437179bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4a31921-769f-4c6a-8859-8e426a2cfdca",
                "f56e0599-c9ba-47a9-ac94-7180cd1e145b",
                "e720a5d6-b390-4029-88be-1c54422da359",
                "57d5e4f6-9d72-4561-9f30-caefb80a1579"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 417,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "684821f0-2202-436f-9d43-a19cb387a076",
              "title": "strengthening",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening strengthening time",
                  "timedOut": false,
                  "duration": 166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(5, 0)\nderive.policy.time.should.equal(5)\nderive.policy.memory.should.equal(0)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(5)\nderive2.policy.memory.should.equal(0)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "73e17dbf-ea2d-4876-adef-2a18a4fc27f7",
                  "parentUUID": "684821f0-2202-436f-9d43-a19cb387a076",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening strengthening memory",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(0, 32768)\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(32768)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(32768)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "c3385bcf-dd8f-4f70-8d03-c1056c972d53",
                  "parentUUID": "684821f0-2202-436f-9d43-a19cb387a076",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening strengthening time-and-memory",
                  "timedOut": false,
                  "duration": 227,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(3, 16384)\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e4d27711-e991-4c16-8fc6-aeefc9ba3cc2",
                  "parentUUID": "684821f0-2202-436f-9d43-a19cb387a076",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73e17dbf-ea2d-4876-adef-2a18a4fc27f7",
                "c3385bcf-dd8f-4f70-8d03-c1056c972d53",
                "e4d27711-e991-4c16-8fc6-aeefc9ba3cc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 563,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "85b41efe-8c3d-4eac-bdac-6466d4915dc3",
            "ec5248e3-1186-48c2-8902-5644b2a47cb3",
            "24b7f873-5149-445d-a741-399876415770",
            "bfc6ec00-2dfc-4227-922c-3826e16bc6e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 759,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "863c2e65-6b06-4115-92f0-cd09b4c33e3d",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "f558415a-aee2-4b64-939e-f3981799b25c",
              "parentUUID": "863c2e65-6b06-4115-92f0-cd09b4c33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "7b074107-c5fb-4735-80b2-ea383a21c563",
              "parentUUID": "863c2e65-6b06-4115-92f0-cd09b4c33e3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "7e0d1526-1379-4b39-acba-d063d9068db4",
              "parentUUID": "863c2e65-6b06-4115-92f0-cd09b4c33e3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f558415a-aee2-4b64-939e-f3981799b25c",
            "7b074107-c5fb-4735-80b2-ea383a21c563",
            "7e0d1526-1379-4b39-acba-d063d9068db4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "7589363c-cc12-46e7-a9bd-31a709c0d0ed",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  1,\n  5\n)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "b8a7e8e3-f0c3-4ad5-afe1-8d3de2ea5de0",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  2,\n  3\n)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c60b3877-c34e-458a-8be9-f6695a9a8a2c",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "385670b1-75fc-48b9-a0a6-af163f65dc4f",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nshares.should.be.an('array').of.length(255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 250; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 255)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[251] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f92215d3-d68a-499b-ad0b-c55c3927f7cd",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)",
              "err": {},
              "uuid": "135f40a1-e866-4dda-9f5c-a986d246d920",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a8af01e2-a370-4807-a01c-21b55b466d06",
              "parentUUID": "eec97d16-36f3-40f6-ba5b-ff24c0a48e2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7589363c-cc12-46e7-a9bd-31a709c0d0ed",
            "b8a7e8e3-f0c3-4ad5-afe1-8d3de2ea5de0",
            "c60b3877-c34e-458a-8be9-f6695a9a8a2c",
            "385670b1-75fc-48b9-a0a6-af163f65dc4f",
            "f92215d3-d68a-499b-ad0b-c55c3927f7cd",
            "135f40a1-e866-4dda-9f5c-a986d246d920",
            "a8af01e2-a370-4807-a01c-21b55b466d06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3b033f40-0949-4ee8-a846-6140f0e5001f",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\new.js",
          "file": "\\test\\secrets\\new.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "share-size",
              "fullTitle": "secrets share-size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let secret = crypto.randomBytes(32)\nlet shares = mfkdf.secrets.share(secret, 1, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[0].should.equal(secret)\nshares[1].length.should.equal(32)\nshares[1].should.equal(secret)\nshares[2].length.should.equal(32)\nshares[2].should.equal(secret)\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[2] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 2, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 3, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
              "err": {},
              "uuid": "d40efb88-be89-4412-96d6-5a9ab63916fd",
              "parentUUID": "3b033f40-0949-4ee8-a846-6140f0e5001f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d40efb88-be89-4412-96d6-5a9ab63916fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
          "title": "secrets/recover",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "1a3e5112-fc50-4745-98e9-3e292d0563ca",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "9c9a7fb9-c9e9-4bcf-9af4-2170e39d8ff6",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "3914bbb1-89de-4879-bebd-065b8991a2fc",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "dc3a27ee-b547-4f32-a9a3-6f198f53a14f",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "cd59ed85-0367-4125-91eb-18affd824256",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f10841a7-d58c-445d-a8a5-d08e8275cee9",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "db83b7a2-edc1-423e-b4c0-923afca7ab47",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f05c4982-3bec-4cff-a7aa-379a85b51557",
              "parentUUID": "ca1156bf-02d6-4b8b-9e45-70b56cc58256",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a3e5112-fc50-4745-98e9-3e292d0563ca",
            "9c9a7fb9-c9e9-4bcf-9af4-2170e39d8ff6",
            "3914bbb1-89de-4879-bebd-065b8991a2fc",
            "dc3a27ee-b547-4f32-a9a3-6f198f53a14f",
            "cd59ed85-0367-4125-91eb-18affd824256",
            "f10841a7-d58c-445d-a8a5-d08e8275cee9",
            "db83b7a2-edc1-423e-b4c0-923afca7ab47",
            "f05c4982-3bec-4cff-a7aa-379a85b51557"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c7a576fc-a36c-46b0-b783-30ed9c18779f",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "39fa0f8c-7b84-433d-b16d-10170c1756d1",
              "parentUUID": "c7a576fc-a36c-46b0-b783-30ed9c18779f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "5201403a-e8b2-4100-99bc-5a954a0b4698",
              "parentUUID": "c7a576fc-a36c-46b0-b783-30ed9c18779f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "af9463d9-e3a3-42d8-8c4a-11c9f461f87e",
              "parentUUID": "c7a576fc-a36c-46b0-b783-30ed9c18779f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39fa0f8c-7b84-433d-b16d-10170c1756d1",
            "5201403a-e8b2-4100-99bc-5a954a0b4698",
            "af9463d9-e3a3-42d8-8c4a-11c9f461f87e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3152958b-3fdd-4957-8dc0-47fef766aa16",
          "title": "setup/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .password('password', { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "dfd2065f-80ff-4d80-be32-1d0348501161",
              "parentUUID": "3152958b-3fdd-4957-8dc0-47fef766aa16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .password('password', { id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "02f4b0cf-1625-4b68-bb57-026ebcf15268",
              "parentUUID": "3152958b-3fdd-4957-8dc0-47fef766aa16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "337d9cc0-a39b-416f-80d8-0646406c1778",
              "parentUUID": "3152958b-3fdd-4957-8dc0-47fef766aa16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfd2065f-80ff-4d80-be32-1d0348501161",
            "02f4b0cf-1625-4b68-bb57-026ebcf15268",
            "337d9cc0-a39b-416f-80d8-0646406c1778"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "29d1e195-5795-4a27-8add-b76c576ab9e1",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ uuid: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ uuid: 'hello' })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "6eefe77a-0939-4da3-a7c6-f9db783e4131",
              "parentUUID": "29d1e195-5795-4a27-8add-b76c576ab9e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d28e30a4-3678-487d-b7aa-3d035a1f91d7",
              "parentUUID": "29d1e195-5795-4a27-8add-b76c576ab9e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({\n  uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n})\nfactor.type.should.equal('uuid')\nfactor.data\n  .toString('hex')\n  .should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "e1e8ff3c-5480-443f-a1aa-4a5343b07e87",
              "parentUUID": "29d1e195-5795-4a27-8add-b76c576ab9e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "79c139a1-6a78-450e-bedc-8c30ebbedb58",
              "parentUUID": "29d1e195-5795-4a27-8add-b76c576ab9e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6eefe77a-0939-4da3-a7c6-f9db783e4131",
            "d28e30a4-3678-487d-b7aa-3d035a1f91d7",
            "e1e8ff3c-5480-443f-a1aa-4a5343b07e87",
            "79c139a1-6a78-450e-bedc-8c30ebbedb58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "330836ea-e49f-489c-bb9d-059cba9d0ba6",
          "title": "setup/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "7cbebe21-440e-473c-a952-c91750e6fdf3",
              "parentUUID": "330836ea-e49f-489c-bb9d-059cba9d0ba6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "14909c3d-29f4-4128-86a7-8f8ba57345c7",
              "title": "id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "2290998b-e0a6-4d78-bf67-69dfe56aa4ca",
                  "parentUUID": "14909c3d-29f4-4128-86a7-8f8ba57345c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { id: 'hello-world' }\n)\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "5da52d8e-327a-4473-8f27-b4d97797ba99",
                  "parentUUID": "14909c3d-29f4-4128-86a7-8f8ba57345c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0c29a5f3-0417-454c-9dd7-cfb6733bfa3f",
                  "parentUUID": "14909c3d-29f4-4128-86a7-8f8ba57345c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2e1b0f4f-4629-4e62-8991-3c31e7ae8522",
                  "parentUUID": "14909c3d-29f4-4128-86a7-8f8ba57345c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2290998b-e0a6-4d78-bf67-69dfe56aa4ca",
                "5da52d8e-327a-4473-8f27-b4d97797ba99",
                "0c29a5f3-0417-454c-9dd7-cfb6733bfa3f",
                "2e1b0f4f-4629-4e62-8991-3c31e7ae8522"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3dcfe848-2c53-487a-83df-d9533e832df5",
              "title": "threshold",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "caf44988-d4ef-4169-bc7f-6a022e7d38b1",
                  "parentUUID": "3dcfe848-2c53-487a-83df-d9533e832df5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password2' })\n  ],\n  { threshold: 1 }\n)\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "c521ae7e-1171-4950-8933-12e6954ed588",
                  "parentUUID": "3dcfe848-2c53-487a-83df-d9533e832df5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], {\n    threshold: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "da3090c9-2ea8-4154-8013-8162d3e1a304",
                  "parentUUID": "3dcfe848-2c53-487a-83df-d9533e832df5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 0 })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 2 })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "faea4320-7cb4-49e9-a45f-dfca7a1e6d59",
                  "parentUUID": "3dcfe848-2c53-487a-83df-d9533e832df5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caf44988-d4ef-4169-bc7f-6a022e7d38b1",
                "c521ae7e-1171-4950-8933-12e6954ed588",
                "da3090c9-2ea8-4154-8013-8162d3e1a304",
                "faea4320-7cb4-49e9-a45f-dfca7a1e6d59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6e32d64c-a5f2-4a17-8c26-cd977f481447",
              "title": "salt",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(32)",
                  "err": {},
                  "uuid": "35adbe6f-dbe0-4efe-972c-4fb698ea8511",
                  "parentUUID": "6e32d64c-a5f2-4a17-8c26-cd977f481447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { salt: Buffer.from('1234567812345678', 'base64') }\n)\npolicy.salt.should.equal('1234567812345678')",
                  "err": {},
                  "uuid": "b42bc191-2c66-4bdd-9d5f-b87298721bc2",
                  "parentUUID": "6e32d64c-a5f2-4a17-8c26-cd977f481447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { salt: 'hello' })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "84d23236-6d97-4315-b6f2-a4816f4d7742",
                  "parentUUID": "6e32d64c-a5f2-4a17-8c26-cd977f481447",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35adbe6f-dbe0-4efe-972c-4fb698ea8511",
                "b42bc191-2c66-4bdd-9d5f-b87298721bc2",
                "84d23236-6d97-4315-b6f2-a4816f4d7742"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6133c624-46f7-4b97-9d21-8aba2a2384f7",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "3398be7c-7461-4d23-89df-f7aab7f94856",
                  "parentUUID": "6133c624-46f7-4b97-9d21-8aba2a2384f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password1' })\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "4339e735-4714-4fb3-a23e-5632028fe1fd",
                  "parentUUID": "6133c624-46f7-4b97-9d21-8aba2a2384f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 12345,\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 12345,\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: 12345,\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: 12345\n    }\n  ])\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e468d95e-9beb-405f-9139-772a0017d236",
                  "parentUUID": "6133c624-46f7-4b97-9d21-8aba2a2384f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([]).should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: '',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: '',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e0d825a9-efb1-4037-85f8-4d3fdef677be",
                  "parentUUID": "6133c624-46f7-4b97-9d21-8aba2a2384f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3398be7c-7461-4d23-89df-f7aab7f94856",
                "4339e735-4714-4fb3-a23e-5632028fe1fd",
                "e468d95e-9beb-405f-9139-772a0017d236",
                "e0d825a9-efb1-4037-85f8-4d3fdef677be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "7cbebe21-440e-473c-a952-c91750e6fdf3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mfkdf2/public/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}