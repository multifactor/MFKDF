{
  "stats": {
    "suites": 76,
    "tests": 268,
    "passes": 268,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-13T20:27:17.058Z",
    "end": "2025-09-13T20:27:36.130Z",
    "duration": 19072,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "342fcd7c-4415-44d7-a86a-3cce1a73f6d8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
          "title": "aes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\aes.js",
          "file": "\\test\\crypto\\aes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "encrypt throws on invalid inputs",
              "fullTitle": "aes encrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.encrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.encrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "0a22bedc-eab4-4571-8317-3d97b3619a3c",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt throws on invalid inputs",
              "fullTitle": "aes decrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.decrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.decrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "c5b6b63c-8271-43c2-aa5f-af2f52067a6b",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "encrypts and decrypts correctly",
              "fullTitle": "aes encrypts and decrypts correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.true",
              "err": {},
              "uuid": "10bb9a1a-e7e2-417f-b01d-cfead757797f",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting with wrong key fails",
              "fullTitle": "aes decrypting with wrong key fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst wrongKey = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, wrongKey)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "af62f027-3be6-4648-a164-15ea98cbd195",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting modified data fails",
              "fullTitle": "aes decrypting modified data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\n// Modify the encrypted data\nencrypted[0] ^= 0xff\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "5bc8f37f-2e4b-430d-a849-1497e5d88686",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ciphertext length equals plaintext length",
              "fullTitle": "aes ciphertext length equals plaintext length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nencrypted.length.should.equal(data.length)",
              "err": {},
              "uuid": "0de5b362-40dc-4959-b71f-4521f2cdf57e",
              "parentUUID": "3b898dbb-0a17-47a9-a5a8-b9ab7ba737d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a22bedc-eab4-4571-8317-3d97b3619a3c",
            "c5b6b63c-8271-43c2-aa5f-af2f52067a6b",
            "10bb9a1a-e7e2-417f-b01d-cfead757797f",
            "af62f027-3be6-4648-a164-15ea98cbd195",
            "5bc8f37f-2e4b-430d-a849-1497e5d88686",
            "0de5b362-40dc-4959-b71f-4521f2cdf57e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "805e07ff-1acd-46bb-8df3-8300bf99625d",
          "title": "encrypt",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0157620-b9b5-448d-be6f-6b6952c59457",
              "title": "utils",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid1',\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey()\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "a1da5e62-108e-476a-87b2-f8963c7ba28f",
                  "parentUUID": "a0157620-b9b5-448d-be6f-6b6952c59457",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1da5e62-108e-476a-87b2-f8963c7ba28f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c194a029-b246-4f5d-a70f-30b533486127",
          "title": "derive/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "71afd4bc-a2a4-454a-ab39-52584c923f23",
              "parentUUID": "c194a029-b246-4f5d-a70f-30b533486127",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5683863d-ef16-4abb-bd1b-0d8784e83e37",
              "parentUUID": "c194a029-b246-4f5d-a70f-30b533486127",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71afd4bc-a2a4-454a-ab39-52584c923f23",
            "5683863d-ef16-4abb-bd1b-0d8784e83e37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c0c35c9-7ff2-47c8-9810-dec9466429d1",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "b0d5d9a3-6756-4e56-81dd-c3c45e3b8d24",
              "parentUUID": "2c0c35c9-7ff2-47c8-9810-dec9466429d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "a8ef38a9-e449-4e2f-96d5-2755b29db2cb",
              "parentUUID": "2c0c35c9-7ff2-47c8-9810-dec9466429d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0d5d9a3-6756-4e56-81dd-c3c45e3b8d24",
            "a8ef38a9-e449-4e2f-96d5-2755b29db2cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "10f52bba-40cd-40df-b0fc-886e083ec7a8",
          "title": "derive/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hkdf",
              "fullTitle": "derive/key hkdf",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "b6888e4e-d102-4371-b232-471471b1148f",
              "parentUUID": "10f52bba-40cd-40df-b0fc-886e083ec7a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "67050e65-5f82-4a4c-bf83-1847384f58db",
              "parentUUID": "10f52bba-40cd-40df-b0fc-886e083ec7a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: false }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('wrongpassword2')\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password2: mfkdf.derive.factors.password('wrongpassword2'),\n    password3: mfkdf.derive.factors.password('wrongpassword3')\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password4')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "d0b153aa-4785-48c8-b137-7867cece05e2",
              "parentUUID": "10f52bba-40cd-40df-b0fc-886e083ec7a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    )\n  })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "a6aff924-fc8f-45c7-b760-d4ddaed582de",
              "parentUUID": "10f52bba-40cd-40df-b0fc-886e083ec7a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6e04bd3e-6e82-48dc-8864-0944d625bf30",
              "title": "shares",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "7ef9510c-6805-4c37-8751-0ce26a63a573",
                  "parentUUID": "6e04bd3e-6e82-48dc-8864-0944d625bf30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ef9510c-6805-4c37-8751-0ce26a63a573"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "76eec636-25f4-42cb-a7f5-6f33ad69144a",
              "title": "invalid",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "284da224-1a37-41e8-9063-fbbab5d1145e",
                  "parentUUID": "76eec636-25f4-42cb-a7f5-6f33ad69144a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "aa894d9e-cd2a-47cd-a0e9-290df0ce5f62",
                  "parentUUID": "76eec636-25f4-42cb-a7f5-6f33ad69144a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "284da224-1a37-41e8-9063-fbbab5d1145e",
                "aa894d9e-cd2a-47cd-a0e9-290df0ce5f62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "b6888e4e-d102-4371-b232-471471b1148f",
            "67050e65-5f82-4a4c-bf83-1847384f58db",
            "d0b153aa-4785-48c8-b137-7867cece05e2",
            "a6aff924-fc8f-45c7-b760-d4ddaed582de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "06439fe7-c301-4e52-878e-4af071d4ccd7",
          "title": "derive/outputs",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\outputs.js",
          "file": "\\test\\derive\\outputs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stack",
              "fullTitle": "derive/outputs stack",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    })\n  ]),\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid3',\n    uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n  })\n])\ndelete setup.outputs.stack.entropyBits\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  }),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "290f29dc-0080-4470-b33f-0a90bb1f77df",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "hmacsha1",
              "fullTitle": "derive/outputs hmacsha1",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.outputs.should.not.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "ba022fa7-d578-48ff-80dd-75273a241496",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uuid",
              "fullTitle": "derive/outputs uuid",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "975691a7-2889-401c-8b7f-4e375137c0e3",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "question",
              "fullTitle": "derive/outputs question",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.outputs.question.strength.calc_time = null\nderive.outputs.question.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "41fbf036-fe21-47ea-b143-563ff6d9e340",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ooba",
              "fullTitle": "derive/outputs ooba",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "7bf9147a-e562-4ccb-8c3c-c0638d4f221b",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password",
              "fullTitle": "derive/outputs password",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.outputs.password.strength.calc_time = null\nderive.outputs.password.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "e98c2c91-d4cf-485f-a9f9-c5689f65b985",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple",
              "fullTitle": "derive/outputs multiple",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nderive.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})",
              "err": {},
              "uuid": "dca80288-91f8-45eb-8959-dc99236634c4",
              "parentUUID": "06439fe7-c301-4e52-878e-4af071d4ccd7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "290f29dc-0080-4470-b33f-0a90bb1f77df",
            "ba022fa7-d578-48ff-80dd-75273a241496",
            "975691a7-2889-401c-8b7f-4e375137c0e3",
            "41fbf036-fe21-47ea-b143-563ff6d9e340",
            "7bf9147a-e562-4ccb-8c3c-c0638d4f221b",
            "e98c2c91-d4cf-485f-a9f9-c5689f65b985",
            "dca80288-91f8-45eb-8959-dc99236634c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 385,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9b85ad11-5a4f-4f05-ace3-4084582bc4a1",
          "title": "examples",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "db87e5d4-ed75-49a9-a1d6-3d690658c623",
              "parentUUID": "9b85ad11-5a4f-4f05-ace3-4084582bc4a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "d5a71559-b5de-4b39-8dfc-ff0903a01554",
              "parentUUID": "9b85ad11-5a4f-4f05-ace3-4084582bc4a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "68cdbaa1-7f66-4184-992f-252d85890cf4",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    }),\n    await mfkdf.setup.factors.password('password2', {\n      id: 'password2'\n    })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "871d22ad-39e3-4802-9e83-a4b05758e449",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d4735b2e-7791-4e96-a7ef-dd99feb73538",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 491,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c445e9f0-0a0f-4fbd-a012-82abd4a42745",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "060d8e48-981b-4a32-ab69-09b66df3615b",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "9fd6951b-baa8-45a4-a539-a7070905bd82",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "4ff6128e-2146-4cc6-b974-ffd677ae65f7",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ba1bf1de-0a3a-40ca-9557-723bcfda3b78",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "86916601-0421-4aa2-87ae-8b8d066718d8",
                  "parentUUID": "68cdbaa1-7f66-4184-992f-252d85890cf4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "871d22ad-39e3-4802-9e83-a4b05758e449",
                "d4735b2e-7791-4e96-a7ef-dd99feb73538",
                "c445e9f0-0a0f-4fbd-a012-82abd4a42745",
                "060d8e48-981b-4a32-ab69-09b66df3615b",
                "9fd6951b-baa8-45a4-a539-a7070905bd82",
                "4ff6128e-2146-4cc6-b974-ffd677ae65f7",
                "ba1bf1de-0a3a-40ca-9557-723bcfda3b78",
                "86916601-0421-4aa2-87ae-8b8d066718d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 924,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b52ccdf8-4365-4fdf-9ab3-6d9556b0232c",
              "title": "secrets",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(\n  Buffer.from('abcdefghijklmnopqrst'),\n  2,\n  3\n) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "d85b5c8c-fb0d-44f4-a1c1-524a40c521f2",
                  "parentUUID": "b52ccdf8-4365-4fdf-9ab3-6d9556b0232c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d85b5c8c-fb0d-44f4-a1c1-524a40c521f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
              "title": "policy",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "a6fa5a69-1a0f-436f-8645-6e63c8ea0a59",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "25661b5b-e578-4076-bafe-42d8044c5086",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordA',\n  'passwordC'\n]) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordB',\n  'passwordC'\n]) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "c7d28b63-a8fa-4c0f-a9e3-a8cc5e01862c",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "245a058b-7843-483e-bbee-c6d880fbebdd",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "1d4c2e58-5b1a-4563-bc56-640b38a9f8a4",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "88f46554-c524-498d-a11e-fa3931a86db9",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "10e3fc22-5ffb-4319-aec9-84cfa982ae77",
                  "parentUUID": "53ffb45c-5a58-4e92-8da4-a1b8d364269e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6fa5a69-1a0f-436f-8645-6e63c8ea0a59",
                "25661b5b-e578-4076-bafe-42d8044c5086",
                "c7d28b63-a8fa-4c0f-a9e3-a8cc5e01862c",
                "245a058b-7843-483e-bbee-c6d880fbebdd",
                "1d4c2e58-5b1a-4563-bc56-640b38a9f8a4",
                "88f46554-c524-498d-a11e-fa3931a86db9",
                "10e3fc22-5ffb-4319-aec9-84cfa982ae77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 281,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
              "title": "reconstitution",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "221346ad-e791-4602-9157-8837c5deddd6",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "f6a0e337-05df-423a-afd3-32ca5b8662f6",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "4ed59860-36b5-4b30-a4cd-735a9fd136e5",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3853d784-ea2b-4a9e-bf5e-93a50d97e59f",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "6dc08c5c-08db-4bd3-9421-bd6728851c1f",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "b8c7fd9c-c603-4411-9e7b-6b1c9cbc9047",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "0ee54487-7c0a-45f6-b776-22173cdbe7e4",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "bbdcbf16-c6c3-41b9-995c-f4656ccd561a",
                  "parentUUID": "05ca5ab8-7f1e-4da5-9af8-4648d0de9810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "221346ad-e791-4602-9157-8837c5deddd6",
                "f6a0e337-05df-423a-afd3-32ca5b8662f6",
                "4ed59860-36b5-4b30-a4cd-735a9fd136e5",
                "3853d784-ea2b-4a9e-bf5e-93a50d97e59f",
                "6dc08c5c-08db-4bd3-9421-bd6728851c1f",
                "b8c7fd9c-c603-4411-9e7b-6b1c9cbc9047",
                "0ee54487-7c0a-45f6-b776-22173cdbe7e4",
                "bbdcbf16-c6c3-41b9-995c-f4656ccd561a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 394,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5ec426d0-5d6b-42e8-9c36-ffac2c0f2a8b",
              "title": "persistence",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "0e06b03b-6d9a-4dc3-b247-2f0ee0e8320a",
                  "parentUUID": "5ec426d0-5d6b-42e8-9c36-ffac2c0f2a8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e06b03b-6d9a-4dc3-b247-2f0ee0e8320a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2c13248c-9ce1-466f-aebc-a5f25a626024",
              "title": "crypto",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// get sub-key for \"eth\"\nconst subkey = key.getSubkey('eth')\nsubkey.toString('hex') // -> 97cb…bac5",
                  "err": {},
                  "uuid": "03c972c4-98ca-4d9a-8a13-75e44f48feb1",
                  "parentUUID": "2c13248c-9ce1-466f-aebc-a5f25a626024",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03c972c4-98ca-4d9a-8a13-75e44f48feb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "db87e5d4-ed75-49a9-a1d6-3d690658c623",
            "d5a71559-b5de-4b39-8dfc-ff0903a01554"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f1564199-0044-46c7-a1e2-e673bb9c02f7",
          "title": "site",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('Tr0ub4dour'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recovery',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recovery: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "a0a43bb5-f6a2-4107-a20c-1dba9d5d89b0",
              "parentUUID": "f1564199-0044-46c7-a1e2-e673bb9c02f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour')\n    ])\n  ).entropyBits.real\n).should.equal(16)\nMath.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp(),\n      await mfkdf.setup.factors.hmacsha1()\n    ])\n  ).entropyBits.real\n).should.equal(196)",
              "err": {},
              "uuid": "496d6987-3126-4a9c-b65b-53f5dc9a8903",
              "parentUUID": "f1564199-0044-46c7-a1e2-e673bb9c02f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "f67bd5d4-b3f9-48bf-8b1e-96034c329e76",
              "parentUUID": "f1564199-0044-46c7-a1e2-e673bb9c02f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('password'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recoveryCode',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recoveryCode: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "309e0b45-e06b-4888-b4f2-5bdef4af061a",
              "parentUUID": "f1564199-0044-46c7-a1e2-e673bb9c02f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0a43bb5-f6a2-4107-a20c-1dba9d5d89b0",
            "496d6987-3126-4a9c-b65b-53f5dc9a8903",
            "f67bd5d4-b3f9-48bf-8b1e-96034c329e76",
            "309e0b45-e06b-4888-b4f2-5bdef4af061a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 505,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ca846dc-8a26-40af-8dfe-3443753409f4",
          "title": "tutorials",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\nsetup.key.toString('hex') // -> 6458…dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "8286879c-a48c-464e-9cd8-3bc516f49eba",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// reconstitute key to change password\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword')\n)\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771",
              "err": {},
              "uuid": "7ffb323f-3c7f-4c13-89b1-98f34be5c5c9",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack([\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ]),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\nsetup.key.toString('hex') // -> 01d0…2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "b5b51927-0caf-49dd-ac33-be009800afa9",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d2…5771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d2…5771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "c93874e4-abf8-41ff-b2e2-c75b7e65ff6a",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.key.toString('hex') // -> 34d2…5771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "bcc26215-efef-437a-9680-4454538b7397",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n])\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n])\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n])\nconst threshold = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n    await mfkdf.setup.factors.uuid(),\n    await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "9fcef908-f720-47f5-9156-fa52f3773987",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "0d457287-77c2-413b-9625-2528c4d6f700",
              "parentUUID": "5ca846dc-8a26-40af-8dfe-3443753409f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8286879c-a48c-464e-9cd8-3bc516f49eba",
            "7ffb323f-3c7f-4c13-89b1-98f34be5c5c9",
            "b5b51927-0caf-49dd-ac33-be009800afa9",
            "c93874e4-abf8-41ff-b2e2-c75b7e65ff6a",
            "bcc26215-efef-437a-9680-4454538b7397",
            "9fcef908-f720-47f5-9156-fa52f3773987",
            "0d457287-77c2-413b-9625-2528c4d6f700"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "65e2e0df-c870-416e-92e9-9ceaebe88006",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key).update(challenge).digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "1cae437e-462d-4fff-8398-ae51f03b5265",
              "parentUUID": "65e2e0df-c870-416e-92e9-9ceaebe88006",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response1 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(\n  derive1.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response2 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "ec9dfce9-446b-4186-a79a-fb066c1a5b63",
              "parentUUID": "65e2e0df-c870-416e-92e9-9ceaebe88006",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.equal(\n    '2747ebf65219aee6630a758e40fd05ccbb39ab465745ea1c9a6c5adb6673d2d3'\n  )",
              "err": {},
              "uuid": "21096d4b-b1ba-4fdb-9762-d030d775be13",
              "parentUUID": "65e2e0df-c870-416e-92e9-9ceaebe88006",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "wrong-salt",
              "fullTitle": "factors/hmacsha1 wrong-salt",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PlS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nconst setup2 =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive2 = await mfkdf.derive.key(\n  JSON.parse(setup2),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.not.equal(\n    '64393334663330303639356134323533393937376561636234363262373662316562616564393838663531393337303563666432633265373130636663666230'\n  )\nderive.key.toString('hex').should.not.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "6e5daae2-e3b2-4f10-b97a-1ec87fd4a88d",
              "parentUUID": "65e2e0df-c870-416e-92e9-9ceaebe88006",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "714152dd-644e-4950-b734-253d9c45c244",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "dc6ec0b3-de03-435a-bc20-a97640eee186",
                  "parentUUID": "714152dd-644e-4950-b734-253d9c45c244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e038e24f-57ca-4146-aada-4fe192c0846f",
                  "parentUUID": "714152dd-644e-4950-b734-253d9c45c244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "285d37bd-aae9-489d-b6d3-60e71a004df7",
                  "parentUUID": "714152dd-644e-4950-b734-253d9c45c244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: Buffer.from('12345') })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "01bc2a6c-2710-4da0-b557-71c3474f4fc8",
                  "parentUUID": "714152dd-644e-4950-b734-253d9c45c244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "df964a43-fe1f-4f8c-bc59-97cc785d63a7",
                  "parentUUID": "714152dd-644e-4950-b734-253d9c45c244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc6ec0b3-de03-435a-bc20-a97640eee186",
                "e038e24f-57ca-4146-aada-4fe192c0846f",
                "285d37bd-aae9-489d-b6d3-60e71a004df7",
                "01bc2a6c-2710-4da0-b557-71c3474f4fc8",
                "df964a43-fe1f-4f8c-bc59-97cc785d63a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "1cae437e-462d-4fff-8398-ae51f03b5265",
            "ec9dfce9-446b-4186-a79a-fb066c1a5b63",
            "21096d4b-b1ba-4fdb-9762-d030d775be13",
            "6e5daae2-e3b2-4f10-b97a-1ec87fd4a88d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 142,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ee248cfc-f7ea-4e76-9c58-681d06736969",
          "title": "factors/hotp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/hotp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "2e18cc18-49a2-4e65-bba7-cec3a9367e78",
              "parentUUID": "ee248cfc-f7ea-4e76-9c58-681d06736969",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(361687)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(979122)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "d0700710-c772-4b83-aae9-9b06f03b6e13",
              "parentUUID": "ee248cfc-f7ea-4e76-9c58-681d06736969",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.hotp()])",
              "err": {},
              "uuid": "d8cd484a-4d91-4c30-8a17-d6c3a126cf74",
              "parentUUID": "ee248cfc-f7ea-4e76-9c58-681d06736969",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "56f1baa0-425d-447d-9803-a892870a71d3",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "b6952af2-1082-4ba5-b7ea-ba250522cb89",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "de7e4296-04ee-4544-a9d6-fd2979e594c6",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fe55da33-396f-4ac1-9b20-2420608173d3",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "40b7fa94-67d2-4445-bcd7-d6ff7363ed63",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "81d4fe3c-94b9-4f5c-bfa4-3007b0bbfc4d",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "24193cfa-e457-43e3-bce6-33f9c59445f0",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "94f85512-8ca3-4692-a7c6-bc9ab9d28fd9",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a05a0de3-e58b-46fd-8938-67acde2dac89",
                  "parentUUID": "56f1baa0-425d-447d-9803-a892870a71d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6952af2-1082-4ba5-b7ea-ba250522cb89",
                "de7e4296-04ee-4544-a9d6-fd2979e594c6",
                "fe55da33-396f-4ac1-9b20-2420608173d3",
                "40b7fa94-67d2-4445-bcd7-d6ff7363ed63",
                "81d4fe3c-94b9-4f5c-bfa4-3007b0bbfc4d",
                "24193cfa-e457-43e3-bce6-33f9c59445f0",
                "94f85512-8ca3-4692-a7c6-bc9ab9d28fd9",
                "a05a0de3-e58b-46fd-8938-67acde2dac89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "2e18cc18-49a2-4e65-bba7-cec3a9367e78",
            "d0700710-c772-4b83-aae9-9b06f03b6e13",
            "d8cd484a-4d91-4c30-8a17-d6c3a126cf74"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a76d481f-61b2-4cf6-a927-93136cb6859b",
          "title": "factors/ooba",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "0e4db323-c1a5-46c3-99ca-7e51cf154690",
              "parentUUID": "a76d481f-61b2-4cf6-a927-93136cb6859b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "049a858e-db14-48ed-a225-0304106cc4f2",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "e4a67e98-9af5-4d4b-9343-b048ce529203",
                  "parentUUID": "049a858e-db14-48ed-a225-0304106cc4f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nawait mfkdf.setup.factors\n  .ooba({\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 'foo'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 0\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 100\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: '12345'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: keyPair.publicKey,\n    params: '12345'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0b3f4408-f2cf-4105-ad9c-67a5a4030cf2",
                  "parentUUID": "049a858e-db14-48ed-a225-0304106cc4f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4a67e98-9af5-4d4b-9343-b048ce529203",
                "0b3f4408-f2cf-4105-ad9c-67a5a4030cf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0e4db323-c1a5-46c3-99ca-7e51cf154690"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 176,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "01c9898b-9a76-4ec2-8249-e6e702a32de5",
          "title": "persistence",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "700bc20e-86d6-4576-a89d-90dfc8368179",
              "parentUUID": "01c9898b-9a76-4ec2-8249-e6e702a32de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "f7697ca5-2c8f-44e5-be0d-1e8188190492",
              "parentUUID": "01c9898b-9a76-4ec2-8249-e6e702a32de5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "700bc20e-86d6-4576-a89d-90dfc8368179",
            "f7697ca5-2c8f-44e5-be0d-1e8188190492"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "21a52d88-262b-46b2-8b7f-038f88c9b216",
          "title": "factors/question",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "df84a8d4-3fd2-4483-ba5a-580652538fc6",
              "parentUUID": "21a52d88-262b-46b2-8b7f-038f88c9b216",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    question: mfkdf.derive.factors.question('Rex')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "3ac28b55-00f8-47c8-87af-ee91540c79c1",
              "parentUUID": "21a52d88-262b-46b2-8b7f-038f88c9b216",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f04804ce-1722-4bda-beef-42c451e84dfa",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "67d2edfa-8f67-41f2-8141-3d7850cb7d44",
                  "parentUUID": "f04804ce-1722-4bda-beef-42c451e84dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .question(12345)\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { question: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "aa498e3f-9376-4ff2-9f4c-4b39a0a09d4c",
                  "parentUUID": "f04804ce-1722-4bda-beef-42c451e84dfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67d2edfa-8f67-41f2-8141-3d7850cb7d44",
                "aa498e3f-9376-4ff2-9f4c-4b39a0a09d4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "df84a8d4-3fd2-4483-ba5a-580652538fc6",
            "3ac28b55-00f8-47c8-87af-ee91540c79c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4948dd71-6783-4871-ae68-f4651e82719a",
          "title": "factors/stack",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: 12345 }\n  )\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "fdca149b-71c5-43f6-8816-e0d29a083fb2",
              "parentUUID": "4948dd71-6783-4871-ae68-f4651e82719a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: '' }\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "c63f86bd-4548-47b4-bf9e-28463a42e28b",
              "parentUUID": "4948dd71-6783-4871-ae68-f4651e82719a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ],\n      { id: 'stack1' }\n    ),\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        })\n      ],\n      { id: 'stack2' }\n    )\n  ],\n  { threshold: 1 }\n)\nsetup.policy.factors[0].params.should.not.have.property('hmac')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "b131f25d-e14b-4fcb-968a-428d8ebf925e",
              "parentUUID": "4948dd71-6783-4871-ae68-f4651e82719a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fdca149b-71c5-43f6-8816-e0d29a083fb2",
            "c63f86bd-4548-47b4-bf9e-28463a42e28b",
            "b131f25d-e14b-4fcb-968a-428d8ebf925e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1169faef-7978-4aee-b4c8-4617d0b084b8",
          "title": "factors/totp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/totp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "c4de018d-0bd9-4caf-8a26-9db954155eff",
              "parentUUID": "1169faef-7978-4aee-b4c8-4617d0b084b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "6ed81d37-e47e-4671-835d-9ce325eed7a7",
              "parentUUID": "1169faef-7978-4aee-b4c8-4617d0b084b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "dbae7394-192a-46d2-b093-79c7e77f9a3e",
              "parentUUID": "1169faef-7978-4aee-b4c8-4617d0b084b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.totp()])",
              "err": {},
              "uuid": "35177ed4-9728-408f-908c-1655ba686156",
              "parentUUID": "1169faef-7978-4aee-b4c8-4617d0b084b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "58c409a5-e9dd-4cec-9674-1fdbcc90b2b4",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 365,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597\n  })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    totp: mfkdf.derive.factors.totp(953265, { time: 1750430943604 })\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e74aa27f-1112-440c-932a-31b93790caee",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "579ce694-5130-4048-b86e-9c27573b2768",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "0f59a1a6-fc9c-4684-b9f1-05665c7c1565",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e850d145-cf1d-4591-9319-c8477370e212",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5181df76-143b-47be-a595-6ec09b348663",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9eae1d1f-0b4f-4aef-95fd-86636029e24c",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "06e16173-dc30-49bf-b0c3-81368441bda2",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "06b03a85-bf89-4c30-aeec-950611ea0f0a",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d65ff50c-cf12-4393-aaaf-3004a0538062",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b849b7d6-7dcd-4b87-a0e8-c2f720e533ca",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9539a5b0-0d48-4d70-b786-497ebc0883d4",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5d6674e4-fdf2-4be0-be39-35cf51ecca2c",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "de4fbdbb-32fb-4087-a9a2-b5072d3419d0",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6c036f58-dd63-462e-ba1c-c4d98c337d8c",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d539c29d-1522-4088-a924-edc12ef12786",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0beff885-fe50-4283-b807-b84a83e9c5e2",
                  "parentUUID": "a3c5b601-9528-4ded-8fe0-26fcba36fcd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58c409a5-e9dd-4cec-9674-1fdbcc90b2b4",
                "e74aa27f-1112-440c-932a-31b93790caee",
                "579ce694-5130-4048-b86e-9c27573b2768",
                "0f59a1a6-fc9c-4684-b9f1-05665c7c1565",
                "e850d145-cf1d-4591-9319-c8477370e212",
                "5181df76-143b-47be-a595-6ec09b348663",
                "9eae1d1f-0b4f-4aef-95fd-86636029e24c",
                "06e16173-dc30-49bf-b0c3-81368441bda2",
                "06b03a85-bf89-4c30-aeec-950611ea0f0a",
                "d65ff50c-cf12-4393-aaaf-3004a0538062",
                "b849b7d6-7dcd-4b87-a0e8-c2f720e533ca",
                "9539a5b0-0d48-4d70-b786-497ebc0883d4",
                "5d6674e4-fdf2-4be0-be39-35cf51ecca2c",
                "de4fbdbb-32fb-4087-a9a2-b5072d3419d0",
                "6c036f58-dd63-462e-ba1c-c4d98c337d8c",
                "d539c29d-1522-4088-a924-edc12ef12786",
                "0beff885-fe50-4283-b807-b84a83e9c5e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 367,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "c4de018d-0bd9-4caf-8a26-9db954155eff",
            "6ed81d37-e47e-4671-835d-9ce325eed7a7",
            "dbae7394-192a-46d2-b093-79c7e77f9a3e",
            "35177ed4-9728-408f-908c-1655ba686156"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1257,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a2fd60fd-6033-4550-8935-65f2c8c4ae9a",
          "title": "factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "628306ee-c79d-444f-bc6f-21ae9744f70e",
              "parentUUID": "a2fd60fd-6033-4550-8935-65f2c8c4ae9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c'\n    )\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d'\n    )\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    )\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "da5a8dfb-4bfd-4785-a172-f540025048cc",
              "parentUUID": "a2fd60fd-6033-4550-8935-65f2c8c4ae9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "628306ee-c79d-444f-bc6f-21ae9744f70e",
            "da5a8dfb-4bfd-4785-a172-f540025048cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 253,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9658cc16-24ed-431c-830c-fdca5df14f03",
          "title": "entropy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "42ece878-18a3-453c-a1fa-adc942ac39e0",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "ec56fc38-305b-486a-bb40-8e7a197f55f3",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "1c283b2f-1aae-4b0b-b31a-b71bfb0ef597",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "7eb59939-de64-4337-b4a2-e8b5790714f2",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "929b9ef7-bc83-4965-9dd1-487d3077c8ea",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "521d81f9-c579-4283-a23d-f8d5030ebf2d",
              "parentUUID": "9658cc16-24ed-431c-830c-fdca5df14f03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42ece878-18a3-453c-a1fa-adc942ac39e0",
            "ec56fc38-305b-486a-bb40-8e7a197f55f3",
            "1c283b2f-1aae-4b0b-b31a-b71bfb0ef597",
            "7eb59939-de64-4337-b4a2-e8b5790714f2",
            "929b9ef7-bc83-4965-9dd1-487d3077c8ea",
            "521d81f9-c579-4283-a23d-f8d5030ebf2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 802,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ed32d30b-6691-4863-ae66-3054810729ae",
          "title": "integrity",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\integrity.js",
          "file": "\\test\\features\\integrity.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "disabled",
              "fullTitle": "integrity disabled",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  false\n)",
              "err": {},
              "uuid": "9eb73946-5e1c-423b-b050-03f9bccb33b7",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "integrity safety",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "7bb5afa9-4ff1-441e-8dd0-c302241babb6",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "liveness",
              "fullTitle": "integrity liveness",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)",
              "err": {},
              "uuid": "26025ae6-6ea9-4bbe-828f-b2b9624ec555",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "$id",
              "fullTitle": "integrity $id",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.$id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "7cb9c7e2-1e8c-4401-977c-fb596ee3cc3f",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "threshold",
              "fullTitle": "integrity threshold",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.threshold += 1\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "03cb685e-ca3a-45b2-a749-221f54ae48cb",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "salt",
              "fullTitle": "integrity salt",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.salt = 'Ny9+L9LQHOKh1x3Acqy7pMb9JaEIfNfxU/TsDON+Ht4='\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "af7824c2-726f-45cd-a00e-78f1de59f1c2",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "factor/id",
              "fullTitle": "integrity factor/id",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "434b84d6-cd6f-4d49-84a8-b98f0b263ad3",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "derive",
              "fullTitle": "integrity derive",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nderive.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    derive.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "9905f3a2-d1ce-4d9e-b2a8-2e6da3beed6e",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitution",
              "fullTitle": "integrity reconstitution",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: true }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('differentPassword3')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "fbe4ae71-bcf0-4433-a315-f17c2576996a",
              "parentUUID": "ed32d30b-6691-4863-ae66-3054810729ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9eb73946-5e1c-423b-b050-03f9bccb33b7",
            "7bb5afa9-4ff1-441e-8dd0-c302241babb6",
            "26025ae6-6ea9-4bbe-828f-b2b9624ec555",
            "7cb9c7e2-1e8c-4401-977c-fb596ee3cc3f",
            "03cb685e-ca3a-45b2-a749-221f54ae48cb",
            "af7824c2-726f-45cd-a00e-78f1de59f1c2",
            "434b84d6-cd6f-4d49-84a8-b98f0b263ad3",
            "9905f3a2-d1ce-4d9e-b2a8-2e6da3beed6e",
            "fbe4ae71-bcf0-4433-a315-f17c2576996a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 527,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a9c34fdd-cce6-4496-af02-2a0dd6999bf6",
          "title": "policy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "beb4b88f-c394-4ffe-a9ae-2e2d2d039908",
              "title": "validate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "20d442ad-9b75-4f3d-bbf6-227fa2c30d4b",
                  "parentUUID": "beb4b88f-c394-4ffe-a9ae-2e2d2d039908",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.policy\n  .setup(\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password2'\n        })\n      )\n    )\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e4b056ed-a4a4-4bc3-9b54-ccb7a58d16dc",
                  "parentUUID": "beb4b88f-c394-4ffe-a9ae-2e2d2d039908",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20d442ad-9b75-4f3d-bbf6-227fa2c30d4b",
                "e4b056ed-a4a4-4bc3-9b54-ccb7a58d16dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9926e907-1332-47a7-95e6-ec5a4dbb3fe2",
              "title": "evaluate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .true",
                  "err": {},
                  "uuid": "01f9e7c8-132d-4f1a-b824-21ab03212619",
                  "parentUUID": "9926e907-1332-47a7-95e6-ec5a4dbb3fe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .false",
                  "err": {},
                  "uuid": "b50eb11a-0ffe-4097-a3ae-a9af190e3ada",
                  "parentUUID": "9926e907-1332-47a7-95e6-ec5a4dbb3fe2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01f9e7c8-132d-4f1a-b824-21ab03212619",
                "b50eb11a-0ffe-4097-a3ae-a9af190e3ada"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
              "title": "derive",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "3c8fbfa1-4a38-4289-a717-a080867da6fc",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "5f6a2367-931f-48c2-a100-71afd545fb62",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "49963554-9533-4251-b038-03de3c6bdace",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "aefd728e-db9e-4df1-bd64-bfc80ff2ad13",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "39b653e3-b51d-4f10-8fd6-39709fdfe2b2",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f0d4d356-b53d-4aa0-a1d1-fb2208070f0d",
                  "parentUUID": "52f7c56a-5b57-425f-bc5e-117b2fe30694",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c8fbfa1-4a38-4289-a717-a080867da6fc",
                "5f6a2367-931f-48c2-a100-71afd545fb62",
                "49963554-9533-4251-b038-03de3c6bdace",
                "aefd728e-db9e-4df1-bd64-bfc80ff2ad13",
                "39b653e3-b51d-4f10-8fd6-39709fdfe2b2",
                "f0d4d356-b53d-4aa0-a1d1-fb2208070f0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 478,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "543338f7-92de-448a-8c9d-40ec6a38e5f2",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n])\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4'),\n    password6: mfkdf.derive.factors.password('password6')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c2357efa-24b8-4129-858a-03cf460e727b",
                  "parentUUID": "543338f7-92de-448a-8c9d-40ec6a38e5f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "92988826-0375-4bbd-bf9c-3b92a7260226",
                  "parentUUID": "543338f7-92de-448a-8c9d-40ec6a38e5f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2357efa-24b8-4129-858a-03cf460e727b",
                "92988826-0375-4bbd-bf9c-3b92a7260226"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "de577200-dcb4-4be5-a5bc-4d171fed3189",
          "title": "reconstitution",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 3, integrity: false }\n)\nconst key = setup.key.toString('hex')\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "6b9e6ce8-7b12-4e1b-8e13-79316ca62942",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)\nawait derive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "1d4f5094-a8d9-4524-863d-0a54c7bec627",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "e4cfe223-69bb-469e-92d4-4c12a92b3742",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "95a70ce5-8cc3-4ae6-92db-abcd606fa3be",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "99eb82ce-cc59-4373-89fb-411f27f28241",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "15135a4a-b462-4f58-9f90-a01724bcb4c6",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "01778b5f-586f-4302-9aff-9f73f252c0b9",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(\n  ['password1'],\n  [\n    await mfkdf.setup.factors.password('otherPassword2', {\n      id: 'password2'\n    })\n  ],\n  2\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "f6501270-d0ed-4764-806f-756025f5ac89",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "a62fe36d-1774-40c0-809b-4b97d11c405e",
              "parentUUID": "de577200-dcb4-4be5-a5bc-4d171fed3189",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [12345],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "99658a8a-3b27-4f81-80d4-2753d5707e5e",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    ['password4'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2b42c3f4-a188-48c5-80d0-9713829c33ef",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait setup\n  .reconstitute(\n    ['password3'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      }),\n      await mfkdf.setup.factors.password('diffPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "dc7a3fa3-8305-4f4a-94d9-ea51bb4940b2",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    'hello',\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a984b7e1-b49f-4c5e-aa74-f65817dfa6cf",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], '12345', 2)\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9714109f-575c-4bca-a8aa-15fed02d55a8",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], [], '12345')\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3262d984-440a-4adb-a439-a9417f742931",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "19810f4c-b1ef-4946-9aa0-fbafb9a333e3",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 12345,\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "736fc7ba-479b-453c-bc30-19deb78e21ea",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: '',\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9315db01-7b2a-4fbd-8006-0b6be97ad83e",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 12345,\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "75a137e6-9553-4121-b0ee-c7c80acdd12b",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: '',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e20378da-d451-42bd-a8d3-80ba839f92d0",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: 12345,\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2b10339a-6a40-4ad3-887e-bb3d9c29fb98",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from(''),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ebbfc6c2-0616-42da-86dd-5a9ff4240be4",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: 12345,\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ac716c59-410c-48bc-8b9c-2a078eca44d2",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: async () => {\n          return {}\n        },\n        output: 12345\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "57526091-d4d6-428c-8102-264581ad479d",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c5571ad7-6c64-4dd6-9698-7af502ce29f6",
                  "parentUUID": "16062896-1ccc-47c7-a65b-3c4dace1be6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99658a8a-3b27-4f81-80d4-2753d5707e5e",
                "2b42c3f4-a188-48c5-80d0-9713829c33ef",
                "dc7a3fa3-8305-4f4a-94d9-ea51bb4940b2",
                "a984b7e1-b49f-4c5e-aa74-f65817dfa6cf",
                "9714109f-575c-4bca-a8aa-15fed02d55a8",
                "3262d984-440a-4adb-a439-a9417f742931",
                "19810f4c-b1ef-4946-9aa0-fbafb9a333e3",
                "736fc7ba-479b-453c-bc30-19deb78e21ea",
                "9315db01-7b2a-4fbd-8006-0b6be97ad83e",
                "75a137e6-9553-4121-b0ee-c7c80acdd12b",
                "e20378da-d451-42bd-a8d3-80ba839f92d0",
                "2b10339a-6a40-4ad3-887e-bb3d9c29fb98",
                "ebbfc6c2-0616-42da-86dd-5a9ff4240be4",
                "ac716c59-410c-48bc-8b9c-2a078eca44d2",
                "57526091-d4d6-428c-8102-264581ad479d",
                "c5571ad7-6c64-4dd6-9698-7af502ce29f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "6b9e6ce8-7b12-4e1b-8e13-79316ca62942",
            "1d4f5094-a8d9-4524-863d-0a54c7bec627",
            "e4cfe223-69bb-469e-92d4-4c12a92b3742",
            "95a70ce5-8cc3-4ae6-92db-abcd606fa3be",
            "99eb82ce-cc59-4373-89fb-411f27f28241",
            "15135a4a-b462-4f58-9f90-a01724bcb4c6",
            "01778b5f-586f-4302-9aff-9f73f252c0b9",
            "f6501270-d0ed-4764-806f-756025f5ac89",
            "a62fe36d-1774-40c0-809b-4b97d11c405e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5276cce4-1f55-48e2-b110-87b042d578e8",
          "title": "stage",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\stage.js",
          "file": "\\test\\features\\stage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "basic",
              "fullTitle": "stage basic",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password')\n)\nconst setup = await mfkdf.setup.key([passwordSetup])\nconst passwordDerive = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: passwordDerive\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "4679720b-7597-40bb-90ed-3252cd621281",
              "parentUUID": "5276cce4-1f55-48e2-b110-87b042d578e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "full",
              "fullTitle": "stage full",
              "timedOut": false,
              "duration": 576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst init = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password'),\n  init.key\n)\nconst hmacsha1Setup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hmacsha1(),\n  init.key\n)\nconst hotpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hotp({ secret: Buffer.from('abcdefghijklmnopqrst') }),\n  init.key\n)\nconst oobaSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.ooba({ key: keyPair.publicKey, params: {} }),\n  init.key\n)\nconst questionSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.question('fido'),\n  init.key\n)\nconst totpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  }),\n  init.key\n)\nconst uuidSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  }),\n  init.key\n)\nconst setup = await mfkdf.setup.key([\n  passwordSetup,\n  hmacsha1Setup,\n  hotpSetup,\n  oobaSetup,\n  questionSetup,\n  totpSetup,\n  uuidSetup\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[1].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst next = setup.policy.factors[3].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst json = JSON.parse(Buffer.from(decrypted).toString())\nconst code = json.code\nconst password = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params,\n  setup.key\n)\nconst hmacsha1 = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hmacsha1(response),\n  setup.policy.factors[1].params,\n  setup.key\n)\nconst hotp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hotp(241063),\n  setup.policy.factors[2].params,\n  setup.key\n)\nconst ooba = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.ooba(code),\n  setup.policy.factors[3].params,\n  setup.key\n)\nconst question = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.question('fido'),\n  setup.policy.factors[4].params,\n  setup.key\n)\nconst totp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.totp(953265, { time: 1 }),\n  setup.policy.factors[5].params,\n  setup.key\n)\nconst uuid = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  setup.policy.factors[6].params,\n  setup.key\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password,\n  hmacsha1,\n  hotp,\n  ooba,\n  question,\n  totp,\n  uuid\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "3de57c3f-4c8d-46f0-84df-54087a22a9f1",
              "parentUUID": "5276cce4-1f55-48e2-b110-87b042d578e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4679720b-7597-40bb-90ed-3252cd621281",
            "3de57c3f-4c8d-46f0-84df-54087a22a9f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 625,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "82af0908-a4c0-48d9-8eed-d8526a38aede",
          "title": "mfkdf2/changes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
          "file": "\\test\\mfkdf2\\changes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a97e3150-ae58-44ee-aeb2-5605682d297f",
              "title": "key-size-256",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes key-size-256 default",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "8f88eede-0216-43f8-971f-c43651170d4f",
                  "parentUUID": "a97e3150-ae58-44ee-aeb2-5605682d297f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override",
                  "fullTitle": "mfkdf2/changes key-size-256 override",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "b252f78a-0d41-473e-aca1-d1e60c6686b0",
                  "parentUUID": "a97e3150-ae58-44ee-aeb2-5605682d297f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f88eede-0216-43f8-971f-c43651170d4f",
                "b252f78a-0d41-473e-aca1-d1e60c6686b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "707fd2a1-292b-4f16-99a3-f70448d62811",
              "title": "kdf-argon2id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes kdf-argon2id default",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "74954861-eafc-4b52-8f75-dd424cc40205",
                  "parentUUID": "707fd2a1-292b-4f16-99a3-f70448d62811",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/time",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/time",
                  "timedOut": false,
                  "duration": 154,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.time = 4\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "12fa90bb-1f95-44d9-88b5-76b0c7b4f9b4",
                  "parentUUID": "707fd2a1-292b-4f16-99a3-f70448d62811",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/memory",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/memory",
                  "timedOut": false,
                  "duration": 74,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 1024 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.memory = 2048\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "52fb9668-3a59-4d36-aae8-67bc88ad3d94",
                  "parentUUID": "707fd2a1-292b-4f16-99a3-f70448d62811",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/matching",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/matching",
                  "timedOut": false,
                  "duration": 442,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 65536, time: 3 }\n)\nsetup.policy.memory.should.equal(65536)\nsetup.policy.time.should.equal(3)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "8608ecdd-1c9b-46b5-ad81-d90f5f68b87e",
                  "parentUUID": "707fd2a1-292b-4f16-99a3-f70448d62811",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74954861-eafc-4b52-8f75-dd424cc40205",
                "12fa90bb-1f95-44d9-88b5-76b0c7b4f9b4",
                "52fb9668-3a59-4d36-aae8-67bc88ad3d94",
                "8608ecdd-1c9b-46b5-ad81-d90f5f68b87e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 716,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ba1fb44e-2240-4d77-91f3-29ed182b2869",
              "title": "encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "aes-256-ecb",
                  "fullTitle": "mfkdf2/changes encryption aes-256-ecb",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stretched = await crypto.randomBytes(32)\nconst share = await crypto.randomBytes(32)\nconst cipher = crypto.createCipheriv('AES-256-ECB', stretched, null)\ncipher.setAutoPadding(false)\nconst pad = Buffer.concat([cipher.update(share), cipher.final()])\nconst decipher = crypto.createDecipheriv('AES-256-ECB', stretched, null)\ndecipher.setAutoPadding(false)\nconst share2 = Buffer.concat([decipher.update(pad), decipher.final()])\nshare2.toString('hex').should.equal(share.toString('hex'))",
                  "err": {},
                  "uuid": "bbab4b39-324a-4e14-afdf-2e5cf8b67ce6",
                  "parentUUID": "ba1fb44e-2240-4d77-91f3-29ed182b2869",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbab4b39-324a-4e14-afdf-2e5cf8b67ce6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "02ff481f-1fc0-4589-abf0-9c2c6c466f47",
          "title": "mfkdf2/hints",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\hints.js",
          "file": "\\test\\mfkdf2\\hints.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getHint",
              "fullTitle": "mfkdf2/hints getHint",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst hint = setup.getHint('password1', 7)\nhint.should.be.a('string')\nhint.length.should.equal(7)\nconst hinta = setup.getHint('password1', 24)\nhinta.should.be.a('string')\nhinta.length.should.equal(24)\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderived.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst hint2 = derived.getHint('password1', 7)\nhint2.should.equal(hint)\nconst hinta2 = derived.getHint('password1', 24)\nhinta2.should.equal(hinta)\nconst derived2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('wrongpassword')\n  },\n  false\n)\nconst hinta3 = derived2.getHint('password1', 24)\nhinta3.should.not.equal(hinta)",
              "err": {},
              "uuid": "413e4180-ec8d-450e-80ea-1404587d3c4c",
              "parentUUID": "02ff481f-1fc0-4589-abf0-9c2c6c466f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addHint",
              "fullTitle": "mfkdf2/hints addHint",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nsetup.addHint('password1')\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(7)\nsetup.addHint('password1', 24)\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(24)\nawait mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "51629a46-8f2a-4dfa-b5b6-c4c6125cbdff",
              "parentUUID": "02ff481f-1fc0-4589-abf0-9c2c6c466f47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/hints coverage",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n);\n(() => setup.getHint()).should.throw(TypeError);\n(() => setup.getHint(123)).should.throw(TypeError);\n(() => setup.getHint('unknown')).should.throw(RangeError);\n(() => setup.getHint('password1', 'string')).should.throw(TypeError);\n(() => setup.getHint('password1', 0)).should.throw(TypeError);\n(() => setup.getHint('password1', 300)).should.throw(TypeError)",
              "err": {},
              "uuid": "55f3d8ea-bf17-43d7-9c03-791786e73301",
              "parentUUID": "02ff481f-1fc0-4589-abf0-9c2c6c466f47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "413e4180-ec8d-450e-80ea-1404587d3c4c",
            "51629a46-8f2a-4dfa-b5b6-c4c6125cbdff",
            "55f3d8ea-bf17-43d7-9c03-791786e73301"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 145,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e77777fb-ca0a-48a3-a216-7c9e22e27220",
          "title": "mfkdf2/mfdpg2",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
          "file": "\\test\\mfkdf2\\mfdpg.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a37b226a-bb5d-4fd9-87fc-064fa4cf4ffa",
              "title": "basics",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "portability",
                  "fullTitle": "mfkdf2/mfdpg2 basics portability",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11);\n/[a-zA-Z]{6,10}/.test(password).should.be.true\nconst password2 = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst password3 = derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password3)",
                  "err": {},
                  "uuid": "8017b626-997f-4b16-b967-9c780f16f28b",
                  "parentUUID": "a37b226a-bb5d-4fd9-87fc-064fa4cf4ffa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-example",
                  "fullTitle": "mfkdf2/mfdpg2 basics full-example",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst policy = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\npassword1.should.equal(password3)",
                  "err": {},
                  "uuid": "ccd49fde-b510-4f1a-8a2c-1f48b4d9900c",
                  "parentUUID": "a37b226a-bb5d-4fd9-87fc-064fa4cf4ffa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8017b626-997f-4b16-b967-9c780f16f28b",
                "ccd49fde-b510-4f1a-8a2c-1f48b4d9900c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "961aaa02-e4f9-4cd7-9688-e634aee50189",
              "title": "correctness",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness basic-test",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "af994576-42fc-4dd5-ae9b-a06564cede6b",
                  "parentUUID": "961aaa02-e4f9-4cd7-9688-e634aee50189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness full-test",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "326e8d77-dc82-49cc-9b14-f8a8947ab88f",
                  "parentUUID": "961aaa02-e4f9-4cd7-9688-e634aee50189",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af994576-42fc-4dd5-ae9b-a06564cede6b",
                "326e8d77-dc82-49cc-9b14-f8a8947ab88f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "26dc4671-deaf-47de-b7e9-b7283a619243",
              "title": "safety",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety basic-test",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst setup2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup1.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password2)",
                  "err": {},
                  "uuid": "9f38919d-65f9-439d-b0be-111db5d22e8c",
                  "parentUUID": "26dc4671-deaf-47de-b7e9-b7283a619243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety full-test",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst password3 = await derive2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password3)",
                  "err": {},
                  "uuid": "830c6c12-ea41-4d73-bc45-a4a0b8eda94d",
                  "parentUUID": "26dc4671-deaf-47de-b7e9-b7283a619243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f38919d-65f9-439d-b0be-111db5d22e8c",
                "830c6c12-ea41-4d73-bc45-a4a0b8eda94d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "460cfaf3-9a91-4d04-bf3e-5aa4de681adb",
              "title": "compatibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility basic-policy",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11)",
                  "err": {},
                  "uuid": "c1a0ee4c-0825-451e-a728-a039d9a336e1",
                  "parentUUID": "460cfaf3-9a91-4d04-bf3e-5aa4de681adb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "custom-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility custom-policy",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst regex = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password = await setup.derivePassword('example.com', 'salt', regex)\nregex.test(password).should.be.true",
                  "err": {},
                  "uuid": "1d77ebc4-ca92-4240-9983-e110f50c11fa",
                  "parentUUID": "460cfaf3-9a91-4d04-bf3e-5aa4de681adb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1a0ee4c-0825-451e-a728-a039d9a336e1",
                "1d77ebc4-ca92-4240-9983-e110f50c11fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "84f51385-73b9-4b9c-95cb-34595d79dab8",
          "title": "mfkdf2/passkeys",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\passkeys.js",
          "file": "\\test\\mfkdf2\\passkeys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "liveness",
              "fullTitle": "mfkdf2/passkeys liveness",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  passkey: mfkdf.derive.factors.passkey(prf)\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "34b8936b-ec9b-4c38-b3de-53fc71620add",
              "parentUUID": "84f51385-73b9-4b9c-95cb-34595d79dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "mfkdf2/passkeys safety",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst prf2 = await crypto.randomBytes(32)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    passkey: mfkdf.derive.factors.passkey(prf2)\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "bbb6510f-3132-4ae1-aeea-b998a3fc53c5",
              "parentUUID": "84f51385-73b9-4b9c-95cb-34595d79dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/passkeys coverage",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .passkey('hello')\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: 123 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .passkey(Buffer.from('hello'))\n  .should.be.rejectedWith(RangeError);\n(() => {\n  mfkdf.derive.factors.passkey('hello')\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.passkey(Buffer.from('hello'))\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "76da9cad-a9d3-4fea-9ad7-815582c20e7e",
              "parentUUID": "84f51385-73b9-4b9c-95cb-34595d79dab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34b8936b-ec9b-4c38-b3de-53fc71620add",
            "bbb6510f-3132-4ae1-aeea-b998a3fc53c5",
            "76da9cad-a9d3-4fea-9ad7-815582c20e7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "77266af8-fbba-4045-9f63-f610aacbc3ca",
          "title": "mfkdf2/security",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
          "file": "\\test\\mfkdf2\\security.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "totp",
              "fullTitle": "mfkdf2/security totp",
              "timedOut": false,
              "duration": 381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
              "err": {},
              "uuid": "bbac158b-6284-44c7-8bfa-a72264db8153",
              "parentUUID": "77266af8-fbba-4045-9f63-f610aacbc3ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "eaab00ce-7a55-4cbb-aabd-c062d3a0b629",
              "title": "factor-fungibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security factor-fungibility correct",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "6dc118c4-258c-40db-a4aa-077eb28f1f4c",
                  "parentUUID": "eaab00ce-7a55-4cbb-aabd-c062d3a0b629",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "incorrect",
                  "fullTitle": "mfkdf2/security factor-fungibility incorrect",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2'),\n    password2: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "4171ee0a-6d4c-403c-9a4f-f3a9154ee5b6",
                  "parentUUID": "eaab00ce-7a55-4cbb-aabd-c062d3a0b629",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dc118c4-258c-40db-a4aa-077eb28f1f4c",
                "4171ee0a-6d4c-403c-9a4f-f3a9154ee5b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8327aa66-8a84-4c54-8670-01931d6d87f9",
              "title": "share-indistinguishability",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "share-size",
                  "fullTitle": "mfkdf2/security share-indistinguishability share-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret = crypto.randomBytes(32)\nconst shares1 = mfkdf.secrets.share(secret, 1, 3)\nshares1.should.have.length(3)\nfor (const share of shares1) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares1.slice(0, 1).concat([null, null]), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null, null].concat(shares1.slice(2, 3)), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares2 = mfkdf.secrets.share(secret, 2, 3)\nshares2.should.have.length(3)\nfor (const share of shares2) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares2.slice(0, 2).concat([null]), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null].concat(shares2.slice(1, 3)), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares3 = mfkdf.secrets.share(secret, 3, 3)\nshares3.should.have.length(3)\nfor (const share of shares3) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares3.slice(0, 3), 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
                  "err": {},
                  "uuid": "79978387-0845-41e8-a7f4-993080e06182",
                  "parentUUID": "8327aa66-8a84-4c54-8670-01931d6d87f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79978387-0845-41e8-a7f4-993080e06182"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "27746588-6ae4-4eb2-8b00-859ce70ec0e4",
              "title": "share-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security share-encryption correct",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst materialp1 = await mfkdf.derive.factors.password('password1')(\n  setup.policy.factors[0].params\n)\nconst padp1 = Buffer.from(setup.policy.factors[0].pad, 'base64')\nconst stretchedp1 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp1.data,\n    setup.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep1 = xor(padp1, stretchedp1)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword1', { id: 'password1' })\n)\nconst derive2f = await mfkdf.policy.derive(\n  derive.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive2f.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(derive.policy, {\n  password1: mfkdf.derive.factors.password('newPassword1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst materialp3 = await mfkdf.derive.factors.password('newPassword1')(\n  derive.policy.factors[0].params\n)\nconst padp3 = Buffer.from(derive.policy.factors[0].pad, 'base64')\nconst stretchedp3 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp3.data,\n    derive.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep3 = xor(padp3, stretchedp3)\nawait derive2.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password1' })\n)\nconst derive3 = await mfkdf.policy.derive(derive2.policy, {\n  password1: mfkdf.derive.factors.password('newPassword2'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nsharep1.should.not.equal(sharep3)",
                  "err": {},
                  "uuid": "c6bfdf62-abf5-43c9-913d-502e08073a32",
                  "parentUUID": "27746588-6ae4-4eb2-8b00-859ce70ec0e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6bfdf62-abf5-43c9-913d-502e08073a32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1203a3da-1b68-4a32-835b-60d559d33371",
              "title": "factor-secret-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "hotp",
                  "fullTitle": "mfkdf2/security factor-secret-encryption hotp",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
                  "err": {},
                  "uuid": "61c99893-ec0e-4684-8317-b9ed97eb8d6b",
                  "parentUUID": "1203a3da-1b68-4a32-835b-60d559d33371",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61c99893-ec0e-4684-8317-b9ed97eb8d6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "22c9cd89-3b38-47b7-9f43-f1c719919d02",
              "title": "timing-oracle",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                  "title": "totp/dynamic",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic no-oracle",
                      "timedOut": false,
                      "duration": 439,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "ba94c24e-5bb6-46da-acfc-0e33a07104b0",
                      "parentUUID": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 518,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "9486abd9-7af0-488e-be47-fd1e65e58467",
                      "parentUUID": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 556,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "be348499-1cd9-4ee5-aa74-f4c81e186a9c",
                      "parentUUID": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 513,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "def2052e-5e26-4f2e-940f-2d90900823d7",
                      "parentUUID": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 550,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "80d7ff8b-365c-403b-ac5e-2da5899356a8",
                      "parentUUID": "b291e43c-0e53-4f4e-83a5-e152a9d4af39",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba94c24e-5bb6-46da-acfc-0e33a07104b0",
                    "9486abd9-7af0-488e-be47-fd1e65e58467",
                    "be348499-1cd9-4ee5-aa74-f4c81e186a9c",
                    "def2052e-5e26-4f2e-940f-2d90900823d7",
                    "80d7ff8b-365c-403b-ac5e-2da5899356a8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2576,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                  "title": "totp/static",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static no-oracle",
                      "timedOut": false,
                      "duration": 443,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "e141e739-08f9-4eba-8743-6d434dce2b6e",
                      "parentUUID": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 469,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "32a0d76b-f6f5-4978-9cc9-19cbc28cb31f",
                      "parentUUID": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 540,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "44e078ab-6ffb-449e-9911-739c6def84d9",
                      "parentUUID": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 468,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "abb6193b-88d6-4166-afa0-39afde8c4dd0",
                      "parentUUID": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 538,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "0b0bee2a-e0b9-4870-89bf-45bc8c3ec7ac",
                      "parentUUID": "972742b5-6a3d-4f51-b49f-febfac0a93aa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e141e739-08f9-4eba-8743-6d434dce2b6e",
                    "32a0d76b-f6f5-4978-9cc9-19cbc28cb31f",
                    "44e078ab-6ffb-449e-9911-739c6def84d9",
                    "abb6193b-88d6-4166-afa0-39afde8c4dd0",
                    "0b0bee2a-e0b9-4870-89bf-45bc8c3ec7ac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2458,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "21b91c13-16a9-4ebc-a31d-8b979d8c556a",
              "title": "policy-integrity",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security policy-integrity correct",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a6e91407-8341-4ea7-b26d-5accfd5a236d",
                  "parentUUID": "21b91c13-16a9-4ebc-a31d-8b979d8c556a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/$id",
                  "fullTitle": "mfkdf2/security policy-integrity invalid/$id",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nsetup.policy.$id = 'invalid-id'\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    {},\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1c1641d4-d8d7-478e-a09b-8b13794656af",
                  "parentUUID": "21b91c13-16a9-4ebc-a31d-8b979d8c556a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6e91407-8341-4ea7-b26d-5accfd5a236d",
                "1c1641d4-d8d7-478e-a09b-8b13794656af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "bbac158b-6284-44c7-8bfa-a72264db8153"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 381,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "12459996-ec7c-4658-9037-5ef8336e5f64",
          "title": "mfkdf2/strengthening",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
          "file": "\\test\\mfkdf2\\strengthening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "strengthening-throws",
              "fullTitle": "mfkdf2/strengthening strengthening-throws",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nawait derive\n  .strenthen(-1, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(1.5, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(0, -1)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )\nawait derive\n  .strenthen(0, 1.5)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )",
              "err": {},
              "uuid": "8dbdad04-4b0f-4bee-a6e1-70ffdfc77b1d",
              "parentUUID": "12459996-ec7c-4658-9037-5ef8336e5f64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-works-multiple-times",
              "fullTitle": "mfkdf2/strengthening strengthening-works-multiple-times",
              "timedOut": false,
              "duration": 391,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive.policy.time = 0\nderive.policy.memory = 0\nawait mfkdf.derive\n  .key(derive.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)\nawait derive2.strenthen(3, 16384)\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive3.policy.time.should.equal(3)\nderive3.policy.memory.should.equal(16384)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.policy.time = 0\nderive2.policy.memory = 0\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)",
              "err": {},
              "uuid": "66ef8d2c-c09e-4e69-a32b-456b3e636129",
              "parentUUID": "12459996-ec7c-4658-9037-5ef8336e5f64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-other-factors",
              "fullTitle": "mfkdf2/strengthening strengthening-with-other-factors",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive2.strenthen()\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(0)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.policy.time.should.equal(0)\nderive3.policy.memory.should.equal(0)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "e122af1e-87df-47d1-946f-7d93da9f5667",
              "parentUUID": "12459996-ec7c-4658-9037-5ef8336e5f64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-reconstitution",
              "fullTitle": "mfkdf2/strengthening strengthening-with-reconstitution",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nawait derive.setThreshold(1)\nawait derive.removeFactor('password2')\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "2eb378e4-dc52-45ed-b32b-bed233a75367",
              "parentUUID": "12459996-ec7c-4658-9037-5ef8336e5f64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0650966e-bf7f-45e4-8b84-7a46ecc3e3b3",
              "title": "setup",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening setup time",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 5 }\n)\nsetup.policy.time.should.equal(5)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(5)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "6a33dec0-b5e3-4bb4-a9f9-e016c580c671",
                  "parentUUID": "0650966e-bf7f-45e4-8b84-7a46ecc3e3b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening setup memory",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 32768 }\n)\nsetup.policy.memory.should.equal(32768)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(32768)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e91f5efe-0a2f-4844-b94d-35d90c1a37b4",
                  "parentUUID": "0650966e-bf7f-45e4-8b84-7a46ecc3e3b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening setup time-and-memory",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3, memory: 16384 }\n)\nsetup.policy.time.should.equal(3)\nsetup.policy.memory.should.equal(16384)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "0b5c3876-3838-4b27-af0b-60aa238d0110",
                  "parentUUID": "0650966e-bf7f-45e4-8b84-7a46ecc3e3b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws",
                  "fullTitle": "mfkdf2/strengthening setup throws",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'time must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'time must be an integer')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'memory must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'memory must be an integer')",
                  "err": {},
                  "uuid": "852d934d-454b-41e3-998c-860767d406bf",
                  "parentUUID": "0650966e-bf7f-45e4-8b84-7a46ecc3e3b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a33dec0-b5e3-4bb4-a9f9-e016c580c671",
                "e91f5efe-0a2f-4844-b94d-35d90c1a37b4",
                "0b5c3876-3838-4b27-af0b-60aa238d0110",
                "852d934d-454b-41e3-998c-860767d406bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 443,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5a80a0fc-53a0-4add-97e0-4ff2ce65f080",
              "title": "strengthening",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening strengthening time",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(5, 0)\nderive.policy.time.should.equal(5)\nderive.policy.memory.should.equal(0)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(5)\nderive2.policy.memory.should.equal(0)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "13b4653f-c591-492e-b019-d36003daf4b1",
                  "parentUUID": "5a80a0fc-53a0-4add-97e0-4ff2ce65f080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening strengthening memory",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(0, 32768)\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(32768)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(32768)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "cdd3b8f7-bf0b-4439-a022-682dc53e2488",
                  "parentUUID": "5a80a0fc-53a0-4add-97e0-4ff2ce65f080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening strengthening time-and-memory",
                  "timedOut": false,
                  "duration": 231,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(3, 16384)\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b9263bf1-5d7a-44dd-ba02-37ff14e2c9ec",
                  "parentUUID": "5a80a0fc-53a0-4add-97e0-4ff2ce65f080",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13b4653f-c591-492e-b019-d36003daf4b1",
                "cdd3b8f7-bf0b-4439-a022-682dc53e2488",
                "b9263bf1-5d7a-44dd-ba02-37ff14e2c9ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 576,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "8dbdad04-4b0f-4bee-a6e1-70ffdfc77b1d",
            "66ef8d2c-c09e-4e69-a32b-456b3e636129",
            "e122af1e-87df-47d1-946f-7d93da9f5667",
            "2eb378e4-dc52-45ed-b32b-bed233a75367"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 805,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "04657cdc-0b8f-4fcb-946e-428eb04e92fc",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "763aa793-6fc5-4ac1-8519-a9bdece0c6c0",
              "parentUUID": "04657cdc-0b8f-4fcb-946e-428eb04e92fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "587cf7dd-b95f-42d3-adcf-a2c2af81ef64",
              "parentUUID": "04657cdc-0b8f-4fcb-946e-428eb04e92fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e8889d1e-265d-4e34-bb3e-210a9f40a032",
              "parentUUID": "04657cdc-0b8f-4fcb-946e-428eb04e92fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "763aa793-6fc5-4ac1-8519-a9bdece0c6c0",
            "587cf7dd-b95f-42d3-adcf-a2c2af81ef64",
            "e8889d1e-265d-4e34-bb3e-210a9f40a032"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "6d60493f-dd55-4a9e-b79f-5700b012f629",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  1,\n  5\n)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "64ff1d28-cf12-4183-909a-9d2af93fd067",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  2,\n  3\n)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "82e7aa08-d010-4159-a6f7-aeb4435c0601",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "8ecbd43a-8c07-4f10-8240-7691085a4753",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nshares.should.be.an('array').of.length(255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 250; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 255)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[251] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e0cac610-2a75-4fee-ac90-e2fcafa915e6",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)",
              "err": {},
              "uuid": "6d045a06-af8a-45d0-87d0-69a186e0736f",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1504b29d-d7c0-4399-81a3-01b789fc9fff",
              "parentUUID": "dc6cf7af-4a14-453e-ab59-7c4e3c321e78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d60493f-dd55-4a9e-b79f-5700b012f629",
            "64ff1d28-cf12-4183-909a-9d2af93fd067",
            "82e7aa08-d010-4159-a6f7-aeb4435c0601",
            "8ecbd43a-8c07-4f10-8240-7691085a4753",
            "e0cac610-2a75-4fee-ac90-e2fcafa915e6",
            "6d045a06-af8a-45d0-87d0-69a186e0736f",
            "1504b29d-d7c0-4399-81a3-01b789fc9fff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6d9241d5-1d06-4156-b735-8e93106f3abe",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\new.js",
          "file": "\\test\\secrets\\new.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "share-size",
              "fullTitle": "secrets share-size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let secret = crypto.randomBytes(32)\nlet shares = mfkdf.secrets.share(secret, 1, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[0].should.equal(secret)\nshares[1].length.should.equal(32)\nshares[1].should.equal(secret)\nshares[2].length.should.equal(32)\nshares[2].should.equal(secret)\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[2] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 2, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 3, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
              "err": {},
              "uuid": "081e667c-f85b-4f7a-9810-4e48625bad21",
              "parentUUID": "6d9241d5-1d06-4156-b735-8e93106f3abe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "081e667c-f85b-4f7a-9810-4e48625bad21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9cc30414-7847-4103-b974-461c13fecd2d",
          "title": "secrets/recover",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "f662b90d-87b2-4eda-a585-0ac7ed66e237",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "d6f09e10-6a6a-47b7-94ef-897904a61585",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "3acac63d-9f42-453c-ab22-bc01d3d00534",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "ff21c6de-6c2e-4185-8833-3c7423e28f37",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "8f414d75-dc67-446d-be87-3c3439911365",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "615a0b14-9dc3-4c83-9e50-7bba89f8b984",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "ebe19a8d-2f14-46c0-84b1-adef9fc9f295",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "87c8603a-8710-4f81-a96f-f85bb96baef4",
              "parentUUID": "9cc30414-7847-4103-b974-461c13fecd2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f662b90d-87b2-4eda-a585-0ac7ed66e237",
            "d6f09e10-6a6a-47b7-94ef-897904a61585",
            "3acac63d-9f42-453c-ab22-bc01d3d00534",
            "ff21c6de-6c2e-4185-8833-3c7423e28f37",
            "8f414d75-dc67-446d-be87-3c3439911365",
            "615a0b14-9dc3-4c83-9e50-7bba89f8b984",
            "ebe19a8d-2f14-46c0-84b1-adef9fc9f295",
            "87c8603a-8710-4f81-a96f-f85bb96baef4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5cd2e7f4-e0dc-480f-ac74-71a90c04655b",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "bcf3268b-545c-4333-a2ed-f5c6370355aa",
              "parentUUID": "5cd2e7f4-e0dc-480f-ac74-71a90c04655b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "633083dc-cd13-47c9-b5cc-6af0f2fa2d06",
              "parentUUID": "5cd2e7f4-e0dc-480f-ac74-71a90c04655b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "717a4ff7-e0b2-44cb-9d19-2f72ba11455e",
              "parentUUID": "5cd2e7f4-e0dc-480f-ac74-71a90c04655b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcf3268b-545c-4333-a2ed-f5c6370355aa",
            "633083dc-cd13-47c9-b5cc-6af0f2fa2d06",
            "717a4ff7-e0b2-44cb-9d19-2f72ba11455e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "07c4cb0a-d4f1-4d43-bad6-5a26c915b20e",
          "title": "setup/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .password('password', { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "24d97c07-f2a7-429f-bc3a-6a472bb5598b",
              "parentUUID": "07c4cb0a-d4f1-4d43-bad6-5a26c915b20e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .password('password', { id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "7a52025a-923e-4e91-8138-01e6988b1f74",
              "parentUUID": "07c4cb0a-d4f1-4d43-bad6-5a26c915b20e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "0e56dc2e-d85f-4463-bafe-dfbcd3aa7792",
              "parentUUID": "07c4cb0a-d4f1-4d43-bad6-5a26c915b20e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24d97c07-f2a7-429f-bc3a-6a472bb5598b",
            "7a52025a-923e-4e91-8138-01e6988b1f74",
            "0e56dc2e-d85f-4463-bafe-dfbcd3aa7792"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5911cbf9-4cf4-4b71-ba13-dbbc805d482d",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ uuid: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ uuid: 'hello' })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "1b9023e5-0f11-404c-b8d1-121eded321b6",
              "parentUUID": "5911cbf9-4cf4-4b71-ba13-dbbc805d482d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "fbb2eea4-e431-4e43-b873-8a71a8b3c7da",
              "parentUUID": "5911cbf9-4cf4-4b71-ba13-dbbc805d482d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({\n  uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n})\nfactor.type.should.equal('uuid')\nfactor.data\n  .toString('hex')\n  .should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "7490e44d-c554-408f-af36-62c6ce66d457",
              "parentUUID": "5911cbf9-4cf4-4b71-ba13-dbbc805d482d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "ee6b26bc-d594-4f63-825f-11f12e91927a",
              "parentUUID": "5911cbf9-4cf4-4b71-ba13-dbbc805d482d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b9023e5-0f11-404c-b8d1-121eded321b6",
            "fbb2eea4-e431-4e43-b873-8a71a8b3c7da",
            "7490e44d-c554-408f-af36-62c6ce66d457",
            "ee6b26bc-d594-4f63-825f-11f12e91927a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b418ff22-4de0-45bd-a27c-adaaa7410b67",
          "title": "setup/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "d97b0c90-9045-4611-ba70-09924102b38b",
              "parentUUID": "b418ff22-4de0-45bd-a27c-adaaa7410b67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4520d400-cfff-494b-9fc2-8ace38df5526",
              "title": "id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "241a7ccc-acb1-4682-a098-769d1e1959fe",
                  "parentUUID": "4520d400-cfff-494b-9fc2-8ace38df5526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { id: 'hello-world' }\n)\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "19d98271-a6cf-4fc0-a0d3-5d9c5887cd0f",
                  "parentUUID": "4520d400-cfff-494b-9fc2-8ace38df5526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9500ffa8-cbee-4813-ad52-9a9789ef9b0c",
                  "parentUUID": "4520d400-cfff-494b-9fc2-8ace38df5526",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "05f5c5bc-dddd-4aa7-b094-e035a4e04d18",
                  "parentUUID": "4520d400-cfff-494b-9fc2-8ace38df5526",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "241a7ccc-acb1-4682-a098-769d1e1959fe",
                "19d98271-a6cf-4fc0-a0d3-5d9c5887cd0f",
                "9500ffa8-cbee-4813-ad52-9a9789ef9b0c",
                "05f5c5bc-dddd-4aa7-b094-e035a4e04d18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b2fa3108-40ca-41c5-8e4e-606d7634d49f",
              "title": "threshold",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "8f927c6c-07d8-4c01-90dc-00997265ffb5",
                  "parentUUID": "b2fa3108-40ca-41c5-8e4e-606d7634d49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password2' })\n  ],\n  { threshold: 1 }\n)\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "14cacd10-aa1d-47fd-b125-b1628073b927",
                  "parentUUID": "b2fa3108-40ca-41c5-8e4e-606d7634d49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], {\n    threshold: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b42d1b28-f051-4b25-b588-7946d81e858c",
                  "parentUUID": "b2fa3108-40ca-41c5-8e4e-606d7634d49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 0 })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 2 })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2c29c656-9a8c-4461-afcf-052940136be6",
                  "parentUUID": "b2fa3108-40ca-41c5-8e4e-606d7634d49f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f927c6c-07d8-4c01-90dc-00997265ffb5",
                "14cacd10-aa1d-47fd-b125-b1628073b927",
                "b42d1b28-f051-4b25-b588-7946d81e858c",
                "2c29c656-9a8c-4461-afcf-052940136be6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6cefd93a-7ff6-4243-9617-f885531ccdcb",
              "title": "salt",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(32)",
                  "err": {},
                  "uuid": "cfda0efc-e7bf-43e6-b56a-aa3613fe903c",
                  "parentUUID": "6cefd93a-7ff6-4243-9617-f885531ccdcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { salt: Buffer.from('1234567812345678', 'base64') }\n)\npolicy.salt.should.equal('1234567812345678')",
                  "err": {},
                  "uuid": "424f7849-0eae-4464-a35f-58577247288b",
                  "parentUUID": "6cefd93a-7ff6-4243-9617-f885531ccdcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { salt: 'hello' })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "027bce25-4606-4c7c-ac8b-491f2eddbe1b",
                  "parentUUID": "6cefd93a-7ff6-4243-9617-f885531ccdcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfda0efc-e7bf-43e6-b56a-aa3613fe903c",
                "424f7849-0eae-4464-a35f-58577247288b",
                "027bce25-4606-4c7c-ac8b-491f2eddbe1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "75c1d914-f3e9-4ba5-99f1-8e6959e3f9fd",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "5d5110bb-1171-4cfd-9b1d-3f9e9908253e",
                  "parentUUID": "75c1d914-f3e9-4ba5-99f1-8e6959e3f9fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password1' })\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8f261467-b81e-4a22-8b2d-55fa188bf362",
                  "parentUUID": "75c1d914-f3e9-4ba5-99f1-8e6959e3f9fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 12345,\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 12345,\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: 12345,\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: 12345\n    }\n  ])\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8e2df0b3-dba9-40cb-8ff5-efe039fe9cf1",
                  "parentUUID": "75c1d914-f3e9-4ba5-99f1-8e6959e3f9fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([]).should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: '',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: '',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2323d51d-5995-4873-b5bd-8c92e36a48bd",
                  "parentUUID": "75c1d914-f3e9-4ba5-99f1-8e6959e3f9fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d5110bb-1171-4cfd-9b1d-3f9e9908253e",
                "8f261467-b81e-4a22-8b2d-55fa188bf362",
                "8e2df0b3-dba9-40cb-8ff5-efe039fe9cf1",
                "2323d51d-5995-4873-b5bd-8c92e36a48bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "d97b0c90-9045-4611-ba70-09924102b38b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mfkdf2/public/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}