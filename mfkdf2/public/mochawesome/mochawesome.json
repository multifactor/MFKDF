{
  "stats": {
    "suites": 76,
    "tests": 268,
    "passes": 268,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-15T19:36:58.257Z",
    "end": "2025-09-15T19:37:17.247Z",
    "duration": 18990,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3ac2173-b298-4e05-98a4-6299b80aa473",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
          "title": "aes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\aes.js",
          "file": "\\test\\crypto\\aes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "encrypt throws on invalid inputs",
              "fullTitle": "aes encrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.encrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.encrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "e19f4f21-5341-4c6c-bdee-c5c196fe9827",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt throws on invalid inputs",
              "fullTitle": "aes decrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.decrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.decrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "5ed971e9-01d8-481a-907a-9b0d76bc53a6",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "encrypts and decrypts correctly",
              "fullTitle": "aes encrypts and decrypts correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.true",
              "err": {},
              "uuid": "1a541ade-12cd-487e-923b-0367647b518a",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting with wrong key fails",
              "fullTitle": "aes decrypting with wrong key fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst wrongKey = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, wrongKey)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "91c27d85-1f39-4c16-830a-a07fde900f96",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting modified data fails",
              "fullTitle": "aes decrypting modified data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\n// Modify the encrypted data\nencrypted[0] ^= 0xff\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "8d48f59f-4d65-4265-a587-63794405f2fb",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ciphertext length equals plaintext length",
              "fullTitle": "aes ciphertext length equals plaintext length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nencrypted.length.should.equal(data.length)",
              "err": {},
              "uuid": "fdce1447-c633-47f2-af43-1c0abaf07882",
              "parentUUID": "41834a98-ca66-4b55-8c2c-8de5a6e3f705",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e19f4f21-5341-4c6c-bdee-c5c196fe9827",
            "5ed971e9-01d8-481a-907a-9b0d76bc53a6",
            "1a541ade-12cd-487e-923b-0367647b518a",
            "91c27d85-1f39-4c16-830a-a07fde900f96",
            "8d48f59f-4d65-4265-a587-63794405f2fb",
            "fdce1447-c633-47f2-af43-1c0abaf07882"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7bd314a1-8dfe-4fb5-b894-d7f43d708c07",
          "title": "encrypt",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef7e2a69-9e87-440c-9d58-fb5873ca9dbb",
              "title": "utils",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid1',\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey()\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "9b5b193e-dcb8-455b-9294-13f6f22219ec",
                  "parentUUID": "ef7e2a69-9e87-440c-9d58-fb5873ca9dbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b5b193e-dcb8-455b-9294-13f6f22219ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "72d9d820-4577-4db5-84d4-ab721720d561",
          "title": "derive/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "d87cd8d7-5f69-4f41-9d8f-95b91b4647d3",
              "parentUUID": "72d9d820-4577-4db5-84d4-ab721720d561",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5c47bca4-6260-48bb-9cc9-a100041dc062",
              "parentUUID": "72d9d820-4577-4db5-84d4-ab721720d561",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d87cd8d7-5f69-4f41-9d8f-95b91b4647d3",
            "5c47bca4-6260-48bb-9cc9-a100041dc062"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "375005e2-ea9d-4f8b-a4a5-58b05cac03eb",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "5d8e99b6-61dd-4414-ab68-6d009f372247",
              "parentUUID": "375005e2-ea9d-4f8b-a4a5-58b05cac03eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "7d757869-3210-405a-be00-6b1cb84af556",
              "parentUUID": "375005e2-ea9d-4f8b-a4a5-58b05cac03eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d8e99b6-61dd-4414-ab68-6d009f372247",
            "7d757869-3210-405a-be00-6b1cb84af556"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "451bc819-5162-4df4-8339-fe513c3f71b1",
          "title": "derive/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hkdf",
              "fullTitle": "derive/key hkdf",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "559abca9-0011-4922-aa6d-6facbfdf464b",
              "parentUUID": "451bc819-5162-4df4-8339-fe513c3f71b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "0b233ed3-0d72-4c6d-9fae-bf9ecb275422",
              "parentUUID": "451bc819-5162-4df4-8339-fe513c3f71b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: false }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('wrongpassword2')\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password2: mfkdf.derive.factors.password('wrongpassword2'),\n    password3: mfkdf.derive.factors.password('wrongpassword3')\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password4')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "bbf8142c-9039-44ec-9a70-ae6dbd403fa8",
              "parentUUID": "451bc819-5162-4df4-8339-fe513c3f71b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    )\n  })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "662a5cbf-ddc1-43c7-9073-3448820d8e80",
              "parentUUID": "451bc819-5162-4df4-8339-fe513c3f71b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c19abe21-a6c2-4443-b788-c396a3d688d5",
              "title": "shares",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "731535c0-f708-4131-847d-8ec66eb56885",
                  "parentUUID": "c19abe21-a6c2-4443-b788-c396a3d688d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "731535c0-f708-4131-847d-8ec66eb56885"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9cfc0757-3067-41ff-8955-4011fcc3ee51",
              "title": "invalid",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ccd65851-3de1-4e21-a061-0b7c7d6cf5a4",
                  "parentUUID": "9cfc0757-3067-41ff-8955-4011fcc3ee51",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6fd530d1-cdad-4cfe-8a1a-ae1570f34556",
                  "parentUUID": "9cfc0757-3067-41ff-8955-4011fcc3ee51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccd65851-3de1-4e21-a061-0b7c7d6cf5a4",
                "6fd530d1-cdad-4cfe-8a1a-ae1570f34556"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "559abca9-0011-4922-aa6d-6facbfdf464b",
            "0b233ed3-0d72-4c6d-9fae-bf9ecb275422",
            "bbf8142c-9039-44ec-9a70-ae6dbd403fa8",
            "662a5cbf-ddc1-43c7-9073-3448820d8e80"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 349,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
          "title": "derive/outputs",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\outputs.js",
          "file": "\\test\\derive\\outputs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stack",
              "fullTitle": "derive/outputs stack",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    })\n  ]),\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid3',\n    uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n  })\n])\ndelete setup.outputs.stack.entropyBits\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  }),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "96b46013-bbcf-42bb-b814-964fd7a12c3f",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "hmacsha1",
              "fullTitle": "derive/outputs hmacsha1",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.outputs.should.not.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "d1882bb0-f03a-4c37-9489-732e3530ed21",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uuid",
              "fullTitle": "derive/outputs uuid",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "ce832de5-0980-483c-8d33-ac69e6382507",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "question",
              "fullTitle": "derive/outputs question",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.outputs.question.strength.calc_time = null\nderive.outputs.question.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "3be52e0e-1248-4e9b-8e2e-c09baf652c10",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ooba",
              "fullTitle": "derive/outputs ooba",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "0c71c608-c72d-45ec-a883-dd8595c03f25",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password",
              "fullTitle": "derive/outputs password",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.outputs.password.strength.calc_time = null\nderive.outputs.password.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "e7e684f3-3089-4a9b-9777-f737cc4bfc21",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple",
              "fullTitle": "derive/outputs multiple",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nderive.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})",
              "err": {},
              "uuid": "b4a4059b-2f10-420e-8290-f859289b02ce",
              "parentUUID": "8e2cd8a4-b0e7-4ff0-810b-a091f1099b61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96b46013-bbcf-42bb-b814-964fd7a12c3f",
            "d1882bb0-f03a-4c37-9489-732e3530ed21",
            "ce832de5-0980-483c-8d33-ac69e6382507",
            "3be52e0e-1248-4e9b-8e2e-c09baf652c10",
            "0c71c608-c72d-45ec-a883-dd8595c03f25",
            "e7e684f3-3089-4a9b-9777-f737cc4bfc21",
            "b4a4059b-2f10-420e-8290-f859289b02ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "635f61c4-be0d-422a-8a91-f28f1e5b8b37",
          "title": "examples",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "0eb1fe40-b4b7-4b39-98f8-95634ca89d8e",
              "parentUUID": "635f61c4-be0d-422a-8a91-f28f1e5b8b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "ceea3895-d210-4745-ade4-4c4de62230ef",
              "parentUUID": "635f61c4-be0d-422a-8a91-f28f1e5b8b37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    }),\n    await mfkdf.setup.factors.password('password2', {\n      id: 'password2'\n    })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "44834d39-9294-462e-a4e1-a9e957318b91",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e6fab7be-85a1-4f1b-aaff-d9c46fc16862",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 471,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0e382721-2b2c-4eee-a6ed-4e3d74b702b8",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "6c67eb78-5642-47f5-b113-65f1b6a94851",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac218ff9-81fb-4813-93f2-6ac2c6d2deb3",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ffbe95e7-df56-4108-a199-1c3dddecb22b",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "a418e62a-0e98-4478-93df-09508fdb6ed8",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e2f19e45-e21f-411f-90e3-7da5e354fc11",
                  "parentUUID": "9b16c6ea-60c4-46e0-9227-d00ae24fdfe2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44834d39-9294-462e-a4e1-a9e957318b91",
                "e6fab7be-85a1-4f1b-aaff-d9c46fc16862",
                "0e382721-2b2c-4eee-a6ed-4e3d74b702b8",
                "6c67eb78-5642-47f5-b113-65f1b6a94851",
                "ac218ff9-81fb-4813-93f2-6ac2c6d2deb3",
                "ffbe95e7-df56-4108-a199-1c3dddecb22b",
                "a418e62a-0e98-4478-93df-09508fdb6ed8",
                "e2f19e45-e21f-411f-90e3-7da5e354fc11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 931,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "128ceb8a-5cea-4cb6-b6a9-199bb1c97058",
              "title": "secrets",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(\n  Buffer.from('abcdefghijklmnopqrst'),\n  2,\n  3\n) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "2cde39fa-7c3a-4474-adee-50c943f65a3b",
                  "parentUUID": "128ceb8a-5cea-4cb6-b6a9-199bb1c97058",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cde39fa-7c3a-4474-adee-50c943f65a3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
              "title": "policy",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c17eeb8d-dcde-4516-82d3-ba5aabd712de",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "a209db33-f145-4f8e-93cf-399a75016c94",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordA',\n  'passwordC'\n]) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordB',\n  'passwordC'\n]) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "3c8ab207-11e0-4ff0-b9f7-5d93d99bf0b4",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e5c3514f-8fd0-47f8-8a65-a031d8452f1e",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac8701d5-a103-4b64-809b-009b28de2a04",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "72597835-b6c1-454b-a721-8a27d43d2f9f",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "7d4c062e-bfeb-4a06-ac3a-3e2484161f10",
                  "parentUUID": "12ff00eb-6f04-45e8-a84b-92a21ad5c440",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c17eeb8d-dcde-4516-82d3-ba5aabd712de",
                "a209db33-f145-4f8e-93cf-399a75016c94",
                "3c8ab207-11e0-4ff0-b9f7-5d93d99bf0b4",
                "e5c3514f-8fd0-47f8-8a65-a031d8452f1e",
                "ac8701d5-a103-4b64-809b-009b28de2a04",
                "72597835-b6c1-454b-a721-8a27d43d2f9f",
                "7d4c062e-bfeb-4a06-ac3a-3e2484161f10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 265,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
              "title": "reconstitution",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "75c630b3-772e-44db-ac3f-7b3063ddbab1",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "55418c5d-f51a-49f9-b608-5b648b125d15",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "f68acd74-bd95-49ac-9eb4-42ac810f30f2",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "b6bf570d-46b2-494e-9f4b-7591316cbe58",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "9b217172-343c-47ab-b205-c1974c13bdd6",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "a0b6e4bd-fa8f-4730-9286-8716ef48a858",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ab8c0f86-8b0b-45e8-b596-77269092f5ca",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "d181948a-2ebd-4d25-88b6-2d608b0c84c8",
                  "parentUUID": "1baaea69-adcd-4252-9a83-df88a0e4c1a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75c630b3-772e-44db-ac3f-7b3063ddbab1",
                "55418c5d-f51a-49f9-b608-5b648b125d15",
                "f68acd74-bd95-49ac-9eb4-42ac810f30f2",
                "b6bf570d-46b2-494e-9f4b-7591316cbe58",
                "9b217172-343c-47ab-b205-c1974c13bdd6",
                "a0b6e4bd-fa8f-4730-9286-8716ef48a858",
                "ab8c0f86-8b0b-45e8-b596-77269092f5ca",
                "d181948a-2ebd-4d25-88b6-2d608b0c84c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 374,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8c48e632-4f9e-41c7-a712-380a8d01c638",
              "title": "persistence",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3dd269f0-982a-4126-af81-1aa893e40b96",
                  "parentUUID": "8c48e632-4f9e-41c7-a712-380a8d01c638",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dd269f0-982a-4126-af81-1aa893e40b96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5615c24d-136b-4c2c-a0be-7ed74ddfddc8",
              "title": "crypto",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// get sub-key for \"eth\"\nconst subkey = key.getSubkey('eth')\nsubkey.toString('hex') // -> 97cb…bac5",
                  "err": {},
                  "uuid": "d6ec345b-9830-4afb-b037-4f488024010d",
                  "parentUUID": "5615c24d-136b-4c2c-a0be-7ed74ddfddc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6ec345b-9830-4afb-b037-4f488024010d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0eb1fe40-b4b7-4b39-98f8-95634ca89d8e",
            "ceea3895-d210-4745-ade4-4c4de62230ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2a89e1bf-0ceb-4564-b64d-da0a2f36b818",
          "title": "site",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp({\n        secret: Buffer.from('abcdefghijklmnopqrst')\n      }),\n      await mfkdf.setup.factors.uuid({\n        id: 'recovery',\n        uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n      })\n    ])\n  ).policy\n)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recovery: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "c49ca7cc-82c0-40f2-9a88-b7ff38acce3b",
              "parentUUID": "2a89e1bf-0ceb-4564-b64d-da0a2f36b818",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour')\n    ])\n  ).entropyBits.real\n).should.equal(16)\nMath.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp(),\n      await mfkdf.setup.factors.hmacsha1()\n    ])\n  ).entropyBits.real\n).should.equal(196)",
              "err": {},
              "uuid": "18b59ce6-ddb4-4ed5-b23a-fb88f592f84c",
              "parentUUID": "2a89e1bf-0ceb-4564-b64d-da0a2f36b818",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "2ccb896a-7256-4e89-ba9c-7e9767842788",
              "parentUUID": "2a89e1bf-0ceb-4564-b64d-da0a2f36b818",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('password'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recoveryCode',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2 }\n    )\n  ).policy\n)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recoveryCode: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "d3fa5051-203c-4e18-a592-cef8eac4c996",
              "parentUUID": "2a89e1bf-0ceb-4564-b64d-da0a2f36b818",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c49ca7cc-82c0-40f2-9a88-b7ff38acce3b",
            "18b59ce6-ddb4-4ed5-b23a-fb88f592f84c",
            "2ccb896a-7256-4e89-ba9c-7e9767842788",
            "d3fa5051-203c-4e18-a592-cef8eac4c996"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 492,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
          "title": "tutorials",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\nsetup.key.toString('hex') // -> 6458…dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "7b9e6b64-e67a-43c2-86fe-9b6de95feaa9",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// reconstitute key to change password\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword')\n)\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771",
              "err": {},
              "uuid": "1b90e29b-79c0-4eba-b5a7-f4f9d85715d8",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack([\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ]),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\nsetup.key.toString('hex') // -> 01d0…2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "887ffa1f-f88c-40ea-890c-d80943a6d707",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d2…5771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d2…5771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "55b7b730-9f48-4548-8539-f2001a0a2cca",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.key.toString('hex') // -> 34d2…5771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "4d7605aa-e150-4c1c-8196-d256f7ea1086",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n])\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n])\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n])\nconst threshold = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n    await mfkdf.setup.factors.uuid(),\n    await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "0273eec5-03e9-456c-a26f-e5301c2330ef",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "66c5ac0b-581b-4d83-9132-c5f505b35509",
              "parentUUID": "54986b74-b2d0-4c57-992f-9e2b85ab9625",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b9e6b64-e67a-43c2-86fe-9b6de95feaa9",
            "1b90e29b-79c0-4eba-b5a7-f4f9d85715d8",
            "887ffa1f-f88c-40ea-890c-d80943a6d707",
            "55b7b730-9f48-4548-8539-f2001a0a2cca",
            "4d7605aa-e150-4c1c-8196-d256f7ea1086",
            "0273eec5-03e9-456c-a26f-e5301c2330ef",
            "66c5ac0b-581b-4d83-9132-c5f505b35509"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 418,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "45e182ba-2dd3-431a-bbf5-542e14ac9a5f",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key).update(challenge).digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "498a0148-4e82-4a17-b122-26698166d433",
              "parentUUID": "45e182ba-2dd3-431a-bbf5-542e14ac9a5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response1 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(\n  derive1.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response2 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "5a2a9a10-30c8-46f7-a4c5-67d0cb7f8e11",
              "parentUUID": "45e182ba-2dd3-431a-bbf5-542e14ac9a5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.equal(\n    '2747ebf65219aee6630a758e40fd05ccbb39ab465745ea1c9a6c5adb6673d2d3'\n  )",
              "err": {},
              "uuid": "ab5cc61b-914d-4e1f-b71e-81b9caea3f67",
              "parentUUID": "45e182ba-2dd3-431a-bbf5-542e14ac9a5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "wrong-salt",
              "fullTitle": "factors/hmacsha1 wrong-salt",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PlS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nconst setup2 =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive2 = await mfkdf.derive.key(\n  JSON.parse(setup2),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.not.equal(\n    '64393334663330303639356134323533393937376561636234363262373662316562616564393838663531393337303563666432633265373130636663666230'\n  )\nderive.key.toString('hex').should.not.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "82740220-4fb7-4709-bdc3-967b8abe4272",
              "parentUUID": "45e182ba-2dd3-431a-bbf5-542e14ac9a5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0251c038-7e75-474a-a253-7049770b5779",
                  "parentUUID": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f89b968e-4880-4827-84a5-9b86069a2f91",
                  "parentUUID": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3efb5819-14d0-4b26-b82f-91f79ae97e0a",
                  "parentUUID": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: Buffer.from('12345') })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1f0b74c8-c029-4d3d-871f-a2ac3465a550",
                  "parentUUID": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "1c9f9661-af8b-452a-b7c0-1b1c0c073d8c",
                  "parentUUID": "950bad32-8fac-41b7-9b41-6a8c7a2e2fe1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0251c038-7e75-474a-a253-7049770b5779",
                "f89b968e-4880-4827-84a5-9b86069a2f91",
                "3efb5819-14d0-4b26-b82f-91f79ae97e0a",
                "1f0b74c8-c029-4d3d-871f-a2ac3465a550",
                "1c9f9661-af8b-452a-b7c0-1b1c0c073d8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "498a0148-4e82-4a17-b122-26698166d433",
            "5a2a9a10-30c8-46f7-a4c5-67d0cb7f8e11",
            "ab5cc61b-914d-4e1f-b71e-81b9caea3f67",
            "82740220-4fb7-4709-bdc3-967b8abe4272"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c3bda7f0-b056-4537-ac5a-a912492cd27f",
          "title": "factors/hotp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/hotp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "ff326086-cf91-442b-9d73-67511cbb1f2a",
              "parentUUID": "c3bda7f0-b056-4537-ac5a-a912492cd27f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(361687)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(979122)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "7601fadf-a6e0-4133-bd97-c91665f5eb55",
              "parentUUID": "c3bda7f0-b056-4537-ac5a-a912492cd27f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.hotp()])",
              "err": {},
              "uuid": "248a2932-f9b1-437a-95d8-b6cd3c05b26d",
              "parentUUID": "c3bda7f0-b056-4537-ac5a-a912492cd27f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "86cfd36b-1ebf-4e2b-bba9-508651e47cdb",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b448cd36-5497-46ac-9b75-c4c4bc617c78",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3de7ad58-9698-4932-8f1a-7645b16feff8",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "5202ab95-358e-4252-b801-384dbe010dd5",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1075e11c-4741-4e83-87da-addd7b56b276",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "dd9010a4-3f15-4852-b3f7-74a6121bf1c0",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "553b74f3-3581-47f4-b822-5315bbaf362b",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "aac7aafd-d068-489a-ae99-7ce9b05795cf",
                  "parentUUID": "c98ea0d8-0168-447d-a666-e9b8afa97aed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86cfd36b-1ebf-4e2b-bba9-508651e47cdb",
                "b448cd36-5497-46ac-9b75-c4c4bc617c78",
                "3de7ad58-9698-4932-8f1a-7645b16feff8",
                "5202ab95-358e-4252-b801-384dbe010dd5",
                "1075e11c-4741-4e83-87da-addd7b56b276",
                "dd9010a4-3f15-4852-b3f7-74a6121bf1c0",
                "553b74f3-3581-47f4-b822-5315bbaf362b",
                "aac7aafd-d068-489a-ae99-7ce9b05795cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "ff326086-cf91-442b-9d73-67511cbb1f2a",
            "7601fadf-a6e0-4133-bd97-c91665f5eb55",
            "248a2932-f9b1-437a-95d8-b6cd3c05b26d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bdbad9cf-a22b-459b-b7d1-3af286d48af8",
          "title": "factors/ooba",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "1cff3622-3008-457f-a2dd-ce1aee7a06ec",
              "parentUUID": "bdbad9cf-a22b-459b-b7d1-3af286d48af8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "728934f3-4d6c-4fe1-b4ca-59c5ed02739e",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "4b7c2ec1-4bbf-4973-98dd-3010c8e17982",
                  "parentUUID": "728934f3-4d6c-4fe1-b4ca-59c5ed02739e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nawait mfkdf.setup.factors\n  .ooba({\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 'foo'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 0\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 100\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: '12345'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: keyPair.publicKey,\n    params: '12345'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9c94a5e1-3278-4410-94d6-ffd9f73bffc4",
                  "parentUUID": "728934f3-4d6c-4fe1-b4ca-59c5ed02739e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b7c2ec1-4bbf-4973-98dd-3010c8e17982",
                "9c94a5e1-3278-4410-94d6-ffd9f73bffc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "1cff3622-3008-457f-a2dd-ce1aee7a06ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e10efb0f-d5c2-40ce-88e4-889d29b5926b",
          "title": "persistence",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "bd7287b8-177c-4a1e-878a-42a7df36c0e6",
              "parentUUID": "e10efb0f-d5c2-40ce-88e4-889d29b5926b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "baa6ed30-65d7-448c-aeab-96d5d5e46908",
              "parentUUID": "e10efb0f-d5c2-40ce-88e4-889d29b5926b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd7287b8-177c-4a1e-878a-42a7df36c0e6",
            "baa6ed30-65d7-448c-aeab-96d5d5e46908"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b9d7cf8e-66ce-4798-aa73-aff3ab19cc69",
          "title": "factors/question",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "a4ceb5df-fb2f-463f-973d-1798e8a33222",
              "parentUUID": "b9d7cf8e-66ce-4798-aa73-aff3ab19cc69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    question: mfkdf.derive.factors.question('Rex')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "6dc805ec-17e5-4a99-8c07-441fbe61a553",
              "parentUUID": "b9d7cf8e-66ce-4798-aa73-aff3ab19cc69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "11aec554-0946-4a07-bea1-66203fa6c79a",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "3510eb58-a155-4282-9a08-d9991b46fae3",
                  "parentUUID": "11aec554-0946-4a07-bea1-66203fa6c79a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .question(12345)\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { question: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "02010d8d-d38d-4857-a409-df40e063957b",
                  "parentUUID": "11aec554-0946-4a07-bea1-66203fa6c79a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3510eb58-a155-4282-9a08-d9991b46fae3",
                "02010d8d-d38d-4857-a409-df40e063957b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a4ceb5df-fb2f-463f-973d-1798e8a33222",
            "6dc805ec-17e5-4a99-8c07-441fbe61a553"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 85,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "cb6cc126-1e45-41fb-871b-e4f0a3cd8d52",
          "title": "factors/stack",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: 12345 }\n  )\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "6d593b6b-05d6-40c9-a2a4-f74d12c5351f",
              "parentUUID": "cb6cc126-1e45-41fb-871b-e4f0a3cd8d52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: '' }\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d14a7812-b736-484e-971c-273f1fc61c6e",
              "parentUUID": "cb6cc126-1e45-41fb-871b-e4f0a3cd8d52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ],\n      { id: 'stack1' }\n    ),\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        })\n      ],\n      { id: 'stack2' }\n    )\n  ],\n  { threshold: 1 }\n)\nsetup.policy.factors[0].params.should.not.have.property('hmac')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "eb6e6ea9-6ded-4d84-bb8a-aefdbb21f92c",
              "parentUUID": "cb6cc126-1e45-41fb-871b-e4f0a3cd8d52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d593b6b-05d6-40c9-a2a4-f74d12c5351f",
            "d14a7812-b736-484e-971c-273f1fc61c6e",
            "eb6e6ea9-6ded-4d84-bb8a-aefdbb21f92c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 77,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ef09efe-3d96-428d-849c-1d15367d870b",
          "title": "factors/totp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/totp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "2e245ba3-23fc-4faa-a643-64533ee7bfd7",
              "parentUUID": "9ef09efe-3d96-428d-849c-1d15367d870b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "7b0e7af8-5e7a-423c-8c1b-a1c732b8ce53",
              "parentUUID": "9ef09efe-3d96-428d-849c-1d15367d870b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "4aa7e784-7030-4dd0-a95d-ffe3bb7a8aa8",
              "parentUUID": "9ef09efe-3d96-428d-849c-1d15367d870b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.totp()])",
              "err": {},
              "uuid": "82a9039a-3664-4806-ad71-2ed7fe01ba18",
              "parentUUID": "9ef09efe-3d96-428d-849c-1d15367d870b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "00f27c34-54d6-4250-ba1e-9c6fa07363e8",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597\n  })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    totp: mfkdf.derive.factors.totp(953265, { time: 1750430943604 })\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0af07d4d-267d-4342-946a-4bb7b267766f",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "cce22eef-024f-4f2a-80b3-5a562e7ccad1",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "e70c3bc0-27cc-45ed-ae98-b7b46e262f06",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8ac3f5c7-c6b4-44c5-bd73-e6b3c447cb0b",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1a13a9f9-23f2-4e4a-8fd5-6537f49d81a1",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8b0c15bb-a8aa-4e94-a773-e691951c6328",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "66a7b06e-52e7-4f86-8146-84eefa8a9ab5",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "207b4b8b-e09b-4486-9d55-e8e0475d4e51",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0db16669-620d-4abd-98f3-c147f325abd5",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "75be7d38-4222-4699-bd72-afe94cdfbba5",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c5a75516-d200-4967-8253-961f6f23cdf9",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f43e393d-151f-4567-ad4c-64828db6e0f5",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3317fbfa-bd7d-4e14-883c-a6969fdafb4f",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "902042b8-0383-4bfc-ac9b-959c444e1806",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d8b97a4b-20fb-4d7c-a85d-1d3b52bc8d3b",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a3ae3178-bb4e-45cd-ba6d-1626f218b8c6",
                  "parentUUID": "bd2d5154-1ef3-4ee9-983d-c6838d3a625a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00f27c34-54d6-4250-ba1e-9c6fa07363e8",
                "0af07d4d-267d-4342-946a-4bb7b267766f",
                "cce22eef-024f-4f2a-80b3-5a562e7ccad1",
                "e70c3bc0-27cc-45ed-ae98-b7b46e262f06",
                "8ac3f5c7-c6b4-44c5-bd73-e6b3c447cb0b",
                "1a13a9f9-23f2-4e4a-8fd5-6537f49d81a1",
                "8b0c15bb-a8aa-4e94-a773-e691951c6328",
                "66a7b06e-52e7-4f86-8146-84eefa8a9ab5",
                "207b4b8b-e09b-4486-9d55-e8e0475d4e51",
                "0db16669-620d-4abd-98f3-c147f325abd5",
                "75be7d38-4222-4699-bd72-afe94cdfbba5",
                "c5a75516-d200-4967-8253-961f6f23cdf9",
                "f43e393d-151f-4567-ad4c-64828db6e0f5",
                "3317fbfa-bd7d-4e14-883c-a6969fdafb4f",
                "902042b8-0383-4bfc-ac9b-959c444e1806",
                "d8b97a4b-20fb-4d7c-a85d-1d3b52bc8d3b",
                "a3ae3178-bb4e-45cd-ba6d-1626f218b8c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 359,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "2e245ba3-23fc-4faa-a643-64533ee7bfd7",
            "7b0e7af8-5e7a-423c-8c1b-a1c732b8ce53",
            "4aa7e784-7030-4dd0-a95d-ffe3bb7a8aa8",
            "82a9039a-3664-4806-ad71-2ed7fe01ba18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "82067c03-592e-437e-a00a-43485df7529e",
          "title": "factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "0ec2670a-649d-4502-96da-f9b0d5422822",
              "parentUUID": "82067c03-592e-437e-a00a-43485df7529e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c'\n    )\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d'\n    )\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    )\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "1646f426-f888-4c90-a415-de67bb0330a7",
              "parentUUID": "82067c03-592e-437e-a00a-43485df7529e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ec2670a-649d-4502-96da-f9b0d5422822",
            "1646f426-f888-4c90-a415-de67bb0330a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 238,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "828964fa-582a-41eb-8a5a-486691c641c3",
          "title": "entropy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "a16e726c-0e33-43e4-8218-6a55b3dd1afd",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "2e544e17-1e8c-4b52-a89e-7d6c2fdcd5b5",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "f8962623-d5bb-4d8b-880a-8f8dc41bed89",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "f3b60532-a390-40e7-8fa4-0ce0a7841d41",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "42ba4310-ebc1-4626-bc0a-c0f6715eee0b",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "4f394c19-16c0-4268-87ae-d0fb45d9541b",
              "parentUUID": "828964fa-582a-41eb-8a5a-486691c641c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a16e726c-0e33-43e4-8218-6a55b3dd1afd",
            "2e544e17-1e8c-4b52-a89e-7d6c2fdcd5b5",
            "f8962623-d5bb-4d8b-880a-8f8dc41bed89",
            "f3b60532-a390-40e7-8fa4-0ce0a7841d41",
            "42ba4310-ebc1-4626-bc0a-c0f6715eee0b",
            "4f394c19-16c0-4268-87ae-d0fb45d9541b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 797,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
          "title": "integrity",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\integrity.js",
          "file": "\\test\\features\\integrity.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "disabled",
              "fullTitle": "integrity disabled",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  false\n)",
              "err": {},
              "uuid": "0cbf19a7-8f9a-4042-a274-7988de961ec4",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "integrity safety",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "33dc700a-f126-4743-82e3-09afd482a901",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "liveness",
              "fullTitle": "integrity liveness",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)",
              "err": {},
              "uuid": "632d5d1c-d466-4dac-bdf5-0eb548644901",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "$id",
              "fullTitle": "integrity $id",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.$id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "b8764841-68dc-4f62-9ef2-dcfb15583984",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "threshold",
              "fullTitle": "integrity threshold",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.threshold += 1\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "f321d281-6a39-415d-bdb9-2365f64fb783",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "salt",
              "fullTitle": "integrity salt",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.salt = 'Ny9+L9LQHOKh1x3Acqy7pMb9JaEIfNfxU/TsDON+Ht4='\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "efa93fee-dff6-40c8-b57d-9f015e5d6d81",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "factor/id",
              "fullTitle": "integrity factor/id",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "07af1cdf-06b3-4356-9ff1-abda5732b99b",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "derive",
              "fullTitle": "integrity derive",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nderive.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    derive.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8bcf0ce3-20e5-4d4c-8a0b-5c8acc883251",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitution",
              "fullTitle": "integrity reconstitution",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: true }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('differentPassword3')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "054b2b33-4ded-4d90-9c2a-0c8f614982f7",
              "parentUUID": "5706bcf2-d8ef-4656-8b4b-0602f3c0f120",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0cbf19a7-8f9a-4042-a274-7988de961ec4",
            "33dc700a-f126-4743-82e3-09afd482a901",
            "632d5d1c-d466-4dac-bdf5-0eb548644901",
            "b8764841-68dc-4f62-9ef2-dcfb15583984",
            "f321d281-6a39-415d-bdb9-2365f64fb783",
            "efa93fee-dff6-40c8-b57d-9f015e5d6d81",
            "07af1cdf-06b3-4356-9ff1-abda5732b99b",
            "8bcf0ce3-20e5-4d4c-8a0b-5c8acc883251",
            "054b2b33-4ded-4d90-9c2a-0c8f614982f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4925f288-bbce-45bd-a209-ae8485687bee",
          "title": "policy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ae8999f-a9cd-4022-90a5-c6ae6ae0e58b",
              "title": "validate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "70e5554e-0dd4-45f7-a52c-3d12e41e71bb",
                  "parentUUID": "9ae8999f-a9cd-4022-90a5-c6ae6ae0e58b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.policy\n  .setup(\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password2'\n        })\n      )\n    )\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8437163a-63ba-4234-976b-5b86a98a0752",
                  "parentUUID": "9ae8999f-a9cd-4022-90a5-c6ae6ae0e58b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70e5554e-0dd4-45f7-a52c-3d12e41e71bb",
                "8437163a-63ba-4234-976b-5b86a98a0752"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "359b2e4e-6105-4780-bf69-bc9d39de7265",
              "title": "evaluate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .true",
                  "err": {},
                  "uuid": "ef31614f-8b5b-4092-9f2d-1305504d1018",
                  "parentUUID": "359b2e4e-6105-4780-bf69-bc9d39de7265",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .false",
                  "err": {},
                  "uuid": "5e65493b-ab5a-4e05-bfec-abbd259bf380",
                  "parentUUID": "359b2e4e-6105-4780-bf69-bc9d39de7265",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef31614f-8b5b-4092-9f2d-1305504d1018",
                "5e65493b-ab5a-4e05-bfec-abbd259bf380"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "70776392-296d-41b3-8324-12f873daefbd",
              "title": "derive",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "8b93c7c7-41ed-4d7e-a6fd-ca11da22cb1b",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "0dcdd318-833d-4b6d-b1eb-69fa6ea4a15a",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "3fd4bc57-135f-4c83-91ff-632c31a47a68",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b46185be-c87e-496d-88aa-1c55b533c4a7",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "fe649588-1c09-4e21-9109-8f9e488467fe",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "114bfba3-9ea8-4a13-8bb3-3c7b401e0ec4",
                  "parentUUID": "70776392-296d-41b3-8324-12f873daefbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b93c7c7-41ed-4d7e-a6fd-ca11da22cb1b",
                "0dcdd318-833d-4b6d-b1eb-69fa6ea4a15a",
                "3fd4bc57-135f-4c83-91ff-632c31a47a68",
                "b46185be-c87e-496d-88aa-1c55b533c4a7",
                "fe649588-1c09-4e21-9109-8f9e488467fe",
                "114bfba3-9ea8-4a13-8bb3-3c7b401e0ec4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 477,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0ee067dc-9056-4bfe-8a37-e8cbe80bb00c",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n])\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4'),\n    password6: mfkdf.derive.factors.password('password6')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "89abba36-8a93-426e-bcbc-e8adf230c484",
                  "parentUUID": "0ee067dc-9056-4bfe-8a37-e8cbe80bb00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "25514fe5-3b1c-4ff3-a1ac-04b2f21c1208",
                  "parentUUID": "0ee067dc-9056-4bfe-8a37-e8cbe80bb00c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89abba36-8a93-426e-bcbc-e8adf230c484",
                "25514fe5-3b1c-4ff3-a1ac-04b2f21c1208"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
          "title": "reconstitution",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 3, integrity: false }\n)\nconst key = setup.key.toString('hex')\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "5b784665-26ca-4817-bf82-afa4654f7f39",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)\nawait derive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "e76a6d63-3507-4ee6-a25e-90c7904ca3f9",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "42c7dca1-0c7b-4c03-af9c-e6570ffa398a",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "086fd6ad-622a-4ff3-9b21-9a2aa6d80f1f",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "a0d69975-5648-4aad-b9d7-d4f3c3ecc4f5",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "ff78ceb7-f6f0-495c-a906-82f032f4ae74",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "a509971a-a80e-474b-8bce-635c802e6b22",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(\n  ['password1'],\n  [\n    await mfkdf.setup.factors.password('otherPassword2', {\n      id: 'password2'\n    })\n  ],\n  2\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "8eae0aca-5ce1-4828-b06e-b1807166e338",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "ec08b4bc-79e4-4db1-8e9a-2f3349368d1b",
              "parentUUID": "772449de-7ef4-4fd6-ae5d-418b1c927e6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "fd75de22-e348-4d98-8510-c9a374ff491b",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [12345],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "928c4c91-181a-432b-918b-bef2646bc79d",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    ['password4'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2920adf5-a1d6-48c2-83ee-d8a6b45e5e3f",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait setup\n  .reconstitute(\n    ['password3'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      }),\n      await mfkdf.setup.factors.password('diffPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "da281daa-da5c-4b59-b794-f4b1b91ce62a",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    'hello',\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7b736724-3304-4c64-b06c-6c7da101ac8d",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], '12345', 2)\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9e72af55-dd04-4a09-a168-d91920248e7b",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], [], '12345')\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "affc393c-4e95-4900-9663-3d95d5f2464d",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "bc8ded13-980d-4033-9723-cdf457a31dd0",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 12345,\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "12d62de7-6c3d-4a2b-9ba4-3e33f69868bc",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: '',\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0eab520f-5f4e-4473-9613-bd9837bc3e43",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 12345,\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e5a68a7a-ed31-4fb6-bf15-ec85eee69c99",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: '',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6194e8d4-2d96-435a-a9cd-b866c0799360",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: 12345,\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "900bddbb-c7b6-4779-9fef-9995cb189314",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from(''),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "44de7590-5771-4419-92ec-252c968bb9c8",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: 12345,\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "38cef8e7-85b6-44a3-8966-6e4cddc8a913",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: async () => {\n          return {}\n        },\n        output: 12345\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "feef236c-b2eb-4883-92c1-3d9a08d063c8",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "daeda17b-6fc2-48d5-8d98-254e651804a3",
                  "parentUUID": "fd75de22-e348-4d98-8510-c9a374ff491b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "928c4c91-181a-432b-918b-bef2646bc79d",
                "2920adf5-a1d6-48c2-83ee-d8a6b45e5e3f",
                "da281daa-da5c-4b59-b794-f4b1b91ce62a",
                "7b736724-3304-4c64-b06c-6c7da101ac8d",
                "9e72af55-dd04-4a09-a168-d91920248e7b",
                "affc393c-4e95-4900-9663-3d95d5f2464d",
                "bc8ded13-980d-4033-9723-cdf457a31dd0",
                "12d62de7-6c3d-4a2b-9ba4-3e33f69868bc",
                "0eab520f-5f4e-4473-9613-bd9837bc3e43",
                "e5a68a7a-ed31-4fb6-bf15-ec85eee69c99",
                "6194e8d4-2d96-435a-a9cd-b866c0799360",
                "900bddbb-c7b6-4779-9fef-9995cb189314",
                "44de7590-5771-4419-92ec-252c968bb9c8",
                "38cef8e7-85b6-44a3-8966-6e4cddc8a913",
                "feef236c-b2eb-4883-92c1-3d9a08d063c8",
                "daeda17b-6fc2-48d5-8d98-254e651804a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "5b784665-26ca-4817-bf82-afa4654f7f39",
            "e76a6d63-3507-4ee6-a25e-90c7904ca3f9",
            "42c7dca1-0c7b-4c03-af9c-e6570ffa398a",
            "086fd6ad-622a-4ff3-9b21-9a2aa6d80f1f",
            "a0d69975-5648-4aad-b9d7-d4f3c3ecc4f5",
            "ff78ceb7-f6f0-495c-a906-82f032f4ae74",
            "a509971a-a80e-474b-8bce-635c802e6b22",
            "8eae0aca-5ce1-4828-b06e-b1807166e338",
            "ec08b4bc-79e4-4db1-8e9a-2f3349368d1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 564,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dc16f5f7-6311-4793-835c-f74897adb882",
          "title": "stage",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\stage.js",
          "file": "\\test\\features\\stage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "basic",
              "fullTitle": "stage basic",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password')\n)\nconst setup = await mfkdf.setup.key([passwordSetup])\nconst passwordDerive = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: passwordDerive\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "162da05f-3d86-4e05-9557-3a0acb7a74e9",
              "parentUUID": "dc16f5f7-6311-4793-835c-f74897adb882",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "full",
              "fullTitle": "stage full",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst init = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password'),\n  init.key\n)\nconst hmacsha1Setup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hmacsha1(),\n  init.key\n)\nconst hotpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hotp({ secret: Buffer.from('abcdefghijklmnopqrst') }),\n  init.key\n)\nconst oobaSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.ooba({ key: keyPair.publicKey, params: {} }),\n  init.key\n)\nconst questionSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.question('fido'),\n  init.key\n)\nconst totpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  }),\n  init.key\n)\nconst uuidSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  }),\n  init.key\n)\nconst setup = await mfkdf.setup.key([\n  passwordSetup,\n  hmacsha1Setup,\n  hotpSetup,\n  oobaSetup,\n  questionSetup,\n  totpSetup,\n  uuidSetup\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[1].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst next = setup.policy.factors[3].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst json = JSON.parse(Buffer.from(decrypted).toString())\nconst code = json.code\nconst password = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params,\n  setup.key\n)\nconst hmacsha1 = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hmacsha1(response),\n  setup.policy.factors[1].params,\n  setup.key\n)\nconst hotp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hotp(241063),\n  setup.policy.factors[2].params,\n  setup.key\n)\nconst ooba = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.ooba(code),\n  setup.policy.factors[3].params,\n  setup.key\n)\nconst question = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.question('fido'),\n  setup.policy.factors[4].params,\n  setup.key\n)\nconst totp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.totp(953265, { time: 1 }),\n  setup.policy.factors[5].params,\n  setup.key\n)\nconst uuid = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  setup.policy.factors[6].params,\n  setup.key\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password,\n  hmacsha1,\n  hotp,\n  ooba,\n  question,\n  totp,\n  uuid\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "b8fca48f-ed36-45e1-82d5-a6dd18d0a60f",
              "parentUUID": "dc16f5f7-6311-4793-835c-f74897adb882",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "162da05f-3d86-4e05-9557-3a0acb7a74e9",
            "b8fca48f-ed36-45e1-82d5-a6dd18d0a60f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 565,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c12560bd-0587-4f03-b2e4-a462c629056e",
          "title": "mfkdf2/changes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
          "file": "\\test\\mfkdf2\\changes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "981a6afd-01ff-4888-a485-c98225fef620",
              "title": "key-size-256",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes key-size-256 default",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "c32c996c-24c7-407b-a36a-a4ef4a264b7c",
                  "parentUUID": "981a6afd-01ff-4888-a485-c98225fef620",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override",
                  "fullTitle": "mfkdf2/changes key-size-256 override",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "fef82e04-1494-4a4d-85d5-f7ffd3e3c1ec",
                  "parentUUID": "981a6afd-01ff-4888-a485-c98225fef620",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c32c996c-24c7-407b-a36a-a4ef4a264b7c",
                "fef82e04-1494-4a4d-85d5-f7ffd3e3c1ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4d19ca05-00d3-4544-ac02-de6597a0d6e1",
              "title": "kdf-argon2id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes kdf-argon2id default",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "35a74ef6-3ba4-46dc-85fd-523b9da8a5bc",
                  "parentUUID": "4d19ca05-00d3-4544-ac02-de6597a0d6e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/time",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/time",
                  "timedOut": false,
                  "duration": 147,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.time = 4\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "76658254-f34f-4ce7-8c81-7a4982310c41",
                  "parentUUID": "4d19ca05-00d3-4544-ac02-de6597a0d6e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/memory",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/memory",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 1024 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.memory = 2048\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b0dc922d-0262-4d53-9364-b3b555a860c5",
                  "parentUUID": "4d19ca05-00d3-4544-ac02-de6597a0d6e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/matching",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/matching",
                  "timedOut": false,
                  "duration": 427,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 65536, time: 3 }\n)\nsetup.policy.memory.should.equal(65536)\nsetup.policy.time.should.equal(3)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "524d78a8-1d11-403d-bb40-7bcab97fd74e",
                  "parentUUID": "4d19ca05-00d3-4544-ac02-de6597a0d6e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35a74ef6-3ba4-46dc-85fd-523b9da8a5bc",
                "76658254-f34f-4ce7-8c81-7a4982310c41",
                "b0dc922d-0262-4d53-9364-b3b555a860c5",
                "524d78a8-1d11-403d-bb40-7bcab97fd74e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 693,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "13826186-e151-4ff9-b5ab-d7439d2c5eea",
              "title": "encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "aes-256-ecb",
                  "fullTitle": "mfkdf2/changes encryption aes-256-ecb",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stretched = await crypto.randomBytes(32)\nconst share = await crypto.randomBytes(32)\nconst cipher = crypto.createCipheriv('AES-256-ECB', stretched, null)\ncipher.setAutoPadding(false)\nconst pad = Buffer.concat([cipher.update(share), cipher.final()])\nconst decipher = crypto.createDecipheriv('AES-256-ECB', stretched, null)\ndecipher.setAutoPadding(false)\nconst share2 = Buffer.concat([decipher.update(pad), decipher.final()])\nshare2.toString('hex').should.equal(share.toString('hex'))",
                  "err": {},
                  "uuid": "7f02d4dd-1fe2-4764-98c9-0d8d49b1a76d",
                  "parentUUID": "13826186-e151-4ff9-b5ab-d7439d2c5eea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f02d4dd-1fe2-4764-98c9-0d8d49b1a76d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1f4d8dc1-b487-469b-8d52-2ca96b40811f",
          "title": "mfkdf2/hints",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\hints.js",
          "file": "\\test\\mfkdf2\\hints.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getHint",
              "fullTitle": "mfkdf2/hints getHint",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst hint = setup.getHint('password1', 7)\nhint.should.be.a('string')\nhint.length.should.equal(7)\nconst hinta = setup.getHint('password1', 24)\nhinta.should.be.a('string')\nhinta.length.should.equal(24)\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderived.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst hint2 = derived.getHint('password1', 7)\nhint2.should.equal(hint)\nconst hinta2 = derived.getHint('password1', 24)\nhinta2.should.equal(hinta)\nconst derived2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('wrongpassword')\n  },\n  false\n)\nconst hinta3 = derived2.getHint('password1', 24)\nhinta3.should.not.equal(hinta)",
              "err": {},
              "uuid": "15e34a35-f600-4350-9ee9-4131ff05e192",
              "parentUUID": "1f4d8dc1-b487-469b-8d52-2ca96b40811f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addHint",
              "fullTitle": "mfkdf2/hints addHint",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nsetup.addHint('password1')\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(7)\nsetup.addHint('password1', 24)\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(24)\nawait mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "839350fa-81b8-450b-9ecc-033d91228dc3",
              "parentUUID": "1f4d8dc1-b487-469b-8d52-2ca96b40811f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/hints coverage",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n);\n(() => setup.getHint()).should.throw(TypeError);\n(() => setup.getHint(123)).should.throw(TypeError);\n(() => setup.getHint('unknown')).should.throw(RangeError);\n(() => setup.getHint('password1', 'string')).should.throw(TypeError);\n(() => setup.getHint('password1', 0)).should.throw(TypeError);\n(() => setup.getHint('password1', 300)).should.throw(TypeError)",
              "err": {},
              "uuid": "8fdb8704-eb61-4518-8829-b6c7be496c69",
              "parentUUID": "1f4d8dc1-b487-469b-8d52-2ca96b40811f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15e34a35-f600-4350-9ee9-4131ff05e192",
            "839350fa-81b8-450b-9ecc-033d91228dc3",
            "8fdb8704-eb61-4518-8829-b6c7be496c69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ffcdc018-f6dd-4d20-bf8f-402102192ad5",
          "title": "mfkdf2/mfdpg2",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
          "file": "\\test\\mfkdf2\\mfdpg.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a148e5c-40a8-4ed5-bbe2-544748c59dcd",
              "title": "basics",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "portability",
                  "fullTitle": "mfkdf2/mfdpg2 basics portability",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11);\n/[a-zA-Z]{6,10}/.test(password).should.be.true\nconst password2 = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst password3 = derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password3)",
                  "err": {},
                  "uuid": "977fd062-53a1-4ce8-9789-2f1a09c11415",
                  "parentUUID": "8a148e5c-40a8-4ed5-bbe2-544748c59dcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-example",
                  "fullTitle": "mfkdf2/mfdpg2 basics full-example",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst policy = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\npassword1.should.equal(password3)",
                  "err": {},
                  "uuid": "11f3f8bf-9c89-4876-b5a7-d810318811dd",
                  "parentUUID": "8a148e5c-40a8-4ed5-bbe2-544748c59dcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "977fd062-53a1-4ce8-9789-2f1a09c11415",
                "11f3f8bf-9c89-4876-b5a7-d810318811dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3399e590-3163-4290-af6f-90bb680befda",
              "title": "correctness",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness basic-test",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "dc1b8344-5d4c-4d2d-a3fc-7d8100a46963",
                  "parentUUID": "3399e590-3163-4290-af6f-90bb680befda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness full-test",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "4fcf7986-db2c-46bf-9343-5120e0237fda",
                  "parentUUID": "3399e590-3163-4290-af6f-90bb680befda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc1b8344-5d4c-4d2d-a3fc-7d8100a46963",
                "4fcf7986-db2c-46bf-9343-5120e0237fda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e5ba1ba1-0f1e-49ec-86cc-5eb097744008",
              "title": "safety",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety basic-test",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst setup2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup1.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password2)",
                  "err": {},
                  "uuid": "e8ea40e1-fd3f-4061-ac61-4c7fdac4cc63",
                  "parentUUID": "e5ba1ba1-0f1e-49ec-86cc-5eb097744008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety full-test",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst password3 = await derive2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password3)",
                  "err": {},
                  "uuid": "abd6e4ca-3522-4789-89f6-5ea29f3f7110",
                  "parentUUID": "e5ba1ba1-0f1e-49ec-86cc-5eb097744008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8ea40e1-fd3f-4061-ac61-4c7fdac4cc63",
                "abd6e4ca-3522-4789-89f6-5ea29f3f7110"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d510176c-bb3c-4476-8c25-9ed09195238c",
              "title": "compatibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility basic-policy",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11)",
                  "err": {},
                  "uuid": "37eb28aa-de87-4401-882d-397d3a25fb14",
                  "parentUUID": "d510176c-bb3c-4476-8c25-9ed09195238c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "custom-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility custom-policy",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst regex = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password = await setup.derivePassword('example.com', 'salt', regex)\nregex.test(password).should.be.true",
                  "err": {},
                  "uuid": "1526d112-2767-43b5-805a-48bc0edfb5e0",
                  "parentUUID": "d510176c-bb3c-4476-8c25-9ed09195238c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37eb28aa-de87-4401-882d-397d3a25fb14",
                "1526d112-2767-43b5-805a-48bc0edfb5e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18a01b83-5b29-45f8-8d7b-daa19def88ec",
          "title": "mfkdf2/passkeys",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\passkeys.js",
          "file": "\\test\\mfkdf2\\passkeys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "liveness",
              "fullTitle": "mfkdf2/passkeys liveness",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  passkey: mfkdf.derive.factors.passkey(prf)\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "826b0c36-5490-4bd8-b877-7cb8c6c8ae3d",
              "parentUUID": "18a01b83-5b29-45f8-8d7b-daa19def88ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "mfkdf2/passkeys safety",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst prf2 = await crypto.randomBytes(32)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    passkey: mfkdf.derive.factors.passkey(prf2)\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "c85ca6ab-28ec-461d-933c-85ca04f9c50b",
              "parentUUID": "18a01b83-5b29-45f8-8d7b-daa19def88ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/passkeys coverage",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .passkey('hello')\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: 123 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .passkey(Buffer.from('hello'))\n  .should.be.rejectedWith(RangeError);\n(() => {\n  mfkdf.derive.factors.passkey('hello')\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.passkey(Buffer.from('hello'))\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e47cd5ba-c218-4951-93f5-92d124af44cc",
              "parentUUID": "18a01b83-5b29-45f8-8d7b-daa19def88ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "826b0c36-5490-4bd8-b877-7cb8c6c8ae3d",
            "c85ca6ab-28ec-461d-933c-85ca04f9c50b",
            "e47cd5ba-c218-4951-93f5-92d124af44cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "79cccb0b-7086-42e2-a27d-1bed2577da6e",
          "title": "mfkdf2/security",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
          "file": "\\test\\mfkdf2\\security.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "totp",
              "fullTitle": "mfkdf2/security totp",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
              "err": {},
              "uuid": "b214497d-5420-4ba7-9836-ca639bf05c05",
              "parentUUID": "79cccb0b-7086-42e2-a27d-1bed2577da6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "898d83fb-3b4b-417a-97d3-ed5002373e21",
              "title": "factor-fungibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security factor-fungibility correct",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "5d06aea0-edeb-4b2b-aa56-47a9c943e65c",
                  "parentUUID": "898d83fb-3b4b-417a-97d3-ed5002373e21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "incorrect",
                  "fullTitle": "mfkdf2/security factor-fungibility incorrect",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2'),\n    password2: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "dbd5359e-25f9-46a2-93fa-0ddf7e4c0ab2",
                  "parentUUID": "898d83fb-3b4b-417a-97d3-ed5002373e21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d06aea0-edeb-4b2b-aa56-47a9c943e65c",
                "dbd5359e-25f9-46a2-93fa-0ddf7e4c0ab2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4fc910ee-c116-4c3b-9793-5ee94e05c924",
              "title": "share-indistinguishability",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "share-size",
                  "fullTitle": "mfkdf2/security share-indistinguishability share-size",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret = crypto.randomBytes(32)\nconst shares1 = mfkdf.secrets.share(secret, 1, 3)\nshares1.should.have.length(3)\nfor (const share of shares1) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares1.slice(0, 1).concat([null, null]), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null, null].concat(shares1.slice(2, 3)), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares2 = mfkdf.secrets.share(secret, 2, 3)\nshares2.should.have.length(3)\nfor (const share of shares2) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares2.slice(0, 2).concat([null]), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null].concat(shares2.slice(1, 3)), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares3 = mfkdf.secrets.share(secret, 3, 3)\nshares3.should.have.length(3)\nfor (const share of shares3) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares3.slice(0, 3), 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
                  "err": {},
                  "uuid": "aeea8ca8-341b-4703-80d2-aba416c81897",
                  "parentUUID": "4fc910ee-c116-4c3b-9793-5ee94e05c924",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeea8ca8-341b-4703-80d2-aba416c81897"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "37cb79c2-d1c5-4415-abe3-1e4a9853f1f4",
              "title": "share-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security share-encryption correct",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst materialp1 = await mfkdf.derive.factors.password('password1')(\n  setup.policy.factors[0].params\n)\nconst padp1 = Buffer.from(setup.policy.factors[0].pad, 'base64')\nconst stretchedp1 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp1.data,\n    setup.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep1 = xor(padp1, stretchedp1)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword1', { id: 'password1' })\n)\nconst derive2f = await mfkdf.policy.derive(\n  derive.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive2f.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(derive.policy, {\n  password1: mfkdf.derive.factors.password('newPassword1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst materialp3 = await mfkdf.derive.factors.password('newPassword1')(\n  derive.policy.factors[0].params\n)\nconst padp3 = Buffer.from(derive.policy.factors[0].pad, 'base64')\nconst stretchedp3 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp3.data,\n    derive.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep3 = xor(padp3, stretchedp3)\nawait derive2.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password1' })\n)\nconst derive3 = await mfkdf.policy.derive(derive2.policy, {\n  password1: mfkdf.derive.factors.password('newPassword2'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nsharep1.should.not.equal(sharep3)",
                  "err": {},
                  "uuid": "8024b9ce-1b20-4a9b-a99b-38533d35b6b0",
                  "parentUUID": "37cb79c2-d1c5-4415-abe3-1e4a9853f1f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8024b9ce-1b20-4a9b-a99b-38533d35b6b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1bb3b3e2-d02b-4702-a876-577210e88f99",
              "title": "factor-secret-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "hotp",
                  "fullTitle": "mfkdf2/security factor-secret-encryption hotp",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
                  "err": {},
                  "uuid": "144c1800-f137-4606-8e4f-f3e9c1164c55",
                  "parentUUID": "1bb3b3e2-d02b-4702-a876-577210e88f99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "144c1800-f137-4606-8e4f-f3e9c1164c55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "310be670-fa5d-426e-b952-3560f7f8b6cc",
              "title": "timing-oracle",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "17d4d152-ca43-4e56-a274-959df80bc90d",
                  "title": "totp/dynamic",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic no-oracle",
                      "timedOut": false,
                      "duration": 452,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "535b2b9c-eeaf-4fc1-b998-bb547f5cd410",
                      "parentUUID": "17d4d152-ca43-4e56-a274-959df80bc90d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 527,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "fdaa9025-0575-4612-9c90-7469e07b4751",
                      "parentUUID": "17d4d152-ca43-4e56-a274-959df80bc90d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 562,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "0873984e-c2e2-4595-acee-587fde1fd284",
                      "parentUUID": "17d4d152-ca43-4e56-a274-959df80bc90d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 536,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "d327237c-96b1-4004-a075-1a43d337f933",
                      "parentUUID": "17d4d152-ca43-4e56-a274-959df80bc90d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 566,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "6238980e-116f-4f1b-9006-daf7d9531bbd",
                      "parentUUID": "17d4d152-ca43-4e56-a274-959df80bc90d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "535b2b9c-eeaf-4fc1-b998-bb547f5cd410",
                    "fdaa9025-0575-4612-9c90-7469e07b4751",
                    "0873984e-c2e2-4595-acee-587fde1fd284",
                    "d327237c-96b1-4004-a075-1a43d337f933",
                    "6238980e-116f-4f1b-9006-daf7d9531bbd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2643,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                  "title": "totp/static",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static no-oracle",
                      "timedOut": false,
                      "duration": 549,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "43a31d5b-41a2-4109-a0b1-e9ff4ab929de",
                      "parentUUID": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 533,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "ffd34887-8767-4643-b29c-d8fe27c455a3",
                      "parentUUID": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 562,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "1288b89a-2146-4a09-b68c-36cb5a693afb",
                      "parentUUID": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 484,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "b9df0284-7b92-4eb8-9321-552209aed52f",
                      "parentUUID": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 557,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "a1de18cb-7af4-42d5-b691-11c0cb21744e",
                      "parentUUID": "7b61b924-aa95-42a1-bbf6-3d33eaf16c00",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "43a31d5b-41a2-4109-a0b1-e9ff4ab929de",
                    "ffd34887-8767-4643-b29c-d8fe27c455a3",
                    "1288b89a-2146-4a09-b68c-36cb5a693afb",
                    "b9df0284-7b92-4eb8-9321-552209aed52f",
                    "a1de18cb-7af4-42d5-b691-11c0cb21744e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2685,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "06b492be-32a3-4058-9ac9-741a6a261520",
              "title": "policy-integrity",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security policy-integrity correct",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "72e3e234-65c1-4862-aea6-c268a64d1072",
                  "parentUUID": "06b492be-32a3-4058-9ac9-741a6a261520",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/$id",
                  "fullTitle": "mfkdf2/security policy-integrity invalid/$id",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nsetup.policy.$id = 'invalid-id'\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    {},\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9de4dec3-874c-4313-b8a9-f51479f56931",
                  "parentUUID": "06b492be-32a3-4058-9ac9-741a6a261520",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72e3e234-65c1-4862-aea6-c268a64d1072",
                "9de4dec3-874c-4313-b8a9-f51479f56931"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "b214497d-5420-4ba7-9836-ca639bf05c05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 401,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9644db28-b6e0-4b40-937b-6afec286d7a2",
          "title": "mfkdf2/strengthening",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
          "file": "\\test\\mfkdf2\\strengthening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "strengthening-throws",
              "fullTitle": "mfkdf2/strengthening strengthening-throws",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nawait derive\n  .strengthen(-1, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strengthen(1.5, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strengthen(0, -1)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )\nawait derive\n  .strengthen(0, 1.5)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )",
              "err": {},
              "uuid": "3615868a-c29f-40eb-92bb-6c7907e4b05d",
              "parentUUID": "9644db28-b6e0-4b40-937b-6afec286d7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-works-multiple-times",
              "fullTitle": "mfkdf2/strengthening strengthening-works-multiple-times",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive.policy.time = 0\nderive.policy.memory = 0\nawait mfkdf.derive\n  .key(derive.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)\nawait derive2.strengthen(3, 16384)\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive3.policy.time.should.equal(3)\nderive3.policy.memory.should.equal(16384)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.policy.time = 0\nderive2.policy.memory = 0\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)",
              "err": {},
              "uuid": "c30ba5da-8b02-42ae-913a-e59ccab93aca",
              "parentUUID": "9644db28-b6e0-4b40-937b-6afec286d7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-other-factors",
              "fullTitle": "mfkdf2/strengthening strengthening-with-other-factors",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive2.strengthen()\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(0)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.policy.time.should.equal(0)\nderive3.policy.memory.should.equal(0)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "6c2b6f64-e9b1-4ecf-9845-a1d116409f3f",
              "parentUUID": "9644db28-b6e0-4b40-937b-6afec286d7a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-reconstitution",
              "fullTitle": "mfkdf2/strengthening strengthening-with-reconstitution",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nawait derive.setThreshold(1)\nawait derive.removeFactor('password2')\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "23e9d04e-52fe-44a5-adab-a22b6b2fef2e",
              "parentUUID": "9644db28-b6e0-4b40-937b-6afec286d7a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e6883197-cd6d-4e00-b9be-29960781cb62",
              "title": "setup",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening setup time",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 5 }\n)\nsetup.policy.time.should.equal(5)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(5)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "4b239d6e-df8b-424e-9fc5-990d5b22ae5c",
                  "parentUUID": "e6883197-cd6d-4e00-b9be-29960781cb62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening setup memory",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 32768 }\n)\nsetup.policy.memory.should.equal(32768)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(32768)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "c30eb870-d863-4122-9073-1ad3a9168b16",
                  "parentUUID": "e6883197-cd6d-4e00-b9be-29960781cb62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening setup time-and-memory",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3, memory: 16384 }\n)\nsetup.policy.time.should.equal(3)\nsetup.policy.memory.should.equal(16384)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "eaab8b9d-9b78-419a-8c61-6d25c61c1745",
                  "parentUUID": "e6883197-cd6d-4e00-b9be-29960781cb62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws",
                  "fullTitle": "mfkdf2/strengthening setup throws",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'time must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'time must be an integer')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'memory must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'memory must be an integer')",
                  "err": {},
                  "uuid": "181929c4-b1b7-454c-9648-7c0b8b4a80ee",
                  "parentUUID": "e6883197-cd6d-4e00-b9be-29960781cb62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b239d6e-df8b-424e-9fc5-990d5b22ae5c",
                "c30eb870-d863-4122-9073-1ad3a9168b16",
                "eaab8b9d-9b78-419a-8c61-6d25c61c1745",
                "181929c4-b1b7-454c-9648-7c0b8b4a80ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 423,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "470ccfac-ce7f-4d8e-a85d-ed3465db67c4",
              "title": "strengthening",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening strengthening time",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(5, 0)\nderive.policy.time.should.equal(5)\nderive.policy.memory.should.equal(0)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(5)\nderive2.policy.memory.should.equal(0)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "518759b5-c281-4f60-a24f-e2a1aa0ff2e8",
                  "parentUUID": "470ccfac-ce7f-4d8e-a85d-ed3465db67c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening strengthening memory",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(0, 32768)\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(32768)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(32768)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "29be0b28-9e26-4bf7-be38-ff1def774368",
                  "parentUUID": "470ccfac-ce7f-4d8e-a85d-ed3465db67c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening strengthening time-and-memory",
                  "timedOut": false,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strengthen(3, 16384)\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "c811e6cc-3b0e-4df3-9119-849636b35aa1",
                  "parentUUID": "470ccfac-ce7f-4d8e-a85d-ed3465db67c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "518759b5-c281-4f60-a24f-e2a1aa0ff2e8",
                "29be0b28-9e26-4bf7-be38-ff1def774368",
                "c811e6cc-3b0e-4df3-9119-849636b35aa1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 578,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "3615868a-c29f-40eb-92bb-6c7907e4b05d",
            "c30ba5da-8b02-42ae-913a-e59ccab93aca",
            "6c2b6f64-e9b1-4ecf-9845-a1d116409f3f",
            "23e9d04e-52fe-44a5-adab-a22b6b2fef2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 779,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "607eb71b-f0bf-44ec-9497-8665f5f0cb24",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "2d50ad82-20cf-4ca7-ba15-c822ad1795e3",
              "parentUUID": "607eb71b-f0bf-44ec-9497-8665f5f0cb24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "a08462f3-980f-4b6c-be08-5aa4f185dad0",
              "parentUUID": "607eb71b-f0bf-44ec-9497-8665f5f0cb24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "dbd3ce2a-3763-4053-8073-68f504835d62",
              "parentUUID": "607eb71b-f0bf-44ec-9497-8665f5f0cb24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d50ad82-20cf-4ca7-ba15-c822ad1795e3",
            "a08462f3-980f-4b6c-be08-5aa4f185dad0",
            "dbd3ce2a-3763-4053-8073-68f504835d62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "beffc7f2-82a2-4685-840c-526da5821076",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "12b8f6f2-5c92-4113-898d-783415740e5d",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  1,\n  5\n)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "065e880c-a514-4ce9-9ae7-de9860eeae94",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  2,\n  3\n)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5d198844-01d3-4689-bba6-a7279f183f57",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "6c7fee11-cd3a-4a5b-94d4-735749634c6c",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nshares.should.be.an('array').of.length(255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 250; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 255)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[251] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "ad118bb7-1cbe-4b9a-aa78-de663ace7741",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)",
              "err": {},
              "uuid": "54b7c8ec-6f5b-4288-a702-f4a189ec25b5",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a6abff88-05f5-481c-b5d4-cdadde4a652f",
              "parentUUID": "beffc7f2-82a2-4685-840c-526da5821076",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "12b8f6f2-5c92-4113-898d-783415740e5d",
            "065e880c-a514-4ce9-9ae7-de9860eeae94",
            "5d198844-01d3-4689-bba6-a7279f183f57",
            "6c7fee11-cd3a-4a5b-94d4-735749634c6c",
            "ad118bb7-1cbe-4b9a-aa78-de663ace7741",
            "54b7c8ec-6f5b-4288-a702-f4a189ec25b5",
            "a6abff88-05f5-481c-b5d4-cdadde4a652f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "427fd13e-0840-4bcb-8497-91697581e794",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\new.js",
          "file": "\\test\\secrets\\new.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "share-size",
              "fullTitle": "secrets share-size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let secret = crypto.randomBytes(32)\nlet shares = mfkdf.secrets.share(secret, 1, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[0].should.equal(secret)\nshares[1].length.should.equal(32)\nshares[1].should.equal(secret)\nshares[2].length.should.equal(32)\nshares[2].should.equal(secret)\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[2] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 2, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 3, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
              "err": {},
              "uuid": "d27083c2-7ed3-4619-8bf5-31fb4059a4ba",
              "parentUUID": "427fd13e-0840-4bcb-8497-91697581e794",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d27083c2-7ed3-4619-8bf5-31fb4059a4ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8cab07e8-fd12-438f-a324-308792da4781",
          "title": "secrets/recover",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "96504fe5-2cef-4ca1-a5b3-19a7adc9dc9c",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "a4c7dde2-d376-45fd-a3bf-9bb330b8f04b",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "94028ed8-bd3c-4fed-8b02-5fd3a8af8c29",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "7bd04933-a101-4a0b-920d-2d7272781ebe",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "fe1fbb90-9d34-4861-930d-cf76762877bb",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1ac1f09c-9e82-4f6d-a85a-5378bdc974c8",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "ed28b108-a7de-4211-98e0-2c23e5bc4426",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "87b88c44-e29d-4d6f-8903-28f3a34a43d3",
              "parentUUID": "8cab07e8-fd12-438f-a324-308792da4781",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96504fe5-2cef-4ca1-a5b3-19a7adc9dc9c",
            "a4c7dde2-d376-45fd-a3bf-9bb330b8f04b",
            "94028ed8-bd3c-4fed-8b02-5fd3a8af8c29",
            "7bd04933-a101-4a0b-920d-2d7272781ebe",
            "fe1fbb90-9d34-4861-930d-cf76762877bb",
            "1ac1f09c-9e82-4f6d-a85a-5378bdc974c8",
            "ed28b108-a7de-4211-98e0-2c23e5bc4426",
            "87b88c44-e29d-4d6f-8903-28f3a34a43d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ba2fb43b-302c-42fc-9e47-5367fd8b66e3",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "6c783814-9757-4e1d-83e4-80914c05fb19",
              "parentUUID": "ba2fb43b-302c-42fc-9e47-5367fd8b66e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "3b06d22d-dc4d-4f10-b79a-ff34f61a1128",
              "parentUUID": "ba2fb43b-302c-42fc-9e47-5367fd8b66e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f8f4010a-b9c0-44b6-8cd0-6e47d8f01a58",
              "parentUUID": "ba2fb43b-302c-42fc-9e47-5367fd8b66e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c783814-9757-4e1d-83e4-80914c05fb19",
            "3b06d22d-dc4d-4f10-b79a-ff34f61a1128",
            "f8f4010a-b9c0-44b6-8cd0-6e47d8f01a58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6545c93f-d2df-4da8-84e3-b6712bc0250a",
          "title": "setup/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .password('password', { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "6cd465a9-79b6-47d3-80ae-cd3d5397bc61",
              "parentUUID": "6545c93f-d2df-4da8-84e3-b6712bc0250a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .password('password', { id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8358d66f-621c-4b49-b387-5ba7409aac76",
              "parentUUID": "6545c93f-d2df-4da8-84e3-b6712bc0250a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "e5bc0bb9-852d-42a2-8c42-e228279155f4",
              "parentUUID": "6545c93f-d2df-4da8-84e3-b6712bc0250a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6cd465a9-79b6-47d3-80ae-cd3d5397bc61",
            "8358d66f-621c-4b49-b387-5ba7409aac76",
            "e5bc0bb9-852d-42a2-8c42-e228279155f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "71538a50-945e-49f5-9d85-0db5db9960ef",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ uuid: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ uuid: 'hello' })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "7e355002-c2df-4c2d-b81c-26f165a8f26c",
              "parentUUID": "71538a50-945e-49f5-9d85-0db5db9960ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d60bd2e1-604b-4184-84d1-d0abc47a0948",
              "parentUUID": "71538a50-945e-49f5-9d85-0db5db9960ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({\n  uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n})\nfactor.type.should.equal('uuid')\nfactor.data\n  .toString('hex')\n  .should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "99b2708a-2849-4cc7-9550-ca1192daa8da",
              "parentUUID": "71538a50-945e-49f5-9d85-0db5db9960ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "7166f097-fa85-42a0-ba97-8ca721be5be5",
              "parentUUID": "71538a50-945e-49f5-9d85-0db5db9960ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e355002-c2df-4c2d-b81c-26f165a8f26c",
            "d60bd2e1-604b-4184-84d1-d0abc47a0948",
            "99b2708a-2849-4cc7-9550-ca1192daa8da",
            "7166f097-fa85-42a0-ba97-8ca721be5be5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5364eb0f-8f12-4ab6-8744-e44a50eea435",
          "title": "setup/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "48a39057-179e-4fdb-bfd0-124ac2f01ec5",
              "parentUUID": "5364eb0f-8f12-4ab6-8744-e44a50eea435",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9822e9d8-7795-4b41-ad31-4c19d77222bc",
              "title": "id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "8a36a7ff-47cc-4456-b526-b11de7920227",
                  "parentUUID": "9822e9d8-7795-4b41-ad31-4c19d77222bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { id: 'hello-world' }\n)\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "a7780f07-da19-4efd-9533-d69edc99615b",
                  "parentUUID": "9822e9d8-7795-4b41-ad31-4c19d77222bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8d111bb0-2499-4bfc-b215-70da87133d3e",
                  "parentUUID": "9822e9d8-7795-4b41-ad31-4c19d77222bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3cfe9ed5-5425-4729-95c2-e1a586feed37",
                  "parentUUID": "9822e9d8-7795-4b41-ad31-4c19d77222bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a36a7ff-47cc-4456-b526-b11de7920227",
                "a7780f07-da19-4efd-9533-d69edc99615b",
                "8d111bb0-2499-4bfc-b215-70da87133d3e",
                "3cfe9ed5-5425-4729-95c2-e1a586feed37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5bad51aa-776d-4452-b53b-f90915320795",
              "title": "threshold",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "fdeecaba-dab1-4d9e-9e3d-b3233a354a03",
                  "parentUUID": "5bad51aa-776d-4452-b53b-f90915320795",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password2' })\n  ],\n  { threshold: 1 }\n)\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "d6cff7ad-8424-4e33-82a9-7b5988722beb",
                  "parentUUID": "5bad51aa-776d-4452-b53b-f90915320795",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], {\n    threshold: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8870a04c-ffa4-4fd0-a11d-d83a1b23f6bc",
                  "parentUUID": "5bad51aa-776d-4452-b53b-f90915320795",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 0 })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 2 })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "17667a85-4b09-4570-aa29-dca2c77c0fd8",
                  "parentUUID": "5bad51aa-776d-4452-b53b-f90915320795",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdeecaba-dab1-4d9e-9e3d-b3233a354a03",
                "d6cff7ad-8424-4e33-82a9-7b5988722beb",
                "8870a04c-ffa4-4fd0-a11d-d83a1b23f6bc",
                "17667a85-4b09-4570-aa29-dca2c77c0fd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6d2f92ed-7e7d-4680-9463-3a2a8778b7b9",
              "title": "salt",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(32)",
                  "err": {},
                  "uuid": "3cf38142-f18f-482f-b275-c688be978a4c",
                  "parentUUID": "6d2f92ed-7e7d-4680-9463-3a2a8778b7b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { salt: Buffer.from('1234567812345678', 'base64') }\n)\npolicy.salt.should.equal('1234567812345678')",
                  "err": {},
                  "uuid": "c5effbad-5d90-4cf3-bb1a-e7e6541ce148",
                  "parentUUID": "6d2f92ed-7e7d-4680-9463-3a2a8778b7b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { salt: 'hello' })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ab7f1dfa-e661-494d-a552-95894bd85952",
                  "parentUUID": "6d2f92ed-7e7d-4680-9463-3a2a8778b7b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cf38142-f18f-482f-b275-c688be978a4c",
                "c5effbad-5d90-4cf3-bb1a-e7e6541ce148",
                "ab7f1dfa-e661-494d-a552-95894bd85952"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "51cfcc8c-7a49-46e2-85b3-8fea6b960129",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "201bf326-0836-4902-b1fc-740fedb8f79d",
                  "parentUUID": "51cfcc8c-7a49-46e2-85b3-8fea6b960129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password1' })\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8d1621c5-a145-4c13-8bdf-2eac1184a2c2",
                  "parentUUID": "51cfcc8c-7a49-46e2-85b3-8fea6b960129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 12345,\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 12345,\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: 12345,\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: 12345\n    }\n  ])\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9a711dce-e075-4737-90c4-81bfa1544459",
                  "parentUUID": "51cfcc8c-7a49-46e2-85b3-8fea6b960129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([]).should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: '',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: '',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "185c90b6-8bf1-4439-868c-ca21eeaab326",
                  "parentUUID": "51cfcc8c-7a49-46e2-85b3-8fea6b960129",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "201bf326-0836-4902-b1fc-740fedb8f79d",
                "8d1621c5-a145-4c13-8bdf-2eac1184a2c2",
                "9a711dce-e075-4737-90c4-81bfa1544459",
                "185c90b6-8bf1-4439-868c-ca21eeaab326"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "48a39057-179e-4fdb-bfd0-124ac2f01ec5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mfkdf2/public/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}