{
  "stats": {
    "suites": 76,
    "tests": 268,
    "passes": 268,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-13T18:29:03.901Z",
    "end": "2025-09-13T18:29:22.929Z",
    "duration": 19028,
    "testsRegistered": 268,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aeee5bcc-ccc2-445f-9543-834e00904a21",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83c57733-3379-4266-93ff-775897610d40",
          "title": "aes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\aes.js",
          "file": "\\test\\crypto\\aes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "encrypt throws on invalid inputs",
              "fullTitle": "aes encrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.encrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.encrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.encrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "08d01861-8c7d-4bd4-90d0-35e4eb1dcf80",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypt throws on invalid inputs",
              "fullTitle": "aes decrypt throws on invalid inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() =>\n  crypt.decrypt('not a buffer', crypto.randomBytes(32))).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(16),\n    crypto.randomBytes(32)\n  )).should.throw();\n(() =>\n  crypt.decrypt(crypto.randomBytes(32), 'not a buffer')).should.throw();\n(() =>\n  crypt.decrypt(\n    crypto.randomBytes(32),\n    crypto.randomBytes(16)\n  )).should.throw()",
              "err": {},
              "uuid": "b525d12e-bfcd-4501-bbdc-696f49b0e122",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "encrypts and decrypts correctly",
              "fullTitle": "aes encrypts and decrypts correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.true",
              "err": {},
              "uuid": "7aa998c6-1df0-4143-93cf-95e90020f86b",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting with wrong key fails",
              "fullTitle": "aes decrypting with wrong key fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst wrongKey = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nconst decrypted = crypt.decrypt(encrypted, wrongKey)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "e8b1f5a4-471c-47fc-aa58-989e5b2a91d7",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "decrypting modified data fails",
              "fullTitle": "aes decrypting modified data fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\n// Modify the encrypted data\nencrypted[0] ^= 0xff\nconst decrypted = crypt.decrypt(encrypted, key)\ndecrypted.equals(data).should.be.false",
              "err": {},
              "uuid": "ba05cd83-8721-4e8c-86bd-ef279a2ee9b2",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ciphertext length equals plaintext length",
              "fullTitle": "aes ciphertext length equals plaintext length",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = crypto.randomBytes(32)\nconst data = crypto.randomBytes(32)\nconst encrypted = crypt.encrypt(data, key)\nencrypted.length.should.equal(data.length)",
              "err": {},
              "uuid": "ec775eb4-772e-48b1-91c2-af809366c6c1",
              "parentUUID": "83c57733-3379-4266-93ff-775897610d40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08d01861-8c7d-4bd4-90d0-35e4eb1dcf80",
            "b525d12e-bfcd-4501-bbdc-696f49b0e122",
            "7aa998c6-1df0-4143-93cf-95e90020f86b",
            "e8b1f5a4-471c-47fc-aa58-989e5b2a91d7",
            "ba05cd83-8721-4e8c-86bd-ef279a2ee9b2",
            "ec775eb4-772e-48b1-91c2-af809366c6c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2416085b-6c1d-45f6-8cb6-50c9f68f63e7",
          "title": "encrypt",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0a0bc2f6-71af-484e-98d8-33093f227405",
              "title": "utils",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid1',\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey()\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "3aae092b-9ebc-4cfd-8a2e-f297064db0e6",
                  "parentUUID": "0a0bc2f6-71af-484e-98d8-33093f227405",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3aae092b-9ebc-4cfd-8a2e-f297064db0e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8449594a-0a81-4360-a102-00ab37a5a8af",
          "title": "derive/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "043c976c-3def-42ed-963e-9d9a714c793c",
              "parentUUID": "8449594a-0a81-4360-a102-00ab37a5a8af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "98706c1a-e2a4-466a-b305-4ab944c19eae",
              "parentUUID": "8449594a-0a81-4360-a102-00ab37a5a8af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "043c976c-3def-42ed-963e-9d9a714c793c",
            "98706c1a-e2a4-466a-b305-4ab944c19eae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bbeb3a58-c95a-4f43-a036-26f2824b38ea",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "b748d4b2-39c4-4a1f-a1f6-4f5ff376feb8",
              "parentUUID": "bbeb3a58-c95a-4f43-a036-26f2824b38ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "1078aa0b-1f73-4237-8fe1-23873f512e8c",
              "parentUUID": "bbeb3a58-c95a-4f43-a036-26f2824b38ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b748d4b2-39c4-4a1f-a1f6-4f5ff376feb8",
            "1078aa0b-1f73-4237-8fe1-23873f512e8c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "43e565b2-1f65-4dac-9e8c-4931424fde5c",
          "title": "derive/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hkdf",
              "fullTitle": "derive/key hkdf",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "87bd559e-94e1-4ff0-8a84-f87eaca4e743",
              "parentUUID": "43e565b2-1f65-4dac-9e8c-4931424fde5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "c195738e-311b-413a-bd92-d98cb457a2dc",
              "parentUUID": "43e565b2-1f65-4dac-9e8c-4931424fde5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: false }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('wrongpassword2')\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password2: mfkdf.derive.factors.password('wrongpassword2'),\n    password3: mfkdf.derive.factors.password('wrongpassword3')\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password4')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "0e2b527e-e61d-4907-a701-fbb8795a9312",
              "parentUUID": "43e565b2-1f65-4dac-9e8c-4931424fde5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    )\n  })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "378c42ed-0c35-4588-a181-cf0e75278fcb",
              "parentUUID": "43e565b2-1f65-4dac-9e8c-4931424fde5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c1b54569-42d9-44e8-879d-173bcbe6d990",
              "title": "shares",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "0a98f26a-fb9d-4e49-9b9a-166d65ea2f49",
                  "parentUUID": "c1b54569-42d9-44e8-879d-173bcbe6d990",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a98f26a-fb9d-4e49-9b9a-166d65ea2f49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "13e1f6ab-38cc-42e9-ad75-f63a0bb2bd04",
              "title": "invalid",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e8e38299-5636-4476-8fc3-08cf12931e9c",
                  "parentUUID": "13e1f6ab-38cc-42e9-ad75-f63a0bb2bd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9c0b5d5e-50b2-4a65-9143-09856b4f3e84",
                  "parentUUID": "13e1f6ab-38cc-42e9-ad75-f63a0bb2bd04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8e38299-5636-4476-8fc3-08cf12931e9c",
                "9c0b5d5e-50b2-4a65-9143-09856b4f3e84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "87bd559e-94e1-4ff0-8a84-f87eaca4e743",
            "c195738e-311b-413a-bd92-d98cb457a2dc",
            "0e2b527e-e61d-4907-a701-fbb8795a9312",
            "378c42ed-0c35-4588-a181-cf0e75278fcb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 358,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
          "title": "derive/outputs",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\derive\\outputs.js",
          "file": "\\test\\derive\\outputs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stack",
              "fullTitle": "derive/outputs stack",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    })\n  ]),\n  await mfkdf.setup.factors.uuid({\n    id: 'uuid3',\n    uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n  })\n])\ndelete setup.outputs.stack.entropyBits\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  }),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "c1977b82-b4ac-4d10-8503-12246500fd19",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "hmacsha1",
              "fullTitle": "derive/outputs hmacsha1",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.outputs.should.not.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "fc24553a-06b0-4074-aaec-8ee20d8c3913",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "uuid",
              "fullTitle": "derive/outputs uuid",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "5b25d348-fdd2-4c24-acba-afd7eb671ffd",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "question",
              "fullTitle": "derive/outputs question",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.outputs.question.strength.calc_time = null\nderive.outputs.question.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "922692fe-0e11-4c04-b0d4-a3b35b60612b",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ooba",
              "fullTitle": "derive/outputs ooba",
              "timedOut": false,
              "duration": 161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "971422c1-74df-472a-84a2-94b04aff9816",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "password",
              "fullTitle": "derive/outputs password",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.outputs.password.strength.calc_time = null\nderive.outputs.password.strength.calc_time = null\nsetup.outputs.should.deep.equal(derive.outputs)",
              "err": {},
              "uuid": "84032757-f0c4-4063-8bf2-534a41494e29",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multiple",
              "fullTitle": "derive/outputs multiple",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nderive.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})",
              "err": {},
              "uuid": "9eba83f4-db64-4234-be90-7623349d783d",
              "parentUUID": "81561736-8a6f-4f83-8f2d-2a5fae7157b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1977b82-b4ac-4d10-8503-12246500fd19",
            "fc24553a-06b0-4074-aaec-8ee20d8c3913",
            "5b25d348-fdd2-4c24-acba-afd7eb671ffd",
            "922692fe-0e11-4c04-b0d4-a3b35b60612b",
            "971422c1-74df-472a-84a2-94b04aff9816",
            "84032757-f0c4-4063-8bf2-534a41494e29",
            "9eba83f4-db64-4234-be90-7623349d783d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 449,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "afc728ca-84e7-48c1-aa92-5fd19fc56b77",
          "title": "examples",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "ad041ab6-d168-4809-8844-357d30f50844",
              "parentUUID": "afc728ca-84e7-48c1-aa92-5fd19fc56b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'recovery',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 34d2…5771\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "5c3d31b5-807c-4281-bf71-ca62b2e8913c",
              "parentUUID": "afc728ca-84e7-48c1-aa92-5fd19fc56b77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    }),\n    await mfkdf.setup.factors.password('password2', {\n      id: 'password2'\n    })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac4cf783-495d-4bf9-bb05-5fb3254abfe8",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "bc22be80-3e86-4b57-ab7d-ee49daf161f9",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 473,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c1c2a557-0b37-4992-a23c-aa411c4526a1",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c9edba8f-5e2a-4124-9d37-914a2ba7fdd2",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d058d3c5-445c-4dcb-8120-3c45a185665a",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n])\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "24d8da23-3bbd-4642-95f9-0f276e6ed2fb",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "40210e42-7c4d-41dc-ad35-101ba78009c7",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0…2516\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "41e233ce-17b9-43cf-b857-60f10de4c753",
                  "parentUUID": "a4cc20f9-b0a6-4a4f-b3d2-d0404a2ed257",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac4cf783-495d-4bf9-bb05-5fb3254abfe8",
                "bc22be80-3e86-4b57-ab7d-ee49daf161f9",
                "c1c2a557-0b37-4992-a23c-aa411c4526a1",
                "c9edba8f-5e2a-4124-9d37-914a2ba7fdd2",
                "d058d3c5-445c-4dcb-8120-3c45a185665a",
                "24d8da23-3bbd-4642-95f9-0f276e6ed2fb",
                "40210e42-7c4d-41dc-ad35-101ba78009c7",
                "41e233ce-17b9-43cf-b857-60f10de4c753"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 934,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "674ef066-656d-4b6e-904d-7b3c67475d6c",
              "title": "secrets",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(\n  Buffer.from('abcdefghijklmnopqrst'),\n  2,\n  3\n) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "fc08367c-fc5e-4d52-bcef-c738efc746df",
                  "parentUUID": "674ef066-656d-4b6e-904d-7b3c67475d6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc08367c-fc5e-4d52-bcef-c738efc746df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
              "title": "policy",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "50b9c5c2-30c5-440b-b609-eb1db9016961",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "b0b6e38e-0b31-4d2c-b936-2343f019ccf4",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordA',\n  'passwordC'\n]) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, [\n  'passwordB',\n  'passwordC'\n]) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "09f934d1-a13a-4dca-89f3-510bd2a5730e",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', {\n        id: 'passwordB'\n      }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e408e35e-c10f-409a-a9aa-0bae264ecaac",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d82c456a-4343-4571-8600-fc50e30377f3",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "17fa9c0f-2e6c-4712-8c8a-fee97960ff24",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ])\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a…5263\nderive.key.toString('hex') // -> e16a…5263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "a4a03fa9-8655-41a2-af2e-6adcb6068e72",
                  "parentUUID": "733cc69d-c6ba-4906-91f8-a2b6c4f7d40a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50b9c5c2-30c5-440b-b609-eb1db9016961",
                "b0b6e38e-0b31-4d2c-b936-2343f019ccf4",
                "09f934d1-a13a-4dca-89f3-510bd2a5730e",
                "e408e35e-c10f-409a-a9aa-0bae264ecaac",
                "d82c456a-4343-4571-8600-fc50e30377f3",
                "17fa9c0f-2e6c-4712-8c8a-fee97960ff24",
                "a4a03fa9-8655-41a2-af2e-6adcb6068e72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "54c84f60-9522-4fab-bb2d-c69f0565d553",
              "title": "reconstitution",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "35025129-c557-4167-a8e2-8a931a824700",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "dff4d305-8898-4c7d-8df0-5d87b5ef2da5",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "099b74c6-4479-418f-8206-5386540edcb2",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "e1be4ff0-d247-460a-a94d-4f5b9d3b2dfc",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "766fb56a-a3b6-4d7b-88f6-f921405e3fc0",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "6d8876dd-c349-474f-83ae-8b4b507d21e7",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "2daac002-2836-4771-8c11-66d685e738aa",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "6512f949-ada1-4729-a439-855c8203003d",
                  "parentUUID": "54c84f60-9522-4fab-bb2d-c69f0565d553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35025129-c557-4167-a8e2-8a931a824700",
                "dff4d305-8898-4c7d-8df0-5d87b5ef2da5",
                "099b74c6-4479-418f-8206-5386540edcb2",
                "e1be4ff0-d247-460a-a94d-4f5b9d3b2dfc",
                "766fb56a-a3b6-4d7b-88f6-f921405e3fc0",
                "6d8876dd-c349-474f-83ae-8b4b507d21e7",
                "2daac002-2836-4771-8c11-66d685e738aa",
                "6512f949-ada1-4729-a439-855c8203003d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 381,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8bf5c4fc-5bf5-4eeb-87df-1b2efc0af0b2",
              "title": "persistence",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 6458…dc3c\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "589cf277-eff7-48f9-8ce1-227fe6398501",
                  "parentUUID": "8bf5c4fc-5bf5-4eeb-87df-1b2efc0af0b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "589cf277-eff7-48f9-8ce1-227fe6398501"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6212f4ed-c4b2-48c2-be7d-3159cfbed9f6",
              "title": "crypto",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\n// get sub-key for \"eth\"\nconst subkey = key.getSubkey('eth')\nsubkey.toString('hex') // -> 97cb…bac5",
                  "err": {},
                  "uuid": "51671234-f510-48ba-8aea-321b3a56491c",
                  "parentUUID": "6212f4ed-c4b2-48c2-be7d-3159cfbed9f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51671234-f510-48ba-8aea-321b3a56491c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "ad041ab6-d168-4809-8844-357d30f50844",
            "5c3d31b5-807c-4281-bf71-ca62b2e8913c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6c6a8b58-b892-480e-8926-512be2064e01",
          "title": "site",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('Tr0ub4dour'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recovery',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recovery: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "321cc03f-4933-4fe8-b5f3-c293e040f369",
              "parentUUID": "6c6a8b58-b892-480e-8926-512be2064e01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour')\n    ])\n  ).entropyBits.real\n).should.equal(16)\nMath.floor(\n  (\n    await mfkdf.setup.key([\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.hotp(),\n      await mfkdf.setup.factors.hmacsha1()\n    ])\n  ).entropyBits.real\n).should.equal(196)",
              "err": {},
              "uuid": "d17d1a8b-20b7-4dab-a768-83196e1277ea",
              "parentUUID": "6c6a8b58-b892-480e-8926-512be2064e01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "4871e301-6c62-4f44-a0ab-da673ff56136",
              "parentUUID": "6c6a8b58-b892-480e-8926-512be2064e01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify(\n  (\n    await mfkdf.setup.key(\n      [\n        await mfkdf.setup.factors.password('password'),\n        await mfkdf.setup.factors.hotp({\n          secret: Buffer.from('abcdefghijklmnopqrst')\n        }),\n        await mfkdf.setup.factors.uuid({\n          id: 'recoveryCode',\n          uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n        })\n      ],\n      { threshold: 2, pbkdf2rounds: 1 }\n    )\n  ).policy\n)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  recoveryCode: mfkdf.derive.factors.uuid(\n    '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  )\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "9c3dbd16-166f-4139-b6fc-c6ce0f1d87d6",
              "parentUUID": "6c6a8b58-b892-480e-8926-512be2064e01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "321cc03f-4933-4fe8-b5f3-c293e040f369",
            "d17d1a8b-20b7-4dab-a768-83196e1277ea",
            "4871e301-6c62-4f44-a0ab-da673ff56136",
            "9c3dbd16-166f-4139-b6fc-c6ce0f1d87d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 500,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
          "title": "tutorials",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n])\nsetup.key.toString('hex') // -> 6458…dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 6458…dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "51a0dfae-15bc-48e8-b93d-87958e4d00f3",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// reconstitute key to change password\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword')\n)\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771",
              "err": {},
              "uuid": "ac3315e6-fc8a-4ede-84d5-45f331fed9c3",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack([\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ]),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 1 }\n)\nsetup.key.toString('hex') // -> 01d0…2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0…2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "70d874ed-c414-4044-ae63-a502942a5ffd",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d2…5771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d2…5771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "25ebfb04-4619-4ba8-ab2a-a7287e404f05",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({\n      secret: Buffer.from('abcdefghijklmnopqrst')\n    }),\n    await mfkdf.setup.factors.uuid({\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.key.toString('hex') // -> 34d2…5771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "05b78f3f-3eb8-40ac-a3d6-400b01013a94",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n])\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n])\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n])\nconst threshold = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n    await mfkdf.setup.factors.uuid(),\n    await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "a596a2c9-d9f5-436b-9b82-519455fa9d9c",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  }),\n  await mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  })\n])\nsetup.key.toString('hex') // -> 34d2…5771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(241063),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d2…5771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "c1bb3192-3fb0-4fad-a6f3-97c8fc343f26",
              "parentUUID": "07494515-4f46-4e9f-a0d7-e5fdf99193bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51a0dfae-15bc-48e8-b93d-87958e4d00f3",
            "ac3315e6-fc8a-4ede-84d5-45f331fed9c3",
            "70d874ed-c414-4044-ae63-a502942a5ffd",
            "25ebfb04-4619-4ba8-ab2a-a7287e404f05",
            "05b78f3f-3eb8-40ac-a3d6-400b01013a94",
            "a596a2c9-d9f5-436b-9b82-519455fa9d9c",
            "c1bb3192-3fb0-4fad-a6f3-97c8fc343f26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3cf4e270-76a3-4fa4-8c90-6a8ceef95119",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key).update(challenge).digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "4d602894-0811-44ab-905b-361441015653",
              "parentUUID": "3cf4e270-76a3-4fa4-8c90-6a8ceef95119",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.hmacsha1()])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(\n  setup.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response1 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(\n  derive1.policy.factors[0].params.challenge,\n  'hex'\n)\nconst response2 = crypto\n  .createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "9d8d2dde-1fc9-4bae-b4a2-168921477b30",
              "parentUUID": "3cf4e270-76a3-4fa4-8c90-6a8ceef95119",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.equal(\n    '2747ebf65219aee6630a758e40fd05ccbb39ab465745ea1c9a6c5adb6673d2d3'\n  )",
              "err": {},
              "uuid": "eb2e9e93-d033-41d1-afec-fde9eeb0f756",
              "parentUUID": "3cf4e270-76a3-4fa4-8c90-6a8ceef95119",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "wrong-salt",
              "fullTitle": "factors/hmacsha1 wrong-salt",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PlS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive = await mfkdf.derive.key(\n  JSON.parse(setup),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nconst setup2 =\n  '{\"$schema\":\"https://mfkdf.com/schema/v2.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"key\":\"LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=\",\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"salt\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\"}}]}'\nconst derive2 = await mfkdf.derive.key(\n  JSON.parse(setup2),\n  {\n    hmacsha1: mfkdf.derive.factors.hmacsha1(\n      Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex')\n    )\n  },\n  false\n)\nderive.key\n  .toString('hex')\n  .should.not.equal(\n    '64393334663330303639356134323533393937376561636234363262373662316562616564393838663531393337303563666432633265373130636663666230'\n  )\nderive.key.toString('hex').should.not.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "c847f5c5-dc15-46ca-9599-4a79cb2009c6",
              "parentUUID": "3cf4e270-76a3-4fa4-8c90-6a8ceef95119",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b20657dd-4f35-4554-b272-e5ddec485020",
                  "parentUUID": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "36410d13-142e-4da9-8557-23530c5b3910",
                  "parentUUID": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "13b4054d-731f-4115-a4ca-931ddcc8acf6",
                  "parentUUID": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hmacsha1({ secret: Buffer.from('12345') })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "26a9b336-4eec-4d46-bcde-f8b6845bded2",
                  "parentUUID": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "ba16dd09-cad1-4366-a972-1c572afe8fc2",
                  "parentUUID": "9a218e12-e2dc-4c91-8099-65a14f5a0459",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b20657dd-4f35-4554-b272-e5ddec485020",
                "36410d13-142e-4da9-8557-23530c5b3910",
                "13b4054d-731f-4115-a4ca-931ddcc8acf6",
                "26a9b336-4eec-4d46-bcde-f8b6845bded2",
                "ba16dd09-cad1-4366-a972-1c572afe8fc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4d602894-0811-44ab-905b-361441015653",
            "9d8d2dde-1fc9-4bae-b4a2-168921477b30",
            "eb2e9e93-d033-41d1-afec-fde9eeb0f756",
            "c847f5c5-dc15-46ca-9599-4a79cb2009c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "974269d8-750c-41ab-9de8-9fbbe6cee71c",
          "title": "factors/hotp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/hotp size",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "96134686-66fc-488f-ae5f-a64fa2d802dc",
              "parentUUID": "974269d8-750c-41ab-9de8-9fbbe6cee71c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(361687)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(979122)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "e23e447f-053a-4212-968f-aab4ec3d0e30",
              "parentUUID": "974269d8-750c-41ab-9de8-9fbbe6cee71c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.hotp()])",
              "err": {},
              "uuid": "7ad4b1d6-05eb-40c0-9ed4-4ddcd23505a0",
              "parentUUID": "974269d8-750c-41ab-9de8-9fbbe6cee71c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "3a201d76-abdc-41cf-87af-a0c37e76e984",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "cb6f8746-a463-4142-b793-a99879173307",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8210a9f2-9be9-4788-9955-aac358290652",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "50b63013-b21d-4aa9-9ddb-e773d6b18a42",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a2f6c69c-04dd-4287-9ddf-ec20df79ee25",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a365d8c5-05a1-43dc-a8c3-907bc3e7ebaf",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await await mfkdf.setup.factors\n  .hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "39154473-ae0c-4fb8-b564-0e8c7eb21f2d",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .hotp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ec950395-5485-438d-b40d-2a6df94a1f0b",
                  "parentUUID": "685a18f9-f8fe-42a5-90d4-9a00052ea102",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a201d76-abdc-41cf-87af-a0c37e76e984",
                "cb6f8746-a463-4142-b793-a99879173307",
                "8210a9f2-9be9-4788-9955-aac358290652",
                "50b63013-b21d-4aa9-9ddb-e773d6b18a42",
                "a2f6c69c-04dd-4287-9ddf-ec20df79ee25",
                "a365d8c5-05a1-43dc-a8c3-907bc3e7ebaf",
                "39154473-ae0c-4fb8-b564-0e8c7eb21f2d",
                "ec950395-5485-438d-b40d-2a6df94a1f0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "96134686-66fc-488f-ae5f-a64fa2d802dc",
            "e23e447f-053a-4212-968f-aab4ec3d0e30",
            "7ad4b1d6-05eb-40c0-9ed4-4ddcd23505a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "97ddc078-17c1-4f18-b330-c1165010efea",
          "title": "factors/ooba",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "42cd9da2-e73c-4312-87f1-3d8da2816e88",
              "parentUUID": "97ddc078-17c1-4f18-b330-c1165010efea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c82facd0-88b1-409c-b347-278911fe3b71",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "eb099cd3-53c9-4af8-a717-eb5e2a6651c8",
                  "parentUUID": "c82facd0-88b1-409c-b347-278911fe3b71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nawait mfkdf.setup.factors\n  .ooba({\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 'foo'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 0\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    length: 100\n  })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: '12345'\n  })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .ooba({\n    key: keyPair.publicKey,\n    params: '12345'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9480eb35-bee4-4e4e-8d3e-29f04c38df49",
                  "parentUUID": "c82facd0-88b1-409c-b347-278911fe3b71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb099cd3-53c9-4af8-a717-eb5e2a6651c8",
                "9480eb35-bee4-4e4e-8d3e-29f04c38df49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 240,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "42cd9da2-e73c-4312-87f1-3d8da2816e88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "83766cb0-a862-43f9-91c2-91cdf01f6164",
          "title": "persistence",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "2e8e3aa9-f08b-4879-b872-fa7ae5f70b65",
              "parentUUID": "83766cb0-a862-43f9-91c2-91cdf01f6164",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "8c056549-29a8-46ae-a303-fa911b44d97a",
              "parentUUID": "83766cb0-a862-43f9-91c2-91cdf01f6164",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e8e3aa9-f08b-4879-b872-fa7ae5f70b65",
            "8c056549-29a8-46ae-a303-fa911b44d97a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3854b8dd-ea99-45f2-932c-862955323c22",
          "title": "factors/question",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "c1c4a05d-2308-4b35-a542-26252737f247",
              "parentUUID": "3854b8dd-ea99-45f2-932c-862955323c22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', {\n    question: 'What is the name of your first pet?'\n  })\n])\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    question: mfkdf.derive.factors.question('Rex')\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "012dca20-12ca-428a-bd06-bdcc9bde1bf2",
              "parentUUID": "3854b8dd-ea99-45f2-932c-862955323c22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "64a45b9c-04e1-4c84-8ba3-912f01332790",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "a45a19a4-bf2f-4e2e-9dbc-bda61c9c0c24",
                  "parentUUID": "64a45b9c-04e1-4c84-8ba3-912f01332790",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .question(12345)\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .question('hello', { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .question('hello', { question: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fd4556c7-a7d2-41f3-ac14-8ca97470dda8",
                  "parentUUID": "64a45b9c-04e1-4c84-8ba3-912f01332790",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a45a19a4-bf2f-4e2e-9dbc-bda61c9c0c24",
                "fd4556c7-a7d2-41f3-ac14-8ca97470dda8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "c1c4a05d-2308-4b35-a542-26252737f247",
            "012dca20-12ca-428a-bd06-bdcc9bde1bf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "081c40e8-8a97-4d38-9537-46ab5302303b",
          "title": "factors/stack",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: 12345 }\n  )\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "21e07fa7-fab2-46f2-a90d-1043bf2383ac",
              "parentUUID": "081c40e8-8a97-4d38-9537-46ab5302303b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors\n  .stack(\n    [\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ],\n    { id: '' }\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "398bb1c9-1d9a-4929-aa15-2b414efcb1f5",
              "parentUUID": "081c40e8-8a97-4d38-9537-46ab5302303b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ],\n      { id: 'stack1' }\n    ),\n    await mfkdf.setup.factors.stack(\n      [\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        })\n      ],\n      { id: 'stack2' }\n    )\n  ],\n  { threshold: 1 }\n)\nsetup.policy.factors[0].params.should.not.have.property('hmac')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "1dd1d106-10e2-4e70-a199-813a485547d0",
              "parentUUID": "081c40e8-8a97-4d38-9537-46ab5302303b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21e07fa7-fab2-46f2-a90d-1043bf2383ac",
            "398bb1c9-1d9a-4929-aa15-2b414efcb1f5",
            "1dd1d106-10e2-4e70-a199-813a485547d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "47992924-7446-4221-84c8-399a0965bca6",
          "title": "factors/totp",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "size",
              "fullTitle": "factors/totp size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('hello world')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8fe7107e-33bb-4e1e-8a3c-2f23e5d40645",
              "parentUUID": "47992924-7446-4221-84c8-399a0965bca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "d806ebdb-3ffe-427b-83fb-379f278b6949",
              "parentUUID": "47992924-7446-4221-84c8-399a0965bca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "8f02bbd0-4fb3-4732-b9c0-374d4448408d",
              "parentUUID": "47992924-7446-4221-84c8-399a0965bca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([await mfkdf.setup.factors.totp()])",
              "err": {},
              "uuid": "e627ad91-e7cf-4837-a5bf-c5f202c50bd7",
              "parentUUID": "47992924-7446-4221-84c8-399a0965bca6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "6064e6f1-cf96-405b-a29e-f6713df15dc4",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 359,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597\n  })\n])\nawait mfkdf.derive\n  .key(setup.policy, {\n    totp: mfkdf.derive.factors.totp(953265, { time: 1750430943604 })\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5c97f1a5-6792-41d4-a482-dfa4b2e7dd80",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "633cc002-0e54-4ec1-8441-a2ea2a256222",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "211041cc-5dc9-45ca-bc1f-d5d359df8f75",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: 12345\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fc3a4a5a-eec7-4f29-992f-de9ba0e4efa3",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    id: ''\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "968c2f66-3ce5-422a-b844-48d89d8b407f",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a99b83fc-c33c-4c3c-bf52-0049aee22c99",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 4\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6629f805-56c3-4c7d-b82d-fe3e5c5d1bbc",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    digits: 9\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6d4a825b-2d2b-4ab8-bf86-200ac1a2b160",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    hash: 'sha123'\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9e91bcc7-eaba-4610-9971-a7b432404716",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    secret: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "12fbc68d-388d-4bba-8c7a-813411400943",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "57c51e58-e838-4e0e-9a56-771773767510",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    time: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d071771d-0410-4bda-bb8b-c73f5af6bffa",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8a535458-b944-45c4-b611-018a6259188e",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    step: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9168ff92-b03e-4802-a298-23fefbd998fc",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "75d6b851-3f32-4b41-8fed-8914b3b8ca08",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors\n  .totp({\n    window: -1\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ddbbf151-3958-4655-a8e6-025c684a6eea",
                  "parentUUID": "e6b444e7-e3b8-4cd9-9591-b3204b6da595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6064e6f1-cf96-405b-a29e-f6713df15dc4",
                "5c97f1a5-6792-41d4-a482-dfa4b2e7dd80",
                "633cc002-0e54-4ec1-8441-a2ea2a256222",
                "211041cc-5dc9-45ca-bc1f-d5d359df8f75",
                "fc3a4a5a-eec7-4f29-992f-de9ba0e4efa3",
                "968c2f66-3ce5-422a-b844-48d89d8b407f",
                "a99b83fc-c33c-4c3c-bf52-0049aee22c99",
                "6629f805-56c3-4c7d-b82d-fe3e5c5d1bbc",
                "6d4a825b-2d2b-4ab8-bf86-200ac1a2b160",
                "9e91bcc7-eaba-4610-9971-a7b432404716",
                "12fbc68d-388d-4bba-8c7a-813411400943",
                "57c51e58-e838-4e0e-9a56-771773767510",
                "d071771d-0410-4bda-bb8b-c73f5af6bffa",
                "8a535458-b944-45c4-b611-018a6259188e",
                "9168ff92-b03e-4802-a298-23fefbd998fc",
                "75d6b851-3f32-4b41-8fed-8914b3b8ca08",
                "ddbbf151-3958-4655-a8e6-025c684a6eea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 363,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "8fe7107e-33bb-4e1e-8a3c-2f23e5d40645",
            "d806ebdb-3ffe-427b-83fb-379f278b6949",
            "8f02bbd0-4fb3-4732-b9c0-374d4448408d",
            "e627ad91-e7cf-4837-a5bf-c5f202c50bd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1233,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c7d6cf9a-0935-4d43-9b56-f90a6e02a002",
          "title": "factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "9a035281-ac98-4676-8dea-088437188b06",
              "parentUUID": "c7d6cf9a-0935-4d43-9b56-f90a6e02a002",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid1',\n      uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid2',\n      uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    }),\n    await mfkdf.setup.factors.uuid({\n      id: 'uuid3',\n      uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    })\n  ],\n  { threshold: 2 }\n)\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    )\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c'\n    )\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d'\n    )\n  },\n  false\n)\nconst derive4 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    uuid1: mfkdf.derive.factors.uuid(\n      '9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'\n    ),\n    uuid2: mfkdf.derive.factors.uuid(\n      '1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'\n    ),\n    uuid3: mfkdf.derive.factors.uuid(\n      '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n    )\n  },\n  false\n)\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "300e7070-db2d-47b0-9107-0f33dd2266fb",
              "parentUUID": "c7d6cf9a-0935-4d43-9b56-f90a6e02a002",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a035281-ac98-4676-8dea-088437188b06",
            "300e7070-db2d-47b0-9107-0f33dd2266fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "04887229-dafb-46b9-ac0a-f3564d0d825c",
          "title": "entropy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "a396d58f-bcf3-4209-9302-baec9a7d6fa4",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "0a0193a2-22ad-4eac-bfe2-2b5959038db6",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "6b60d6b9-ff73-48dc-ad73-df8d1d40f4be",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "3a4eacc8-2dcc-4000-9620-f2daf4364acf",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "9d42cfd7-8a54-476b-ba59-3625bd4dd5fe",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "550b8dec-5a11-4656-a553-8788828adfc3",
              "parentUUID": "04887229-dafb-46b9-ac0a-f3564d0d825c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a396d58f-bcf3-4209-9302-baec9a7d6fa4",
            "0a0193a2-22ad-4eac-bfe2-2b5959038db6",
            "6b60d6b9-ff73-48dc-ad73-df8d1d40f4be",
            "3a4eacc8-2dcc-4000-9620-f2daf4364acf",
            "9d42cfd7-8a54-476b-ba59-3625bd4dd5fe",
            "550b8dec-5a11-4656-a553-8788828adfc3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 794,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
          "title": "integrity",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\integrity.js",
          "file": "\\test\\features\\integrity.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "disabled",
              "fullTitle": "integrity disabled",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  false\n)",
              "err": {},
              "uuid": "6d6991a3-0bba-4408-bf0d-d7003f1b93ee",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "integrity safety",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "249ec025-e29e-4251-a1b3-ccce8a3cd582",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "liveness",
              "fullTitle": "integrity liveness",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)",
              "err": {},
              "uuid": "f0b03867-46ce-4a60-aaab-4c2d1f3e37a2",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "$id",
              "fullTitle": "integrity $id",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.$id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "354b2b6f-b50d-4ffb-ae9c-f2691c3e6ff2",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "threshold",
              "fullTitle": "integrity threshold",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.threshold += 1\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "7920e958-cd25-4418-97e4-e496d40d92ee",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "salt",
              "fullTitle": "integrity salt",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.salt = 'Ny9+L9LQHOKh1x3Acqy7pMb9JaEIfNfxU/TsDON+Ht4='\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d1f09f97-38e5-483c-9dba-f83980eba44e",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "factor/id",
              "fullTitle": "integrity factor/id",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  { integrity: true }\n)\n// Tamper with policy\nsetup.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "e280573d-8bd3-445d-af98-2c67e786eee1",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "derive",
              "fullTitle": "integrity derive",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ]),\n  { integrity: true }\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\n// Tamper with policy\nderive.policy.factors[0].id = 'tampered'\nawait mfkdf.policy\n  .derive(\n    derive.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2'),\n      password3: mfkdf.derive.factors.password('password3'),\n      password4: mfkdf.derive.factors.password('password4')\n    },\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "b8b4657b-ff9b-4634-b122-cd527e19080c",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitution",
              "fullTitle": "integrity reconstitution",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2, integrity: true }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password3: mfkdf.derive.factors.password('differentPassword3')\n  },\n  true\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "310481ab-a725-4fc1-bb11-402df90688f0",
              "parentUUID": "075ea9b7-fb11-43df-920d-f4a0ac4b88c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d6991a3-0bba-4408-bf0d-d7003f1b93ee",
            "249ec025-e29e-4251-a1b3-ccce8a3cd582",
            "f0b03867-46ce-4a60-aaab-4c2d1f3e37a2",
            "354b2b6f-b50d-4ffb-ae9c-f2691c3e6ff2",
            "7920e958-cd25-4418-97e4-e496d40d92ee",
            "d1f09f97-38e5-483c-9dba-f83980eba44e",
            "e280573d-8bd3-445d-af98-2c67e786eee1",
            "b8b4657b-ff9b-4634-b122-cd527e19080c",
            "310481ab-a725-4fc1-bb11-402df90688f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b37aa657-7dc1-4234-99c8-68736b392187",
          "title": "policy",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d004f3b-f228-48d5-b69c-851957ace9c2",
              "title": "validate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "b9da9780-7fac-4484-97af-aed5a4406d85",
                  "parentUUID": "1d004f3b-f228-48d5-b69c-851957ace9c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.policy\n  .setup(\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password2'\n        })\n      )\n    )\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c8debf0f-3807-4a28-ad65-fdcd0cf30918",
                  "parentUUID": "1d004f3b-f228-48d5-b69c-851957ace9c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9da9780-7fac-4484-97af-aed5a4406d85",
                "c8debf0f-3807-4a28-ad65-fdcd0cf30918"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "336b9ba5-278b-41b4-a983-3ed03b6c33de",
              "title": "evaluate",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .true",
                  "err": {},
                  "uuid": "08e8be94-9593-4a19-9ee6-38321c00889e",
                  "parentUUID": "336b9ba5-278b-41b4-a983-3ed03b6c33de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be\n  .true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be\n  .false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be\n  .false",
                  "err": {},
                  "uuid": "f3b2e286-3d8b-431c-8560-1d365b36074c",
                  "parentUUID": "336b9ba5-278b-41b4-a983-3ed03b6c33de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08e8be94-9593-4a19-9ee6-38321c00889e",
                "f3b2e286-3d8b-431c-8560-1d365b36074c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
              "title": "derive",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "eb74803d-88a6-40e3-8b2f-4137239aace4",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a7fb514d-51a2-42e4-a5bb-5aeb0f80f809",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "fe883a9c-3f18-46d2-a249-fb5a8dd6d4fe",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "62b3aeb4-ed9e-40d6-941a-cd6b7cc01e28",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', {\n        id: 'password3'\n      }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "8ff58987-ccb3-4c69-89f1-c75923d1ae58",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f73b3d85-91d0-4030-88ab-a64a5879f8fb",
                  "parentUUID": "5cf00e94-2bfd-42ad-bf34-e478d23e9bb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb74803d-88a6-40e3-8b2f-4137239aace4",
                "a7fb514d-51a2-42e4-a5bb-5aeb0f80f809",
                "fe883a9c-3f18-46d2-a249-fb5a8dd6d4fe",
                "62b3aeb4-ed9e-40d6-941a-cd6b7cc01e28",
                "8ff58987-ccb3-4c69-89f1-c75923d1ae58",
                "f73b3d85-91d0-4030-88ab-a64a5879f8fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 467,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "aac329bc-7fe5-4741-9e53-28459fd59e0c",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', {\n          id: 'password1'\n        }),\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n])\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4'),\n    password6: mfkdf.derive.factors.password('password6')\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "01514468-46db-4d67-9e2b-d2b34c835fc5",
                  "parentUUID": "aac329bc-7fe5-4741-9e53-28459fd59e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', {\n          id: 'password2'\n        }),\n        await mfkdf.setup.factors.password('password3', {\n          id: 'password3'\n        })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', {\n          id: 'password4'\n        }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', {\n            id: 'password5'\n          }),\n          await mfkdf.setup.factors.password('password6', {\n            id: 'password6'\n          })\n        )\n      )\n    )\n  )\n)\nawait mfkdf.policy\n  .derive(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ac8c22f6-6346-4d3a-9416-c28bbe67bd65",
                  "parentUUID": "aac329bc-7fe5-4741-9e53-28459fd59e0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01514468-46db-4d67-9e2b-d2b34c835fc5",
                "ac8c22f6-6346-4d3a-9416-c28bbe67bd65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
          "title": "reconstitution",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 3, integrity: false }\n)\nconst key = setup.key.toString('hex')\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "24ceff35-8fe3-42a9-840d-8c8564f23faf",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)\nawait derive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password2: mfkdf.derive.factors.password('password2')\n  })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "638bcb0d-4cf1-4856-88a5-f7d8052a6144",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nawait mfkdf.derive\n  .key(setup.policy, {\n    password1: mfkdf.derive.factors.password('password1'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n  .should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "b00dea1e-540b-4358-bd2b-72f0fc5c2b1b",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "316f0af8-de33-406d-bf34-f2f43292b6e2",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "387f1785-722d-42bf-8038-1759ea90cfed",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  })\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "b0fd6839-441d-41b6-b7e5-a8d74ec296bf",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', {\n    id: 'password3'\n  }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "e2c0013a-2477-42ef-bc36-0457c20e2b7b",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(\n  ['password1'],\n  [\n    await mfkdf.setup.factors.password('otherPassword2', {\n      id: 'password2'\n    })\n  ],\n  2\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "6fae0479-f860-4f99-bfa8-b06ae5dbeba5",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "5a5c14ff-f64f-4d26-affa-0bcf29b80f5d",
              "parentUUID": "238e3cb1-2fed-4cde-aa1e-a9e6be2793eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
              "title": "errors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [12345],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "91897903-1807-43de-a9a8-a6b3e6082570",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    ['password4'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8149c875-a939-4a94-b627-2603d612705e",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 2 }\n)\nawait setup\n  .reconstitute(\n    ['password3'],\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      }),\n      await mfkdf.setup.factors.password('diffPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c524c5bb-a54e-4a03-a21c-9b85d3a83425",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    'hello',\n    [\n      await mfkdf.setup.factors.password('otherPassword2', {\n        id: 'password2'\n      })\n    ],\n    2\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d00c09bd-0de4-4293-b1a9-e866b75d1028",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], '12345', 2)\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ec5f588e-2709-46ad-a3b3-7fe8094ebebb",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute([], [], '12345')\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "842f97b9-9ebd-4dfa-92c6-852c672813c9",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "bade9ecc-4e12-41fc-9a61-b67114cce065",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 12345,\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e7fa445a-7052-49f2-a8b3-f617f945eb2c",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: '',\n        id: 'password4',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a6320ec1-0233-483f-ac49-86196640124a",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 12345,\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "47c1cdd0-f012-417b-9c7c-9ecdd2ebf712",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: '',\n        data: Buffer.from('password4', 'utf-8'),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1886ff81-c667-4167-b6dd-fc38110b8ad8",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: 12345,\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "6c9d5dfd-e68f-4f33-b6f6-cd02525fd745",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from(''),\n        params: async () => {\n          return {}\n        },\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d52251ea-5146-419d-aece-772cdb13b84a",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: 12345,\n        output: async () => {\n          return {}\n        }\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3090dc0d-55c9-4332-afac-8bc7dc076d8b",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup\n  .reconstitute(\n    [],\n    [\n      {\n        type: 'password',\n        id: 'password4',\n        data: Buffer.from('password4'),\n        params: async () => {\n          return {}\n        },\n        output: 12345\n      }\n    ],\n    3\n  )\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b6cb60cc-b7e0-415d-ae31-34621cbde744",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' })\n  ],\n  { threshold: 3 }\n)\nawait setup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "74f8500c-ebc9-4fee-9ce5-289e38f29625",
                  "parentUUID": "86b9f0f9-38c3-4295-86df-3f24dc7e3650",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91897903-1807-43de-a9a8-a6b3e6082570",
                "8149c875-a939-4a94-b627-2603d612705e",
                "c524c5bb-a54e-4a03-a21c-9b85d3a83425",
                "d00c09bd-0de4-4293-b1a9-e866b75d1028",
                "ec5f588e-2709-46ad-a3b3-7fe8094ebebb",
                "842f97b9-9ebd-4dfa-92c6-852c672813c9",
                "bade9ecc-4e12-41fc-9a61-b67114cce065",
                "e7fa445a-7052-49f2-a8b3-f617f945eb2c",
                "a6320ec1-0233-483f-ac49-86196640124a",
                "47c1cdd0-f012-417b-9c7c-9ecdd2ebf712",
                "1886ff81-c667-4167-b6dd-fc38110b8ad8",
                "6c9d5dfd-e68f-4f33-b6f6-cd02525fd745",
                "d52251ea-5146-419d-aece-772cdb13b84a",
                "3090dc0d-55c9-4332-afac-8bc7dc076d8b",
                "b6cb60cc-b7e0-415d-ae31-34621cbde744",
                "74f8500c-ebc9-4fee-9ce5-289e38f29625"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 337,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "24ceff35-8fe3-42a9-840d-8c8564f23faf",
            "638bcb0d-4cf1-4856-88a5-f7d8052a6144",
            "b00dea1e-540b-4358-bd2b-72f0fc5c2b1b",
            "316f0af8-de33-406d-bf34-f2f43292b6e2",
            "387f1785-722d-42bf-8038-1759ea90cfed",
            "b0fd6839-441d-41b6-b7e5-a8d74ec296bf",
            "e2c0013a-2477-42ef-bc36-0457c20e2b7b",
            "6fae0479-f860-4f99-bfa8-b06ae5dbeba5",
            "5a5c14ff-f64f-4d26-affa-0bcf29b80f5d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 546,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a1ce6ee4-8152-458a-9db9-609c7c2ef1cc",
          "title": "stage",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\features\\stage.js",
          "file": "\\test\\features\\stage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "basic",
              "fullTitle": "stage basic",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password')\n)\nconst setup = await mfkdf.setup.key([passwordSetup])\nconst passwordDerive = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: passwordDerive\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "ca64442f-da5c-452c-9173-48120c6885b1",
              "parentUUID": "a1ce6ee4-8152-458a-9db9-609c7c2ef1cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "full",
              "fullTitle": "stage full",
              "timedOut": false,
              "duration": 478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  {\n    hash: 'SHA-256',\n    modulusLength: 2048,\n    name: 'RSA-OAEP',\n    publicExponent: new Uint8Array([1, 0, 1])\n  },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst init = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n])\nconst passwordSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.password('password'),\n  init.key\n)\nconst hmacsha1Setup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hmacsha1(),\n  init.key\n)\nconst hotpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.hotp({ secret: Buffer.from('abcdefghijklmnopqrst') }),\n  init.key\n)\nconst oobaSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.ooba({ key: keyPair.publicKey, params: {} }),\n  init.key\n)\nconst questionSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.question('fido'),\n  init.key\n)\nconst totpSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  }),\n  init.key\n)\nconst uuidSetup = await mfkdf.stage.factor.setup(\n  mfkdf.setup.factors.uuid({\n    uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n  }),\n  init.key\n)\nconst setup = await mfkdf.setup.key([\n  passwordSetup,\n  hmacsha1Setup,\n  hotpSetup,\n  oobaSetup,\n  questionSetup,\n  totpSetup,\n  uuidSetup\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(\n  setup.policy.factors[1].params.challenge,\n  'hex'\n)\nconst response = crypto\n  .createHmac('sha1', secret)\n  .update(challenge)\n  .digest()\nconst next = setup.policy.factors[3].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt(\n  { name: 'RSA-OAEP' },\n  keyPair.privateKey,\n  Buffer.from(next, 'hex')\n)\nconst json = JSON.parse(Buffer.from(decrypted).toString())\nconst code = json.code\nconst password = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.password('password'),\n  setup.policy.factors[0].params,\n  setup.key\n)\nconst hmacsha1 = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hmacsha1(response),\n  setup.policy.factors[1].params,\n  setup.key\n)\nconst hotp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.hotp(241063),\n  setup.policy.factors[2].params,\n  setup.key\n)\nconst ooba = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.ooba(code),\n  setup.policy.factors[3].params,\n  setup.key\n)\nconst question = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.question('fido'),\n  setup.policy.factors[4].params,\n  setup.key\n)\nconst totp = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.totp(953265, { time: 1 }),\n  setup.policy.factors[5].params,\n  setup.key\n)\nconst uuid = await mfkdf.stage.factor.derive(\n  mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  setup.policy.factors[6].params,\n  setup.key\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password,\n  hmacsha1,\n  hotp,\n  ooba,\n  question,\n  totp,\n  uuid\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "4c9d28bf-76d2-4aaf-ad28-6eb275fc8d63",
              "parentUUID": "a1ce6ee4-8152-458a-9db9-609c7c2ef1cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca64442f-da5c-452c-9173-48120c6885b1",
            "4c9d28bf-76d2-4aaf-ad28-6eb275fc8d63"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "23bd2fa2-546c-4900-bd15-140d085ee16a",
          "title": "mfkdf2/changes",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
          "file": "\\test\\mfkdf2\\changes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d275e9a1-7ac8-4571-83f1-da88db4fa28c",
              "title": "key-size-256",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes key-size-256 default",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "8e5e23a0-1274-40d6-8403-a44cdd5392ea",
                  "parentUUID": "d275e9a1-7ac8-4571-83f1-da88db4fa28c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override",
                  "fullTitle": "mfkdf2/changes key-size-256 override",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "982f6e38-4680-42f5-8b2b-6409e6eadd3f",
                  "parentUUID": "d275e9a1-7ac8-4571-83f1-da88db4fa28c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e5e23a0-1274-40d6-8403-a44cdd5392ea",
                "982f6e38-4680-42f5-8b2b-6409e6eadd3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 99,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e9fadfe4-0c75-4f72-a40c-f0cf06da956a",
              "title": "kdf-argon2id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "mfkdf2/changes kdf-argon2id default",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { kdf: 'hkdf' }\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nsetup.key.length.should.equal(32)\nderive.key.length.should.equal(32)",
                  "err": {},
                  "uuid": "99464b09-67fb-479e-b413-c0842a19eb0a",
                  "parentUUID": "e9fadfe4-0c75-4f72-a40c-f0cf06da956a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/time",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/time",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.time = 4\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a588c9af-95ef-46d1-9004-8f545afcb96a",
                  "parentUUID": "e9fadfe4-0c75-4f72-a40c-f0cf06da956a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/mismatch/memory",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/mismatch/memory",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 1024 }\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nsetup.policy.memory = 2048\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "4c3d270e-5884-4f53-a6f6-c6915bf27131",
                  "parentUUID": "e9fadfe4-0c75-4f72-a40c-f0cf06da956a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "override/matching",
                  "fullTitle": "mfkdf2/changes kdf-argon2id override/matching",
                  "timedOut": false,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 65536, time: 3 }\n)\nsetup.policy.memory.should.equal(65536)\nsetup.policy.time.should.equal(3)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "ec96db96-1de0-4c92-9c53-8cd82e2fb639",
                  "parentUUID": "e9fadfe4-0c75-4f72-a40c-f0cf06da956a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99464b09-67fb-479e-b413-c0842a19eb0a",
                "a588c9af-95ef-46d1-9004-8f545afcb96a",
                "4c3d270e-5884-4f53-a6f6-c6915bf27131",
                "ec96db96-1de0-4c92-9c53-8cd82e2fb639"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 691,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ca9fb918-47d6-4745-ab99-aa67524fcd0d",
              "title": "encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\changes.js",
              "file": "\\test\\mfkdf2\\changes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "aes-256-ecb",
                  "fullTitle": "mfkdf2/changes encryption aes-256-ecb",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const stretched = await crypto.randomBytes(32)\nconst share = await crypto.randomBytes(32)\nconst cipher = crypto.createCipheriv('AES-256-ECB', stretched, null)\ncipher.setAutoPadding(false)\nconst pad = Buffer.concat([cipher.update(share), cipher.final()])\nconst decipher = crypto.createDecipheriv('AES-256-ECB', stretched, null)\ndecipher.setAutoPadding(false)\nconst share2 = Buffer.concat([decipher.update(pad), decipher.final()])\nshare2.toString('hex').should.equal(share.toString('hex'))",
                  "err": {},
                  "uuid": "02ccb7e8-72c3-4ac3-a588-5b3cb188beae",
                  "parentUUID": "ca9fb918-47d6-4745-ab99-aa67524fcd0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02ccb7e8-72c3-4ac3-a588-5b3cb188beae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c6c0da8-2cfe-4089-ac5b-b2fbb8321d22",
          "title": "mfkdf2/hints",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\hints.js",
          "file": "\\test\\mfkdf2\\hints.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getHint",
              "fullTitle": "mfkdf2/hints getHint",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst hint = setup.getHint('password1', 7)\nhint.should.be.a('string')\nhint.length.should.equal(7)\nconst hinta = setup.getHint('password1', 24)\nhinta.should.be.a('string')\nhinta.length.should.equal(24)\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderived.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst hint2 = derived.getHint('password1', 7)\nhint2.should.equal(hint)\nconst hinta2 = derived.getHint('password1', 24)\nhinta2.should.equal(hinta)\nconst derived2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('wrongpassword')\n  },\n  false\n)\nconst hinta3 = derived2.getHint('password1', 24)\nhinta3.should.not.equal(hinta)",
              "err": {},
              "uuid": "a91df7ce-3ab9-4a97-aa72-9884255bdb9b",
              "parentUUID": "2c6c0da8-2cfe-4089-ac5b-b2fbb8321d22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addHint",
              "fullTitle": "mfkdf2/hints addHint",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n)\nsetup.addHint('password1')\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(7)\nsetup.addHint('password1', 24)\nsetup.policy.factors[0].hint.should.be.a('string')\nsetup.policy.factors[0].hint.length.should.equal(24)\nawait mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password2')\n    },\n    false\n  )\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "9f32dfe4-e4bc-4673-b269-aa19e1d79be7",
              "parentUUID": "2c6c0da8-2cfe-4089-ac5b-b2fbb8321d22",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/hints coverage",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  {\n    integrity: false\n  }\n);\n(() => setup.getHint()).should.throw(TypeError);\n(() => setup.getHint(123)).should.throw(TypeError);\n(() => setup.getHint('unknown')).should.throw(RangeError);\n(() => setup.getHint('password1', 'string')).should.throw(TypeError);\n(() => setup.getHint('password1', 0)).should.throw(TypeError);\n(() => setup.getHint('password1', 300)).should.throw(TypeError)",
              "err": {},
              "uuid": "19271e88-de05-462b-b8c1-06f82eb625db",
              "parentUUID": "2c6c0da8-2cfe-4089-ac5b-b2fbb8321d22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a91df7ce-3ab9-4a97-aa72-9884255bdb9b",
            "9f32dfe4-e4bc-4673-b269-aa19e1d79be7",
            "19271e88-de05-462b-b8c1-06f82eb625db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "610980d0-3172-4af6-a073-73a51f5e1853",
          "title": "mfkdf2/mfdpg2",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
          "file": "\\test\\mfkdf2\\mfdpg.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8af05320-455a-4f25-8d5c-416537eb5546",
              "title": "basics",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "portability",
                  "fullTitle": "mfkdf2/mfdpg2 basics portability",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11);\n/[a-zA-Z]{6,10}/.test(password).should.be.true\nconst password2 = setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst password3 = derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.should.equal(password3)",
                  "err": {},
                  "uuid": "077fa992-efb2-44fe-8d02-46851df9fb55",
                  "parentUUID": "8af05320-455a-4f25-8d5c-416537eb5546",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-example",
                  "fullTitle": "mfkdf2/mfdpg2 basics full-example",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst policy = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password3 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  policy\n)\npassword1.should.equal(password3)",
                  "err": {},
                  "uuid": "ac677bea-25d9-4b66-8352-564bcce80211",
                  "parentUUID": "8af05320-455a-4f25-8d5c-416537eb5546",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "077fa992-efb2-44fe-8d02-46851df9fb55",
                "ac677bea-25d9-4b66-8352-564bcce80211"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2682f431-c0f3-4e29-8947-7ee4f0a10231",
              "title": "correctness",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness basic-test",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "f8201e13-d155-4f05-b9b4-1409f7df7d41",
                  "parentUUID": "2682f431-c0f3-4e29-8947-7ee4f0a10231",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 correctness full-test",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)",
                  "err": {},
                  "uuid": "3a4476c3-86f6-44d7-8d12-96dfde99e23e",
                  "parentUUID": "2682f431-c0f3-4e29-8947-7ee4f0a10231",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8201e13-d155-4f05-b9b4-1409f7df7d41",
                "3a4476c3-86f6-44d7-8d12-96dfde99e23e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e327855f-5cca-4c4c-9ae3-4a0e0033e10c",
              "title": "safety",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety basic-test",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst setup2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup1.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst password2 = await setup2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password2)",
                  "err": {},
                  "uuid": "b5e8f435-ca66-404b-8e13-7b5881d603fa",
                  "parentUUID": "e327855f-5cca-4c4c-9ae3-4a0e0033e10c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full-test",
                  "fullTitle": "mfkdf2/mfdpg2 safety full-test",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password1 = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nconst password2 = await derive.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.equal(password2)\nconst derive2 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nconst password3 = await derive2.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword1.should.not.equal(password3)",
                  "err": {},
                  "uuid": "146b3cb1-1a29-4849-ab65-e36723af89a6",
                  "parentUUID": "e327855f-5cca-4c4c-9ae3-4a0e0033e10c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5e8f435-ca66-404b-8e13-7b5881d603fa",
                "146b3cb1-1a29-4849-ab65-e36723af89a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a52f23db-8eb4-45d7-b68f-7f1be17cbd7a",
              "title": "compatibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\mfdpg.js",
              "file": "\\test\\mfkdf2\\mfdpg.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility basic-policy",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst password = await setup.derivePassword(\n  'example.com',\n  'salt',\n  /[a-zA-Z]{6,10}/\n)\npassword.length.should.be.above(5)\npassword.length.should.be.below(11)",
                  "err": {},
                  "uuid": "d7776bb5-c1f5-44ff-a728-ebfbf3caf304",
                  "parentUUID": "a52f23db-8eb4-45d7-b68f-7f1be17cbd7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "custom-policy",
                  "fullTitle": "mfkdf2/mfdpg2 compatibility custom-policy",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst regex = /([A-Za-z]+[0-9]|[0-9]+[A-Za-z])[A-Za-z0-9]*/\nconst password = await setup.derivePassword('example.com', 'salt', regex)\nregex.test(password).should.be.true",
                  "err": {},
                  "uuid": "90306920-a5e6-4e17-91e3-a28598fa769e",
                  "parentUUID": "a52f23db-8eb4-45d7-b68f-7f1be17cbd7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7776bb5-c1f5-44ff-a728-ebfbf3caf304",
                "90306920-a5e6-4e17-91e3-a28598fa769e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6eb2f7d4-335a-402d-8fb2-051fac6a7716",
          "title": "mfkdf2/passkeys",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\passkeys.js",
          "file": "\\test\\mfkdf2\\passkeys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "liveness",
              "fullTitle": "mfkdf2/passkeys liveness",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  passkey: mfkdf.derive.factors.passkey(prf)\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "806229ae-259d-4348-8833-656bf233cc12",
              "parentUUID": "6eb2f7d4-335a-402d-8fb2-051fac6a7716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "safety",
              "fullTitle": "mfkdf2/passkeys safety",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const prf = await crypto.randomBytes(32)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.passkey(prf)\n])\nconst prf2 = await crypto.randomBytes(32)\nconst derive = await mfkdf.derive.key(\n  setup.policy,\n  {\n    passkey: mfkdf.derive.factors.passkey(prf2)\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "e3e93985-b165-41f3-a483-b58a5a7f14c3",
              "parentUUID": "6eb2f7d4-335a-402d-8fb2-051fac6a7716",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "coverage",
              "fullTitle": "mfkdf2/passkeys coverage",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .passkey('hello')\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: 123 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .passkey(crypto.randomBytes(32), { id: '' })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .passkey(Buffer.from('hello'))\n  .should.be.rejectedWith(RangeError);\n(() => {\n  mfkdf.derive.factors.passkey('hello')\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.passkey(Buffer.from('hello'))\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "3e204a0f-1270-45ad-9801-e7eea9a9b834",
              "parentUUID": "6eb2f7d4-335a-402d-8fb2-051fac6a7716",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "806229ae-259d-4348-8833-656bf233cc12",
            "e3e93985-b165-41f3-a483-b58a5a7f14c3",
            "3e204a0f-1270-45ad-9801-e7eea9a9b834"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 88,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "457b45ab-a0eb-40e6-9e78-1e37af75d119",
          "title": "mfkdf2/security",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
          "file": "\\test\\mfkdf2\\security.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "totp",
              "fullTitle": "mfkdf2/security totp",
              "timedOut": false,
              "duration": 391,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
              "err": {},
              "uuid": "a7f1edfa-6109-4e15-82d7-cf6a5520dd79",
              "parentUUID": "457b45ab-a0eb-40e6-9e78-1e37af75d119",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "fe58bc48-3e35-4b79-aaad-ecb5a79c738b",
              "title": "factor-fungibility",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security factor-fungibility correct",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a77a5472-ac71-48ac-b834-ae350e54c7b0",
                  "parentUUID": "fe58bc48-3e35-4b79-aaad-ecb5a79c738b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "incorrect",
                  "fullTitle": "mfkdf2/security factor-fungibility incorrect",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  )\n)\nconst derive = await mfkdf.policy.derive(\n  setup.policy,\n  {\n    password1: mfkdf.derive.factors.password('password2'),\n    password2: mfkdf.derive.factors.password('password1')\n  },\n  false\n)\nderive.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b850c9f9-548b-499f-82fa-e0d686fea967",
                  "parentUUID": "fe58bc48-3e35-4b79-aaad-ecb5a79c738b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a77a5472-ac71-48ac-b834-ae350e54c7b0",
                "b850c9f9-548b-499f-82fa-e0d686fea967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6508abe5-3e09-4511-9632-9fa516380a72",
              "title": "share-indistinguishability",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "share-size",
                  "fullTitle": "mfkdf2/security share-indistinguishability share-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret = crypto.randomBytes(32)\nconst shares1 = mfkdf.secrets.share(secret, 1, 3)\nshares1.should.have.length(3)\nfor (const share of shares1) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares1.slice(0, 1).concat([null, null]), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null, null].concat(shares1.slice(2, 3)), 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares2 = mfkdf.secrets.share(secret, 2, 3)\nshares2.should.have.length(3)\nfor (const share of shares2) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares2.slice(0, 2).concat([null]), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nmfkdf.secrets\n  .combine([null].concat(shares2.slice(1, 3)), 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nconst shares3 = mfkdf.secrets.share(secret, 3, 3)\nshares3.should.have.length(3)\nfor (const share of shares3) {\n  share.should.have.length(32)\n}\nmfkdf.secrets\n  .combine(shares3.slice(0, 3), 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
                  "err": {},
                  "uuid": "3fdaa851-df8b-4e9c-885c-8539d5398277",
                  "parentUUID": "6508abe5-3e09-4511-9632-9fa516380a72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fdaa851-df8b-4e9c-885c-8539d5398277"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b2197146-17bc-46ba-a48b-94e6f90caf32",
              "title": "share-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security share-encryption correct",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst materialp1 = await mfkdf.derive.factors.password('password1')(\n  setup.policy.factors[0].params\n)\nconst padp1 = Buffer.from(setup.policy.factors[0].pad, 'base64')\nconst stretchedp1 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp1.data,\n    setup.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep1 = xor(padp1, stretchedp1)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword1', { id: 'password1' })\n)\nconst derive2f = await mfkdf.policy.derive(\n  derive.policy,\n  {\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  },\n  false\n)\nderive2f.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(derive.policy, {\n  password1: mfkdf.derive.factors.password('newPassword1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst materialp3 = await mfkdf.derive.factors.password('newPassword1')(\n  derive.policy.factors[0].params\n)\nconst padp3 = Buffer.from(derive.policy.factors[0].pad, 'base64')\nconst stretchedp3 = Buffer.from(\n  hkdfSync(\n    'sha256',\n    materialp3.data,\n    derive.policy.factors[0].salt,\n    '',\n    32\n  )\n)\nconst sharep3 = xor(padp3, stretchedp3)\nawait derive2.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password1' })\n)\nconst derive3 = await mfkdf.policy.derive(derive2.policy, {\n  password1: mfkdf.derive.factors.password('newPassword2'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nsharep1.should.not.equal(sharep3)",
                  "err": {},
                  "uuid": "c1bb0dab-0d4e-4208-833a-f3c3f8d235e6",
                  "parentUUID": "b2197146-17bc-46ba-a48b-94e6f90caf32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1bb0dab-0d4e-4208-833a-f3c3f8d235e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "21ad7c91-b00f-4aa1-a101-7dc6adcd3c3e",
              "title": "factor-secret-encryption",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "hotp",
                  "fullTitle": "mfkdf2/security factor-secret-encryption hotp",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('abcdefghijklmnopqrst')\n  })\n])\nconst recover = xor(\n  Buffer.from(setup.policy.factors[0].params.pad, 'base64'),\n  Buffer.from('abcdefghijklmnopqrst')\n).toString('hex')\nconst key = setup.key.toString('hex').slice(0, recover.length)\nrecover.should.not.equal(key)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(241063)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))",
                  "err": {},
                  "uuid": "c4a6e5b0-272a-4d15-b861-ea816caf4e0a",
                  "parentUUID": "21ad7c91-b00f-4aa1-a101-7dc6adcd3c3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4a6e5b0-272a-4d15-b861-ea816caf4e0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5b59abc8-9d6d-436a-84bd-a15a890beb6a",
              "title": "timing-oracle",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                  "title": "totp/dynamic",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic no-oracle",
                      "timedOut": false,
                      "duration": 438,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([await mfkdf.setup.factors.totp()])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "ccfb69f4-1c24-4790-ab23-ee648b240ad3",
                      "parentUUID": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 509,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "8d6878f1-edf7-4fe3-9e67-28f2e706c829",
                      "parentUUID": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 541,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "7ef5cb93-fd7a-43d3-b909-8cccb5cdd839",
                      "parentUUID": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 514,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code, { oracle })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "274d600e-b3c5-42c6-86b1-e7dec31d0d5e",
                      "parentUUID": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/dynamic invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 543,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ oracle })\n])\nconst code = parseInt(\n  speakeasy.totp({\n    secret: setup.outputs.totp.secret.toString('hex'),\n    encoding: 'hex',\n    step: setup.outputs.totp.period,\n    algorithm: setup.outputs.totp.algorithm,\n    digits: setup.outputs.totp.digits\n  })\n)\nconst oracle2 = {}\ndate = Date.now()\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive2.policy,\n  {\n    totp: mfkdf.derive.factors.totp(code, { oracle2 })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "8886540c-3fb8-4019-a00b-ba209b7397a3",
                      "parentUUID": "6c1a0671-bd52-4ec5-90c8-30e470fc901f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ccfb69f4-1c24-4790-ab23-ee648b240ad3",
                    "8d6878f1-edf7-4fe3-9e67-28f2e706c829",
                    "7ef5cb93-fd7a-43d3-b909-8cccb5cdd839",
                    "274d600e-b3c5-42c6-86b1-e7dec31d0d5e",
                    "8886540c-3fb8-4019-a00b-ba209b7397a3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2545,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                  "title": "totp/static",
                  "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
                  "file": "\\test\\mfkdf2\\security.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "no-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static no-oracle",
                      "timedOut": false,
                      "duration": 443,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, { time: 1 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, { time: 30001 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, { time: 60001 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "a4f6fc6b-3fd7-4da0-a050-f6937c9c143b",
                      "parentUUID": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-fixed-oracle",
                      "timedOut": false,
                      "duration": 460,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "e4df5d60-2bba-442a-be81-266fe02badcd",
                      "parentUUID": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-fixed-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-fixed-oracle",
                      "timedOut": false,
                      "duration": 543,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 123456\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "f1c2094c-1ca4-433b-a085-2fa8222eb64b",
                      "parentUUID": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static valid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 462,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(953265, {\n    time: 1,\n    oracle\n  })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(241063, {\n    time: 30001,\n    oracle\n  })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(361687, {\n    time: 60001,\n    oracle\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "9f7c578b-5270-4bd3-865c-188876076a81",
                      "parentUUID": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid-dynamic-oracle",
                      "fullTitle": "mfkdf2/security timing-oracle totp/static invalid-dynamic-oracle",
                      "timedOut": false,
                      "duration": 546,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const oracle = {}\nlet date = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle[date] = 100000 + i // unique code for each time\n  date += 30 * 1000 // 30 seconds\n}\nconst oracle2 = {}\ndate = 1650430806597\ndate -= date % (30 * 1000) // round to the nearest 30 seconds\nfor (let i = 0; i < 87600; i++) {\n  oracle2[date] = 654321\n  date += 30 * 1000 // 30 seconds\n}\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('abcdefghijklmnopqrst'),\n    time: 1650430806597,\n    oracle\n  })\n])\nconst derive1 = await mfkdf.derive.key(\n  setup.policy,\n  {\n    totp: mfkdf.derive.factors.totp(528258, {\n      time: 1650430943604,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive2 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(99922, {\n      time: 1650430991083,\n      oracle: oracle2\n    })\n  },\n  false\n)\nconst derive3 = await mfkdf.derive.key(\n  derive1.policy,\n  {\n    totp: mfkdf.derive.factors.totp(398884, {\n      time: 1650431018392,\n      oracle: oracle2\n    })\n  },\n  false\n)\nderive1.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.not.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.not.equal(setup.key.toString('hex'))",
                      "err": {},
                      "uuid": "73af0497-162b-46c1-a6f6-8cd2a4f9a25c",
                      "parentUUID": "81bfda52-fd44-4152-a6d0-baf95da0f2f4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a4f6fc6b-3fd7-4da0-a050-f6937c9c143b",
                    "e4df5d60-2bba-442a-be81-266fe02badcd",
                    "f1c2094c-1ca4-433b-a085-2fa8222eb64b",
                    "9f7c578b-5270-4bd3-865c-188876076a81",
                    "73af0497-162b-46c1-a6f6-8cd2a4f9a25c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2454,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b7c12931-f765-4988-b192-71f50c54dcd4",
              "title": "policy-integrity",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\security.js",
              "file": "\\test\\mfkdf2\\security.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "correct",
                  "fullTitle": "mfkdf2/security policy-integrity correct",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "0b065819-5f72-4c3a-a91c-49264a340cb7",
                  "parentUUID": "b7c12931-f765-4988-b192-71f50c54dcd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/$id",
                  "fullTitle": "mfkdf2/security policy-integrity invalid/$id",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nsetup.policy.$id = 'invalid-id'\nawait mfkdf.derive\n  .key(\n    setup.policy,\n    {\n      password1: mfkdf.derive.factors.password('password1'),\n      password2: mfkdf.derive.factors.password('password2')\n    },\n    {},\n    true\n  )\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "966d3d03-140d-4941-a7ec-b24366e6bf2f",
                  "parentUUID": "b7c12931-f765-4988-b192-71f50c54dcd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b065819-5f72-4c3a-a91c-49264a340cb7",
                "966d3d03-140d-4941-a7ec-b24366e6bf2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a7f1edfa-6109-4e15-82d7-cf6a5520dd79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "24f3eb4d-6277-46d0-9c3e-6580f695e07b",
          "title": "mfkdf2/strengthening",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
          "file": "\\test\\mfkdf2\\strengthening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "strengthening-throws",
              "fullTitle": "mfkdf2/strengthening strengthening-throws",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nawait derive\n  .strenthen(-1, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(1.5, 0)\n  .should.be.rejectedWith(TypeError, 'time must be a non-negative integer')\nawait derive\n  .strenthen(0, -1)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )\nawait derive\n  .strenthen(0, 1.5)\n  .should.be.rejectedWith(\n    TypeError,\n    'memory must be a non-negative integer'\n  )",
              "err": {},
              "uuid": "2cce9006-66df-4530-b55d-0541dee696b4",
              "parentUUID": "24f3eb4d-6277-46d0-9c3e-6580f695e07b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-works-multiple-times",
              "fullTitle": "mfkdf2/strengthening strengthening-works-multiple-times",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive.policy.time = 0\nderive.policy.memory = 0\nawait mfkdf.derive\n  .key(derive.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)\nawait derive2.strenthen(3, 16384)\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive3.policy.time.should.equal(3)\nderive3.policy.memory.should.equal(16384)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.policy.time = 0\nderive2.policy.memory = 0\nawait mfkdf.derive\n  .key(derive2.policy, {\n    password1: mfkdf.derive.factors.password('password1')\n  })\n  .should.be.rejectedWith(Error)",
              "err": {},
              "uuid": "b644894d-7a51-4201-9582-22d63b0b02f3",
              "parentUUID": "24f3eb4d-6277-46d0-9c3e-6580f695e07b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-other-factors",
              "fullTitle": "mfkdf2/strengthening strengthening-with-other-factors",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive2.strenthen()\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(0)\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive3.policy.time.should.equal(0)\nderive3.policy.memory.should.equal(0)\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "8ee25d5c-2c0d-4f9c-b136-587d9f7d9662",
              "parentUUID": "24f3eb4d-6277-46d0-9c3e-6580f695e07b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "strengthening-with-reconstitution",
              "fullTitle": "mfkdf2/strengthening strengthening-with-reconstitution",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  }),\n  await mfkdf.setup.factors.password('password2', {\n    id: 'password2'\n  })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(2, 8192)\nderive.policy.time.should.equal(2)\nderive.policy.memory.should.equal(8192)\nawait derive.setThreshold(1)\nawait derive.removeFactor('password2')\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "0c721d5f-02b0-48cc-8ee0-4e8dc8b9fa1f",
              "parentUUID": "24f3eb4d-6277-46d0-9c3e-6580f695e07b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "27b44099-967a-4d56-9eac-9924a5d87460",
              "title": "setup",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening setup time",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 5 }\n)\nsetup.policy.time.should.equal(5)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(5)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "50407c8d-7679-4438-b8e9-72c90d2cea26",
                  "parentUUID": "27b44099-967a-4d56-9eac-9924a5d87460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening setup memory",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { memory: 32768 }\n)\nsetup.policy.memory.should.equal(32768)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(32768)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "040476cd-bfb4-4687-9b8d-1200ad3ba7c3",
                  "parentUUID": "27b44099-967a-4d56-9eac-9924a5d87460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening setup time-and-memory",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('password1', {\n      id: 'password1'\n    })\n  ],\n  { time: 3, memory: 16384 }\n)\nsetup.policy.time.should.equal(3)\nsetup.policy.memory.should.equal(16384)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "1c7536ea-7b1f-4537-be33-3caacedfd71a",
                  "parentUUID": "27b44099-967a-4d56-9eac-9924a5d87460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws",
                  "fullTitle": "mfkdf2/strengthening setup throws",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'time must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { time: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'time must be an integer')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: -1 }\n  )\n  .should.be.rejectedWith(RangeError, 'memory must be non-negative')\nawait mfkdf.setup\n  .key(\n    [\n      await mfkdf.setup.factors.password('password1', {\n        id: 'password1'\n      })\n    ],\n    { memory: 1.5 }\n  )\n  .should.be.rejectedWith(TypeError, 'memory must be an integer')",
                  "err": {},
                  "uuid": "1046aed3-da30-462b-947c-827a36003e7b",
                  "parentUUID": "27b44099-967a-4d56-9eac-9924a5d87460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50407c8d-7679-4438-b8e9-72c90d2cea26",
                "040476cd-bfb4-4687-9b8d-1200ad3ba7c3",
                "1c7536ea-7b1f-4537-be33-3caacedfd71a",
                "1046aed3-da30-462b-947c-827a36003e7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 425,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b5ae848d-1d18-42fc-b0cc-af5b8259dfff",
              "title": "strengthening",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\mfkdf2\\strengthening.js",
              "file": "\\test\\mfkdf2\\strengthening.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "time",
                  "fullTitle": "mfkdf2/strengthening strengthening time",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(5, 0)\nderive.policy.time.should.equal(5)\nderive.policy.memory.should.equal(0)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(5)\nderive2.policy.memory.should.equal(0)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "fbc9aa60-1af0-4460-bddc-d7759bc2a46f",
                  "parentUUID": "b5ae848d-1d18-42fc-b0cc-af5b8259dfff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "memory",
                  "fullTitle": "mfkdf2/strengthening strengthening memory",
                  "timedOut": false,
                  "duration": 161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(0, 32768)\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(32768)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(0)\nderive2.policy.memory.should.equal(32768)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "81b83261-118a-4891-bd65-5d1aa3a9c894",
                  "parentUUID": "b5ae848d-1d18-42fc-b0cc-af5b8259dfff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time-and-memory",
                  "fullTitle": "mfkdf2/strengthening strengthening time-and-memory",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', {\n    id: 'password1'\n  })\n])\nsetup.policy.time.should.equal(0)\nsetup.policy.memory.should.equal(0)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive.policy.time.should.equal(0)\nderive.policy.memory.should.equal(0)\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))\nawait derive.strenthen(3, 16384)\nderive.policy.time.should.equal(3)\nderive.policy.memory.should.equal(16384)\nconst derive2 = await mfkdf.derive.key(derive.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n})\nderive2.policy.time.should.equal(3)\nderive2.policy.memory.should.equal(16384)\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "df396c96-01a3-4a3b-84c2-6e66e8a00f0b",
                  "parentUUID": "b5ae848d-1d18-42fc-b0cc-af5b8259dfff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbc9aa60-1af0-4460-bddc-d7759bc2a46f",
                "81b83261-118a-4891-bd65-5d1aa3a9c894",
                "df396c96-01a3-4a3b-84c2-6e66e8a00f0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 550,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "2cce9006-66df-4530-b55d-0541dee696b4",
            "b644894d-7a51-4201-9582-22d63b0b02f3",
            "8ee25d5c-2c0d-4f9c-b136-587d9f7d9662",
            "0c721d5f-02b0-48cc-8ee0-4e8dc8b9fa1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 779,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3e08e058-7a31-44fa-935e-6226e0890af9",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "5a36664e-68c1-4a9f-bba6-6ac7b8f9e09b",
              "parentUUID": "3e08e058-7a31-44fa-935e-6226e0890af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "4592599e-2b24-4c43-b5b0-4adf5dc5d0b7",
              "parentUUID": "3e08e058-7a31-44fa-935e-6226e0890af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d8887f43-16f3-4632-a737-7f77a12ec38a",
              "parentUUID": "3e08e058-7a31-44fa-935e-6226e0890af9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a36664e-68c1-4a9f-bba6-6ac7b8f9e09b",
            "4592599e-2b24-4c43-b5b0-4adf5dc5d0b7",
            "d8887f43-16f3-4632-a737-7f77a12ec38a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "cf5a079c-e6cf-4ac7-a1d0-b930e4b96ed0",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  1,\n  5\n)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a555cc65-578a-41c4-936d-dbb68b48353e",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine(\n  [shares[0], shares[1], shares[2]],\n  2,\n  3\n)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "9572c8c7-fbbe-4907-810f-7ffc1555f722",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "64d475de-26b2-45bc-b924-83a27015fd11",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(\n  Buffer.from('35002a68d437', 'hex'),\n  5,\n  255\n)\nshares.should.be.an('array').of.length(255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 250; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 255)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[251] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "727ba8be-eae5-4493-99ae-6ef5c3aeacb1",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)",
              "err": {},
              "uuid": "22189195-177b-4952-b94c-1dd3a0b10c18",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "2ecf38cf-7125-468f-8ef7-4ab0a103fff1",
              "parentUUID": "6a84494a-f78b-4a46-af3b-9a2a62f45051",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf5a079c-e6cf-4ac7-a1d0-b930e4b96ed0",
            "a555cc65-578a-41c4-936d-dbb68b48353e",
            "9572c8c7-fbbe-4907-810f-7ffc1555f722",
            "64d475de-26b2-45bc-b924-83a27015fd11",
            "727ba8be-eae5-4493-99ae-6ef5c3aeacb1",
            "22189195-177b-4952-b94c-1dd3a0b10c18",
            "2ecf38cf-7125-468f-8ef7-4ab0a103fff1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "24c028a6-69ec-45d5-9136-9691068d9c9f",
          "title": "secrets",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\new.js",
          "file": "\\test\\secrets\\new.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "share-size",
              "fullTitle": "secrets share-size",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let secret = crypto.randomBytes(32)\nlet shares = mfkdf.secrets.share(secret, 1, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[0].should.equal(secret)\nshares[1].length.should.equal(32)\nshares[1].should.equal(secret)\nshares[2].length.should.equal(32)\nshares[2].should.equal(secret)\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[2] = null\nmfkdf.secrets\n  .combine(shares, 1, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 2, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nshares[1] = null\nmfkdf.secrets\n  .combine(shares, 2, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))\nsecret = crypto.randomBytes(32)\nshares = mfkdf.secrets.share(secret, 3, 3)\nshares.should.be.an('array').of.length(3)\nshares[0].length.should.equal(32)\nshares[1].length.should.equal(32)\nshares[2].length.should.equal(32)\nmfkdf.secrets\n  .combine(shares, 3, 3)\n  .toString('hex')\n  .should.equal(secret.toString('hex'))",
              "err": {},
              "uuid": "13a51d76-46af-4593-95bc-9637607d711c",
              "parentUUID": "24c028a6-69ec-45d5-9136-9691068d9c9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13a51d76-46af-4593-95bc-9637607d711c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
          "title": "secrets/recover",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "1979f213-6361-4595-b603-c6f1315920d5",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "3ba9247e-11bc-4a49-b853-303e2fea4014",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "a8beae29-c495-4b87-a986-2ddf9ecb9089",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "378a7c1a-af1f-4ceb-aa31-b8f5c7853325",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d9ed5389-fa40-435f-96fd-0969f2f32d3f",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "86d02b12-3e9f-45c8-88ac-b0d96d2f64e7",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "37bebaf2-b9cd-4676-b909-e2c971fd25ef",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d41bdc9f-c732-44d9-a4ad-17fc369875a4",
              "parentUUID": "09f6e4a3-6988-4ffa-b5da-6a518cde27b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1979f213-6361-4595-b603-c6f1315920d5",
            "3ba9247e-11bc-4a49-b853-303e2fea4014",
            "a8beae29-c495-4b87-a986-2ddf9ecb9089",
            "378a7c1a-af1f-4ceb-aa31-b8f5c7853325",
            "d9ed5389-fa40-435f-96fd-0969f2f32d3f",
            "86d02b12-3e9f-45c8-88ac-b0d96d2f64e7",
            "37bebaf2-b9cd-4676-b909-e2c971fd25ef",
            "d41bdc9f-c732-44d9-a4ad-17fc369875a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bb9f1fac-21b5-4485-accb-269081a518b3",
          "title": "secrets/share",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "5eab04d8-8203-4a74-932f-db54056f5b18",
              "parentUUID": "bb9f1fac-21b5-4485-accb-269081a518b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "5dbeaefa-3315-4601-b7f7-fd50aae07232",
              "parentUUID": "bb9f1fac-21b5-4485-accb-269081a518b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "f8193bc3-ec1a-48ff-8d95-b284948723bc",
              "parentUUID": "bb9f1fac-21b5-4485-accb-269081a518b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5eab04d8-8203-4a74-932f-db54056f5b18",
            "5dbeaefa-3315-4601-b7f7-fd50aae07232",
            "f8193bc3-ec1a-48ff-8d95-b284948723bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "cc73fc36-55ec-4f18-933e-4087b91367d9",
          "title": "setup/factors/password",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .password('password', { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "b55100d6-6545-4ec7-b49f-c59782d14d16",
              "parentUUID": "cc73fc36-55ec-4f18-933e-4087b91367d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nawait mfkdf.setup.factors\n  .password('password', { id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "224f9365-bc6d-4e6c-be44-2e3844597e14",
              "parentUUID": "cc73fc36-55ec-4f18-933e-4087b91367d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "ce5bc729-4044-44dc-bfc9-a69e3830440d",
              "parentUUID": "cc73fc36-55ec-4f18-933e-4087b91367d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b55100d6-6545-4ec7-b49f-c59782d14d16",
            "224f9365-bc6d-4e6c-be44-2e3844597e14",
            "ce5bc729-4044-44dc-bfc9-a69e3830440d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "133a8ceb-7419-48a5-926a-b7d685610366",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ uuid: 12345 })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ uuid: 'hello' })\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup.factors\n  .uuid({ id: 12345 })\n  .should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "8ffd142c-3b04-454d-9092-1a47d1479ad4",
              "parentUUID": "133a8ceb-7419-48a5-926a-b7d685610366",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.factors\n  .uuid({ id: '' })\n  .should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "ddaf117f-464a-40ad-acaa-7fcd0f8d0dcc",
              "parentUUID": "133a8ceb-7419-48a5-926a-b7d685610366",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({\n  uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n})\nfactor.type.should.equal('uuid')\nfactor.data\n  .toString('hex')\n  .should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "876a6446-3502-43e3-9447-b25618e37bfc",
              "parentUUID": "133a8ceb-7419-48a5-926a-b7d685610366",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "3b719491-0993-4e4f-a841-ff6bc54fc5c8",
              "parentUUID": "133a8ceb-7419-48a5-926a-b7d685610366",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ffd142c-3b04-454d-9092-1a47d1479ad4",
            "ddaf117f-464a-40ad-acaa-7fcd0f8d0dcc",
            "876a6446-3502-43e3-9447-b25618e37bfc",
            "3b719491-0993-4e4f-a841-ff6bc54fc5c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c6812e85-623b-4bbc-98ed-d5980b9c48b6",
          "title": "setup/key",
          "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "26a2c11a-a7ac-4200-b3d6-2d696445153d",
              "parentUUID": "c6812e85-623b-4bbc-98ed-d5980b9c48b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "12b0de10-6538-4b31-97c4-2642b4c5ccd6",
              "title": "id",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "b2910e49-cf16-4d97-b26b-57427fffa5db",
                  "parentUUID": "12b0de10-6538-4b31-97c4-2642b4c5ccd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { id: 'hello-world' }\n)\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "97b96a29-1c3b-452c-b605-a7aa4fad1c27",
                  "parentUUID": "12b0de10-6538-4b31-97c4-2642b4c5ccd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: 12345 })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "98c08476-b343-4bb3-b4ac-ffe0276a6461",
                  "parentUUID": "12b0de10-6538-4b31-97c4-2642b4c5ccd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { id: '' })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "52a36264-bbcb-4652-b2f5-85dd93219fe7",
                  "parentUUID": "12b0de10-6538-4b31-97c4-2642b4c5ccd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2910e49-cf16-4d97-b26b-57427fffa5db",
                "97b96a29-1c3b-452c-b605-a7aa4fad1c27",
                "98c08476-b343-4bb3-b4ac-ffe0276a6461",
                "52a36264-bbcb-4652-b2f5-85dd93219fe7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f036fc7b-5941-474a-8e7e-5bbd4327dafa",
              "title": "threshold",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "b885c6a7-9cd0-43a1-a41d-24606fbe55d7",
                  "parentUUID": "f036fc7b-5941-474a-8e7e-5bbd4327dafa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password2' })\n  ],\n  { threshold: 1 }\n)\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "5b9aae0a-6d73-4d26-be58-54c785aab484",
                  "parentUUID": "f036fc7b-5941-474a-8e7e-5bbd4327dafa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], {\n    threshold: 'hello'\n  })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b1b8afad-33f8-4a51-98d8-0860d6b4d648",
                  "parentUUID": "f036fc7b-5941-474a-8e7e-5bbd4327dafa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 0 })\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { threshold: 2 })\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6c82023d-ccee-4777-8d92-8a8bbac9a1fa",
                  "parentUUID": "f036fc7b-5941-474a-8e7e-5bbd4327dafa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b885c6a7-9cd0-43a1-a41d-24606fbe55d7",
                "5b9aae0a-6d73-4d26-be58-54c785aab484",
                "b1b8afad-33f8-4a51-98d8-0860d6b4d648",
                "6c82023d-ccee-4777-8d92-8a8bbac9a1fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a3e8bf2a-f538-48b9-bb6c-216a1793f0d6",
              "title": "salt",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(32)",
                  "err": {},
                  "uuid": "b72568ca-953c-4935-bf59-7bdb97a1eddf",
                  "parentUUID": "a3e8bf2a-f538-48b9-bb6c-216a1793f0d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key(\n  [await mfkdf.setup.factors.password('hello')],\n  { salt: Buffer.from('1234567812345678', 'base64') }\n)\npolicy.salt.should.equal('1234567812345678')",
                  "err": {},
                  "uuid": "c2d5b93a-67d6-40b3-baac-6153fd307ebb",
                  "parentUUID": "a3e8bf2a-f538-48b9-bb6c-216a1793f0d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([await mfkdf.setup.factors.password('hello')], { salt: 'hello' })\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4f520dc6-46f6-44ae-b378-67bf0ab8cd45",
                  "parentUUID": "a3e8bf2a-f538-48b9-bb6c-216a1793f0d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b72568ca-953c-4935-bf59-7bdb97a1eddf",
                "c2d5b93a-67d6-40b3-baac-6153fd307ebb",
                "4f520dc6-46f6-44ae-b378-67bf0ab8cd45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8acc7d3f-c617-4add-80a5-7c23992f6f4c",
              "title": "factors",
              "fullFile": "C:\\Users\\Vivek\\Projects\\mfkdf\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "eeac0425-355e-45bf-8a4e-3bf44fd00ff7",
                  "parentUUID": "8acc7d3f-c617-4add-80a5-7c23992f6f4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup\n  .key([\n    await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n    await mfkdf.setup.factors.password('hello', { id: 'password1' })\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "601f2d92-e039-4b07-a5f0-88a6b44b8695",
                  "parentUUID": "8acc7d3f-c617-4add-80a5-7c23992f6f4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 12345,\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 12345,\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: 12345,\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(TypeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: 12345\n    }\n  ])\n  .should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7761fc14-6d40-42d4-b38e-ccb9061f7020",
                  "parentUUID": "8acc7d3f-c617-4add-80a5-7c23992f6f4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([]).should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: '',\n      id: 'password',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: '',\n      data: Buffer.from('password', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)\nawait mfkdf.setup\n  .key([\n    {\n      type: 'password',\n      id: 'password',\n      data: Buffer.from('', 'utf-8'),\n      params: async () => {\n        return {}\n      }\n    }\n  ])\n  .should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "529e6cff-10b3-4fc4-a41c-5e6910aff3ee",
                  "parentUUID": "8acc7d3f-c617-4add-80a5-7c23992f6f4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eeac0425-355e-45bf-8a4e-3bf44fd00ff7",
                "601f2d92-e039-4b07-a5f0-88a6b44b8695",
                "7761fc14-6d40-42d4-b38e-ccb9061f7020",
                "529e6cff-10b3-4fc4-a41c-5e6910aff3ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "26a2c11a-a7ac-4200-b3d6-2d696445153d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mfkdf2/public/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}