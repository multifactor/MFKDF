{
  "stats": {
    "suites": 76,
    "tests": 309,
    "passes": 309,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-28T00:04:48.598Z",
    "end": "2022-04-28T00:06:08.871Z",
    "duration": 80273,
    "testsRegistered": 309,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8610941d-de97-47ee-9586-43f9255a0296",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fb145946-6761-431c-b385-024897e9a8c9",
          "title": "asymmetric",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
          "file": "\\test\\crypto\\asymmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ee1a509-17db-4b79-8e70-f361e6a68b59",
              "title": "encryption",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric encryption rsa1024",
                  "timedOut": false,
                  "duration": 241,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa1024')\nconst pt = await setup.decrypt(ct, 'rsa1024')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "ac127dc0-d478-4656-b46c-2f75f88bee2e",
                  "parentUUID": "9ee1a509-17db-4b79-8e70-f361e6a68b59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric encryption rsa2048",
                  "timedOut": false,
                  "duration": 1755,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa2048')\nconst pt = await setup.decrypt(ct, 'rsa2048')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "ea7835ce-80f2-486a-9d7d-9f9434731139",
                  "parentUUID": "9ee1a509-17db-4b79-8e70-f361e6a68b59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac127dc0-d478-4656-b46c-2f75f88bee2e",
                "ea7835ce-80f2-486a-9d7d-9f9434731139"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1996,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
              "title": "signatures",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric signatures rsa1024",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa1024')\nconst validity = await setup.verify('hello world', signature, 'rsa1024')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "6acf0e65-8615-474a-9b7d-4eb9706b9e85",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric signatures rsa2048",
                  "timedOut": false,
                  "duration": 1579,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa2048')\nconst validity = await setup.verify('hello world', signature, 'rsa2048')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "14e33f95-1107-4998-9e35-87b140cf05ff",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa3072",
                  "fullTitle": "asymmetric signatures rsa3072",
                  "timedOut": false,
                  "duration": 9017,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa3072')\nconst validity = await setup.verify('hello world', signature, 'rsa3072')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "6157c734-7283-4666-96ab-d14c09fdc579",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "defaults",
                  "fullTitle": "asymmetric signatures defaults",
                  "timedOut": false,
                  "duration": 6437,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world')\nconst validity = await setup.verify('hello world', signature)\nvalidity.should.be.true\nawait setup.getAsymmetricKeyPair()",
                  "err": {},
                  "uuid": "22f5aa11-952c-4114-a334-c31164db13a5",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ed25519",
                  "fullTitle": "asymmetric signatures ed25519",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nawait setup.getAsymmetricKeyPair('ed25519')",
                  "err": {},
                  "uuid": "71e6d0c5-26ea-4bac-bc41-51adf5510f2f",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unknown",
                  "fullTitle": "asymmetric signatures unknown",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.getAsymmetricKeyPair('unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "754c0d13-518b-49d6-a8f8-dd415bab7434",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "errors",
                  "fullTitle": "asymmetric signatures errors",
                  "timedOut": false,
                  "duration": 6229,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.sign(12345, 'rsa1024').should.be.rejectedWith(TypeError)\nconst signature = await setup.sign('hello world')\nsetup.verify(12345, signature).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "99c4f26e-b925-4386-bd62-d452696fd490",
                  "parentUUID": "e08ca095-cc92-4f47-8e52-80d5eeb34ea0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6acf0e65-8615-474a-9b7d-4eb9706b9e85",
                "14e33f95-1107-4998-9e35-87b140cf05ff",
                "6157c734-7283-4666-96ab-d14c09fdc579",
                "22f5aa11-952c-4114-a334-c31164db13a5",
                "71e6d0c5-26ea-4bac-bc41-51adf5510f2f",
                "754c0d13-518b-49d6-a8f8-dd415bab7434",
                "99c4f26e-b925-4386-bd62-d452696fd490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
          "title": "encrypt",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "defaults",
              "fullTitle": "encrypt defaults",
              "timedOut": false,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext)\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "4354b4fa-10c0-4d6a-be8f-7f7f4b75d661",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-CBC",
              "fullTitle": "encrypt AES256-CBC",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "cd73c8ad-42af-4fbe-b88d-07092ba39483",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-CBC",
              "fullTitle": "encrypt AES192-CBC",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "c8d54172-7b9a-4082-b4a2-879d8c58e56d",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-CBC",
              "fullTitle": "encrypt AES128-CBC",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "5582c581-7729-45fc-827d-05506558a077",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-CBC",
              "fullTitle": "encrypt 3DES-CBC",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "5bee39e3-f21d-4e3b-80e2-2c5572a8ed38",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-CBC",
              "fullTitle": "encrypt DES-CBC",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "d110f401-5add-4bd7-ad7f-ff3a72b7e642",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-ECB",
              "fullTitle": "encrypt AES256-ECB",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "208d3dc2-ca70-4674-8ad5-1c88cccf2af0",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-ECB",
              "fullTitle": "encrypt AES192-ECB",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "178c6300-0e5e-42cf-ae04-5210e0203100",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-ECB",
              "fullTitle": "encrypt AES128-ECB",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "885d46d1-d2a1-4155-a9a1-336251c1759c",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-ECB",
              "fullTitle": "encrypt 3DES-ECB",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "30369f94-b15a-472f-befc-bb309fccafff",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-ECB",
              "fullTitle": "encrypt DES-ECB",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "e5f5b16e-811e-409b-8cac-74182da22990",
              "parentUUID": "13760f55-53ac-4dc2-b707-3fa3fe48d3df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d9e6ee5d-174e-4e62-9411-bdc7de8c6e87",
              "title": "utils",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSubkey(32, 'AES256', 'sha256')\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey(32, '', 'sha512')\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "14522d59-7797-4c88-8296-880bbaa4f70b",
                  "parentUUID": "d9e6ee5d-174e-4e62-9411-bdc7de8c6e87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "symmetric key",
                  "fullTitle": "encrypt utils symmetric key",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSymmetricKey()\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))",
                  "err": {},
                  "uuid": "a68b23a9-c537-4262-a6ef-a654e93be56c",
                  "parentUUID": "d9e6ee5d-174e-4e62-9411-bdc7de8c6e87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14522d59-7797-4c88-8296-880bbaa4f70b",
                "a68b23a9-c537-4262-a6ef-a654e93be56c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "61360add-0abc-4593-be04-7d7679e4ed10",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid key",
                  "fullTitle": "encrypt errors invalid key",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt('hello world', 'unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e326c862-fc9b-4ce6-b4aa-a53aeca33775",
                  "parentUUID": "61360add-0abc-4593-be04-7d7679e4ed10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid message",
                  "fullTitle": "encrypt errors invalid message",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4563eee3-ba05-48ef-8fae-62e45c6fd7a9",
                  "parentUUID": "61360add-0abc-4593-be04-7d7679e4ed10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid ciphertext",
                  "fullTitle": "encrypt errors invalid ciphertext",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.decrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fe55e233-89e7-473c-82da-8c501a459358",
                  "parentUUID": "61360add-0abc-4593-be04-7d7679e4ed10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e326c862-fc9b-4ce6-b4aa-a53aeca33775",
                "4563eee3-ba05-48ef-8fae-62e45c6fd7a9",
                "fe55e233-89e7-473c-82da-8c501a459358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 310,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4354b4fa-10c0-4d6a-be8f-7f7f4b75d661",
            "cd73c8ad-42af-4fbe-b88d-07092ba39483",
            "c8d54172-7b9a-4082-b4a2-879d8c58e56d",
            "5582c581-7729-45fc-827d-05506558a077",
            "5bee39e3-f21d-4e3b-80e2-2c5572a8ed38",
            "d110f401-5add-4bd7-ad7f-ff3a72b7e642",
            "208d3dc2-ca70-4674-8ad5-1c88cccf2af0",
            "178c6300-0e5e-42cf-ae04-5210e0203100",
            "885d46d1-d2a1-4155-a9a1-336251c1759c",
            "30369f94-b15a-472f-befc-bb309fccafff",
            "e5f5b16e-811e-409b-8cac-74182da22990"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2448,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f9ebd3c6-41d2-4c16-9dfe-3a338e9d6f81",
          "title": "derive/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "e18f9475-e7ee-4663-893d-ab5522367aa0",
              "parentUUID": "f9ebd3c6-41d2-4c16-9dfe-3a338e9d6f81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "0dc06152-26de-4a51-a09b-70c94f6b4e83",
              "parentUUID": "f9ebd3c6-41d2-4c16-9dfe-3a338e9d6f81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e18f9475-e7ee-4663-893d-ab5522367aa0",
            "0dc06152-26de-4a51-a09b-70c94f6b4e83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f30cd9d2-3d63-4b4a-ae9e-744c4ea7ffab",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "35b82508-4226-4bae-a308-ac6efc3abfd5",
              "parentUUID": "f30cd9d2-3d63-4b4a-ae9e-744c4ea7ffab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "49869001-8057-4155-ba81-a18eb13efa95",
              "parentUUID": "f30cd9d2-3d63-4b4a-ae9e-744c4ea7ffab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35b82508-4226-4bae-a308-ac6efc3abfd5",
            "49869001-8057-4155-ba81-a18eb13efa95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d5fb8d41-1a59-4984-b1df-1742248374c8",
          "title": "derive/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "826d1db4-527e-4fc6-a486-061e9d6b2495",
              "parentUUID": "d5fb8d41-1a59-4984-b1df-1742248374c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('wrongpassword2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('wrongpassword2'),\n  password3: mfkdf.derive.factors.password('wrongpassword3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password2')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "8071f7dd-d106-4872-8429-4626b4641149",
              "parentUUID": "d5fb8d41-1a59-4984-b1df-1742248374c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nmfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n}).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "bf3800e0-bf00-42e5-9d56-7c0a62b1086a",
              "parentUUID": "d5fb8d41-1a59-4984-b1df-1742248374c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "40d71e17-abcb-4ad8-a0f5-10714b2cdd48",
              "title": "shares",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 448,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "e1d037e6-f25e-4eae-8855-49cfa7a0a675",
                  "parentUUID": "40d71e17-abcb-4ad8-a0f5-10714b2cdd48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1d037e6-f25e-4eae-8855-49cfa7a0a675"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 448,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "be003cd6-9a27-4cf3-bbc7-2ac29009a8e5",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a8b90787-e354-41b2-9101-168faff00825",
                  "parentUUID": "be003cd6-9a27-4cf3-bbc7-2ac29009a8e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6e5cb812-1d17-41c3-a66a-3c0cf3768e86",
                  "parentUUID": "be003cd6-9a27-4cf3-bbc7-2ac29009a8e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8b90787-e354-41b2-9101-168faff00825",
                "6e5cb812-1d17-41c3-a66a-3c0cf3768e86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 229,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "826d1db4-527e-4fc6-a486-061e9d6b2495",
            "8071f7dd-d106-4872-8429-4626b4641149",
            "bf3800e0-bf00-42e5-9d56-7c0a62b1086a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1256,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1ad17e0d-659c-43f6-9920-fc5ae6f319c9",
          "title": "examples",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "kdf",
              "fullTitle": "examples kdf",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup kdf configuration\nconst config = await mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000,\n  pbkdf2digest: 'sha256'\n}) // -> { type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } }\n// derive key\nconst key = await mfkdf.kdf('password', 'salt', 8, config)\nkey.toString('hex') // -> 0394a2ede332c9a1\nconfig.should.deep.equal({ type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } })\nkey.toString('hex').should.equal('0394a2ede332c9a1')",
              "err": {},
              "uuid": "5b49947d-d9ae-48cd-aa1c-afa0d97db6fa",
              "parentUUID": "1ad17e0d-659c-43f6-9920-fc5ae6f319c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "c6974fe1-4806-4e65-9c84-eaa933272215",
              "parentUUID": "1ad17e0d-659c-43f6-9920-fc5ae6f319c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "14d28711-2f57-4f3c-8be2-5bc329264663",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n], { size: 8 })\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response = crypto.createHmac('sha1', secret).update(challenge).digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "a2365a7f-8e2f-4a9a-904f-ccfdb51e3f67",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 1170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n], { size: 8 })\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f96955ff-63a7-43e7-b957-c78fa48bfa2d",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') })\n], { size: 8 })\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f76975cf-e608-4ad3-9a93-dee1eb5ca4bc",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 8 })\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ca68f9de-1452-490b-b678-61b55bbca696",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n], { size: 8 })\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "3d709bc4-9f36-43da-ae71-58563914a637",
                  "parentUUID": "8c835a68-38be-42ef-a9f6-8a51ec9ac7be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14d28711-2f57-4f3c-8be2-5bc329264663",
                "a2365a7f-8e2f-4a9a-904f-ccfdb51e3f67",
                "f96955ff-63a7-43e7-b957-c78fa48bfa2d",
                "f76975cf-e608-4ad3-9a93-dee1eb5ca4bc",
                "ca68f9de-1452-490b-b678-61b55bbca696",
                "3d709bc4-9f36-43da-ae71-58563914a637"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9a1f2c81-3c4f-4119-9a29-d46cfd2069de",
              "title": "secrets",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(Buffer.from('hello world'), 2, 3) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "8ecc37df-ab4e-4234-a911-c47bc612a597",
                  "parentUUID": "9a1f2c81-3c4f-4119-9a29-d46cfd2069de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ecc37df-ab4e-4234-a911-c47bc612a597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7974645f-15fa-474a-a21f-f095dfa0553f",
              "title": "policy",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "6a9acf30-3182-4295-aa26-e8d9b7719739",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "979f0f81-9b75-46a5-941d-7ec3bcbfbd48",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, ['passwordA', 'passwordC']) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, ['passwordB', 'passwordC']) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "5a3f9375-a420-4dae-97c8-c00ce84453e0",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  ), { size: 8 }\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d385fa61-bcd1-4bf6-b494-e55f3be17925",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0ff7d309-87ea-4a19-9642-ca2db5c514d4",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c9b2fca1-a080-425a-b40a-811b48edf5a4",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "bdcb1bd2-5ae3-4aa0-b7e9-a920c3880140",
                  "parentUUID": "7974645f-15fa-474a-a21f-f095dfa0553f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a9acf30-3182-4295-aa26-e8d9b7719739",
                "979f0f81-9b75-46a5-941d-7ec3bcbfbd48",
                "5a3f9375-a420-4dae-97c8-c00ce84453e0",
                "d385fa61-bcd1-4bf6-b494-e55f3be17925",
                "0ff7d309-87ea-4a19-9642-ca2db5c514d4",
                "c9b2fca1-a080-425a-b40a-811b48edf5a4",
                "bdcb1bd2-5ae3-4aa0-b7e9-a920c3880140"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1233,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
              "title": "reconstitution",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "09a8fb67-0c69-40f3-9319-1967d52e2ed6",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "b9405013-6cb2-448a-925f-ffe3ce077de6",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "175e136b-d3cd-4a3f-beb5-95210307aa7f",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "d61947be-8d5e-4604-8b5f-2eaa1972f754",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "2e503066-9004-4c36-bd19-5794ae6c6c8b",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "dbd3d4b1-51d9-47c4-9c2a-c424f628f0e4",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 237,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "96a5db44-3d22-481d-8f5f-a5e58eb0a224",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "211f149e-c8ff-4df3-b34b-c3e1c0ed36d3",
                  "parentUUID": "7c213476-4823-49ba-ac05-fdc3c483e1c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09a8fb67-0c69-40f3-9319-1967d52e2ed6",
                "b9405013-6cb2-448a-925f-ffe3ce077de6",
                "175e136b-d3cd-4a3f-beb5-95210307aa7f",
                "d61947be-8d5e-4604-8b5f-2eaa1972f754",
                "2e503066-9004-4c36-bd19-5794ae6c6c8b",
                "dbd3d4b1-51d9-47c4-9c2a-c424f628f0e4",
                "96a5db44-3d22-481d-8f5f-a5e58eb0a224",
                "211f149e-c8ff-4df3-b34b-c3e1c0ed36d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1755,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2792f4c3-500b-4145-a483-708c7ab14c7c",
              "title": "persistence",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "924a20a8-f077-45ce-a346-c251840934c1",
                  "parentUUID": "2792f4c3-500b-4145-a483-708c7ab14c7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "924a20a8-f077-45ce-a346-c251840934c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 216,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d4a5812a-1516-4b28-93dd-12b7a5335e33",
              "title": "envelope",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add/get secret",
                  "fullTitle": "examples envelope add/get secret",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "e91cdf77-ef45-4559-9151-47999e85142b",
                  "parentUUID": "d4a5812a-1516-4b28-93dd-12b7a5335e33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/check/remove secret",
                  "fullTitle": "examples envelope add/check/remove secret",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// check secret\nconst check1 = derived.hasEnvelopedSecret('mySecret') // -> true\n// remove secret\nderived.removeEnvelopedSecret('mySecret')\n// check secret\nconst check2 = derived.hasEnvelopedSecret('mySecret') // -> false\ncheck1.should.be.true\ncheck2.should.be.false",
                  "err": {},
                  "uuid": "775d5ccd-88e1-4c76-ae30-af9c168ee067",
                  "parentUUID": "d4a5812a-1516-4b28-93dd-12b7a5335e33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/get key",
                  "fullTitle": "examples envelope add/get key",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
                  "err": {},
                  "uuid": "ecead1cd-1691-4836-9f20-4f88160663b5",
                  "parentUUID": "d4a5812a-1516-4b28-93dd-12b7a5335e33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e91cdf77-ef45-4559-9151-47999e85142b",
                "775d5ccd-88e1-4c76-ae30-af9c168ee067",
                "ecead1cd-1691-4836-9f20-4f88160663b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 652,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7d1d95d0-9781-412c-a469-18dcfd111704",
              "title": "crypto",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte sub-key for \"eth\" using hkdf/sha256\nconst subkey = await key.getSubkey(16, 'eth', 'sha256')\nsubkey.toString('hex') // -> 54ad9e5acbc1c33b08a15dd79126e9c9",
                  "err": {},
                  "uuid": "734896c6-7503-4e5d-af3d-84ffd93f1bca",
                  "parentUUID": "7d1d95d0-9781-412c-a469-18dcfd111704",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getSymmetricKey",
                  "fullTitle": "examples crypto getSymmetricKey",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte AES128 sub-key\nconst subkey = await key.getSymmetricKey('aes128')\nsubkey.toString('hex') // -> c985454e008e5ecc695e865d339cb2be",
                  "err": {},
                  "uuid": "34de7f5f-7d5b-4ca6-ab29-837c1ee2a642",
                  "parentUUID": "7d1d95d0-9781-412c-a469-18dcfd111704",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getAsymmetricKeyPair",
                  "fullTitle": "examples crypto getAsymmetricKeyPair",
                  "timedOut": false,
                  "duration": 247,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte RSA1024 sub-key\nconst subkey = await key.getAsymmetricKeyPair('rsa1024') // -> { privateKey: Uint8Array, publicKey: Uint8Array }\nsubkey.should.be.a('object')",
                  "err": {},
                  "uuid": "07cab51a-b0a6-46a0-8a3f-fc9d85f7c298",
                  "parentUUID": "7d1d95d0-9781-412c-a469-18dcfd111704",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sign/verify",
                  "fullTitle": "examples crypto sign/verify",
                  "timedOut": false,
                  "duration": 408,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// sign message using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature using RSA-1024\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "593a0bf3-4c31-46f2-800d-28ec40a0748d",
                  "parentUUID": "7d1d95d0-9781-412c-a469-18dcfd111704",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "encrypt/decrypt",
                  "fullTitle": "examples crypto encrypt/decrypt",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// encrypt message using 3DES\nconst encrypted = await key.encrypt('hello world', '3des')\n// decrypt message using 3DES\nconst decrypted = await key.decrypt(encrypted, '3des')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "9cc59356-a2a5-4886-b982-ebc687c5811d",
                  "parentUUID": "7d1d95d0-9781-412c-a469-18dcfd111704",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "734896c6-7503-4e5d-af3d-84ffd93f1bca",
                "34de7f5f-7d5b-4ca6-ab29-837c1ee2a642",
                "07cab51a-b0a6-46a0-8a3f-fc9d85f7c298",
                "593a0bf3-4c31-46f2-800d-28ec40a0748d",
                "9cc59356-a2a5-4886-b982-ebc687c5811d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 969,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
              "title": "auth",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "08264c59-3212-470a-b348-7cf13ff244e9",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 363,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "0b8ef9a0-ec83-4b3b-baf7-0a59e3a21dac",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "af82bd26-66fb-43e1-8811-85804d560b44",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "b1f00496-5dd1-4b85-bc05-3aeb1ec6184c",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 258,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c9f1befc-bf43-4541-a0c7-b3fac8d5e0b7",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "d5b437cd-1189-47b3-892a-de70d3ab050b",
                  "parentUUID": "f56cb438-b3e1-4a13-8c4a-c438ddf76b7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08264c59-3212-470a-b348-7cf13ff244e9",
                "0b8ef9a0-ec83-4b3b-baf7-0a59e3a21dac",
                "af82bd26-66fb-43e1-8811-85804d560b44",
                "b1f00496-5dd1-4b85-bc05-3aeb1ec6184c",
                "c9f1befc-bf43-4541-a0c7-b3fac8d5e0b7",
                "d5b437cd-1189-47b3-892a-de70d3ab050b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1042,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "5b49947d-d9ae-48cd-aa1c-afa0d97db6fa",
            "c6974fe1-4806-4e65-9c84-eaa933272215"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
          "title": "tutorials",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Auth",
              "fullTitle": "tutorials Auth",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "769e7700-bd00-4769-935f-283729d6325a",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloepd Key",
              "fullTitle": "tutorials Enveloepd Key",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
              "err": {},
              "uuid": "1fe1e53d-6ac2-4825-bcab-7a825ee3f1ea",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloped Secret",
              "fullTitle": "tutorials Enveloped Secret",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
              "err": {},
              "uuid": "9ba902d3-0315-41d9-a6f0-4c42a5869813",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "5de382cb-73dd-4e7f-ba6e-696c9c37eb26",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signing & Verification",
              "fullTitle": "tutorials Signing & Verification",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// sign message with derived key using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
              "err": {},
              "uuid": "bf64186a-3c12-4467-a3b9-ec530c0e4240",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Encryption & Decryption",
              "fullTitle": "tutorials Encryption & Decryption",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// encrypt secret with derived key using AES-256\nconst encrypted = await key.encrypt('hello world', 'aes256')\n// ... later, decrypt secret with derived key\nconst decrypted = await key.decrypt(encrypted, 'aes256')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
              "err": {},
              "uuid": "72e1ac3b-04be-40da-b0ab-7d6070e14461",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// reconstitute key to change password\nawait setup.recoverFactor(await mfkdf.setup.factors.password('newPassword'))\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771",
              "err": {},
              "uuid": "79b56f9d-7921-4fae-a299-61deb125f8cd",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\nsetup.key.toString('hex') // -> 01d0c7236adf2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "e61426b8-a80c-455d-aec0-72f713cef309",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "41b6d28e-eff2-44f5-aebd-af97b7acb2de",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16, threshold: 2 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "4290e017-082b-46b2-8c8e-36fa7ef574cb",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 629,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n], { size: 32 })\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n], { size: 32 })\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n], { size: 32 })\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32 })\nconst threshold = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32, threshold: 2 })\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "c4ad63b5-2c12-424a-8714-1b1259614023",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "2c2987bd-1bed-4c02-a5e0-951def9a15ae",
              "parentUUID": "0f1b18d0-2848-4d83-bf8e-58ca4be3f87a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "769e7700-bd00-4769-935f-283729d6325a",
            "1fe1e53d-6ac2-4825-bcab-7a825ee3f1ea",
            "9ba902d3-0315-41d9-a6f0-4c42a5869813",
            "5de382cb-73dd-4e7f-ba6e-696c9c37eb26",
            "bf64186a-3c12-4467-a3b9-ec530c0e4240",
            "72e1ac3b-04be-40da-b0ab-7d6070e14461",
            "79b56f9d-7921-4fae-a299-61deb125f8cd",
            "e61426b8-a80c-455d-aec0-72f713cef309",
            "41b6d28e-eff2-44f5-aebd-af97b7acb2de",
            "4290e017-082b-46b2-8c8e-36fa7ef574cb",
            "c4ad63b5-2c12-424a-8714-1b1259614023",
            "2c2987bd-1bed-4c02-a5e0-951def9a15ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2678,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6767d512-b683-40be-8306-3a642caa2600",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key)\n  .update(challenge)\n  .digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "aaf5a0b9-700e-472b-9d15-30a6410e08fd",
              "parentUUID": "6767d512-b683-40be-8306-3a642caa2600",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response1 = crypto.createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(derive1.policy.factors[0].params.challenge, 'hex')\nconst response2 = crypto.createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "cf540853-bde9-4d65-80e1-73d46dd671a5",
              "parentUUID": "6767d512-b683-40be-8306-3a642caa2600",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = '{\"$schema\":\"https://mfkdf.com/schema/v1.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"kdf\":{\"type\":\"argon2id\",\"params\":{\"rounds\":2,\"memory\":24576,\"parallelism\":1}},\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"f8d33204be0436f2629d5173e9bd3fc1953cf982\"}}]}'\nconst derive = await mfkdf.derive.key(JSON.parse(setup), {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex'))\n})\nderive.key.toString('hex').should.equal('ca76d2b456be4e40ba6ef65a68fbfc71bf27a0ca3e0fa4481a2ddf29fb6b65d9')",
              "err": {},
              "uuid": "6a2b48ea-afd8-4f26-b49b-70c89d32f88d",
              "parentUUID": "6767d512-b683-40be-8306-3a642caa2600",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9fb30411-a5d7-434f-87f3-ddb54e735a8d",
                  "parentUUID": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6059b019-10ee-42e9-b7dd-9decbdf238e8",
                  "parentUUID": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fcd3739e-49cd-4597-9a51-9a4254623f6b",
                  "parentUUID": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: Buffer.from('12345') }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b0739ddd-9ef8-4363-aee1-05fe0786025e",
                  "parentUUID": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "cc2d2c89-a530-4432-ae9a-0e31aa1c5432",
                  "parentUUID": "5fac7224-ec92-4fab-92ed-4af0dd50a1e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fb30411-a5d7-434f-87f3-ddb54e735a8d",
                "6059b019-10ee-42e9-b7dd-9decbdf238e8",
                "fcd3739e-49cd-4597-9a51-9a4254623f6b",
                "b0739ddd-9ef8-4363-aee1-05fe0786025e",
                "cc2d2c89-a530-4432-ae9a-0e31aa1c5432"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "aaf5a0b9-700e-472b-9d15-30a6410e08fd",
            "cf540853-bde9-4d65-80e1-73d46dd671a5",
            "6a2b48ea-afd8-4f26-b49b-70c89d32f88d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 442,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e3b55967-4a55-4ced-93e9-2d25e684d003",
          "title": "factors/hotp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('hello world')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(891649)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(795484)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "32557d41-2eac-48e3-9b51-830af691389b",
              "parentUUID": "e3b55967-4a55-4ced-93e9-2d25e684d003",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp()\n])",
              "err": {},
              "uuid": "0c9ee0f7-f210-4e27-929d-e0ef68f2805f",
              "parentUUID": "e3b55967-4a55-4ced-93e9-2d25e684d003",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "730c8974-f37a-4cd5-b34f-b121c45c3b80",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3ba0249e-d979-4507-825c-a4d5aa8275d2",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2d8ec159-868b-4527-9c44-50d8a6cb1c67",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9dfa901e-624e-452b-b3f6-c366a845979b",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "99a0005f-181f-40ee-b940-0a04e2762170",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "71262738-beeb-4c24-8196-8b687acf6be3",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6b45c41c-bdfb-4386-99c7-68ec0232e3bb",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4ccb911e-bcc0-4289-a258-ff358a8273b4",
                  "parentUUID": "dfc2afb8-c1f4-48ff-a577-be0bcec21892",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "730c8974-f37a-4cd5-b34f-b121c45c3b80",
                "3ba0249e-d979-4507-825c-a4d5aa8275d2",
                "2d8ec159-868b-4527-9c44-50d8a6cb1c67",
                "9dfa901e-624e-452b-b3f6-c366a845979b",
                "99a0005f-181f-40ee-b940-0a04e2762170",
                "71262738-beeb-4c24-8196-8b687acf6be3",
                "6b45c41c-bdfb-4386-99c7-68ec0232e3bb",
                "4ccb911e-bcc0-4289-a258-ff358a8273b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "32557d41-2eac-48e3-9b51-830af691389b",
            "0c9ee0f7-f210-4e27-929d-e0ef68f2805f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ecc70ca-f521-45b3-836e-aa047b41c650",
          "title": "persistence",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "921ac714-0ace-49f5-ace2-21420f0899d4",
              "parentUUID": "9ecc70ca-f521-45b3-836e-aa047b41c650",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "8ac1a876-0b0a-4036-b07e-0d82dece14e6",
              "parentUUID": "9ecc70ca-f521-45b3-836e-aa047b41c650",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "921ac714-0ace-49f5-ace2-21420f0899d4",
            "8ac1a876-0b0a-4036-b07e-0d82dece14e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 224,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "de5767f0-2a18-4ba5-ae4f-89ac0c8203b6",
          "title": "factors/stack",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "f355447e-5b6f-4e7a-8a16-dae63028e35f",
              "parentUUID": "de5767f0-2a18-4ba5-ae4f-89ac0c8203b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8fa4a6e0-06e6-4fbd-ba67-932c8bc2f772",
              "parentUUID": "de5767f0-2a18-4ba5-ae4f-89ac0c8203b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ], { id: 'stack1' }),\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ], { id: 'stack2' })\n], { threshold: 1 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "5c6151c7-02cf-4369-9002-bfa2519da4cd",
              "parentUUID": "de5767f0-2a18-4ba5-ae4f-89ac0c8203b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f355447e-5b6f-4e7a-8a16-dae63028e35f",
            "8fa4a6e0-06e6-4fbd-ba67-932c8bc2f772",
            "5c6151c7-02cf-4369-9002-bfa2519da4cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a1c82207-bc9b-4d15-ac70-e6d5381a2594",
          "title": "factors/totp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 1104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])\nconst code = parseInt(speakeasy.totp({\n  secret: setup.outputs.totp.secret.toString('hex'),\n  encoding: 'hex',\n  step: setup.outputs.totp.period,\n  algorithm: setup.outputs.totp.algorithm,\n  digits: setup.outputs.totp.digits\n}))\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "df65d792-ab8b-41e5-8170-652a71a99dae",
              "parentUUID": "a1c82207-bc9b-4d15-ac70-e6d5381a2594",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 1117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(99922, { time: 1650430991083 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(398884, { time: 1650431018392 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "e7b13728-329a-4be4-9d29-8caf141a4f25",
              "parentUUID": "a1c82207-bc9b-4d15-ac70-e6d5381a2594",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])",
              "err": {},
              "uuid": "f2c2fdfc-e437-4d9c-8751-bc93c1eec438",
              "parentUUID": "a1c82207-bc9b-4d15-ac70-e6d5381a2594",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2817248f-de9b-4bbe-9aea-e086fe862dab",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "1b8e0250-7370-4803-b05d-b7c41865d1a7",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 720,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nmfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1750430943604 })\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "30dfd83d-8577-4a67-80c9-c9971c0baa2c",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "1cd91fbb-26f0-440a-8c59-8fda2f9ebe90",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "490e7581-1d0d-4505-9db8-0d34e37b7927",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3b0dccac-e2d2-4031-a1fe-c27852bdf6c4",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9cfd467a-cdcc-43dc-a494-727ef6168f26",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f0c8da8e-f43f-4f14-a477-cf6537868789",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5a1ddebe-d316-45c3-8ea5-397ec7139e4f",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d71a0ba7-bc6c-40d6-8584-24e10075a390",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3f2ef313-e6aa-4f0d-a198-acf28777b93c",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7b229cac-f156-438b-a476-c8550acf2c07",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a9c1ab81-75fe-40cf-b19c-3645e000378a",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "123d2712-bdf5-473e-a9bb-07b91c35c1b9",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "be0fb056-56af-429b-8628-1cb5fb207c37",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "460504c9-c8df-46d2-bfbf-9359dbff3526",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "60a855ee-8213-4af9-bb8c-3fdf35e6dead",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "98e40c84-c0a3-43d0-8436-d0d36b6a08af",
                  "parentUUID": "2817248f-de9b-4bbe-9aea-e086fe862dab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b8e0250-7370-4803-b05d-b7c41865d1a7",
                "30dfd83d-8577-4a67-80c9-c9971c0baa2c",
                "1cd91fbb-26f0-440a-8c59-8fda2f9ebe90",
                "490e7581-1d0d-4505-9db8-0d34e37b7927",
                "3b0dccac-e2d2-4031-a1fe-c27852bdf6c4",
                "9cfd467a-cdcc-43dc-a494-727ef6168f26",
                "f0c8da8e-f43f-4f14-a477-cf6537868789",
                "5a1ddebe-d316-45c3-8ea5-397ec7139e4f",
                "d71a0ba7-bc6c-40d6-8584-24e10075a390",
                "3f2ef313-e6aa-4f0d-a198-acf28777b93c",
                "7b229cac-f156-438b-a476-c8550acf2c07",
                "a9c1ab81-75fe-40cf-b19c-3645e000378a",
                "123d2712-bdf5-473e-a9bb-07b91c35c1b9",
                "be0fb056-56af-429b-8628-1cb5fb207c37",
                "460504c9-c8df-46d2-bfbf-9359dbff3526",
                "60a855ee-8213-4af9-bb8c-3fdf35e6dead",
                "98e40c84-c0a3-43d0-8436-d0d36b6a08af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 721,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "df65d792-ab8b-41e5-8170-652a71a99dae",
            "e7b13728-329a-4be4-9d29-8caf141a4f25",
            "f2c2fdfc-e437-4d9c-8751-bc93c1eec438"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3007,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "25111d1c-6fa1-45a8-80a4-4d43a5860366",
          "title": "factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "f3433e67-e648-4cfa-a7b4-95f1b5d782dd",
              "parentUUID": "25111d1c-6fa1-45a8-80a4-4d43a5860366",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 553,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "a36f1766-dfcd-4ff1-805c-2ad267a4fcbf",
              "parentUUID": "25111d1c-6fa1-45a8-80a4-4d43a5860366",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f3433e67-e648-4cfa-a7b4-95f1b5d782dd",
            "a36f1766-dfcd-4ff1-805c-2ad267a4fcbf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3d3ddaa0-56f0-461e-982d-11c368824c62",
          "title": "authentication",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
          "file": "\\test\\features\\authentication.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getKey/auth",
              "fullTitle": "authentication getKey/auth",
              "timedOut": false,
              "duration": 14457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nlet authKey\nlet encKey\nauthKey = await key.getSymmetricKey('des', true)\nencKey = await key.getSymmetricKey('des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('3des', true)\nencKey = await key.getSymmetricKey('3des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes128', true)\nencKey = await key.getSymmetricKey('aes128', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes192', true)\nencKey = await key.getSymmetricKey('aes192', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes256', true)\nencKey = await key.getSymmetricKey('aes256', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('ed25519', true)\nencKey = await key.getAsymmetricKeyPair('ed25519', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa1024', true)\nencKey = await key.getAsymmetricKeyPair('rsa1024', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa2048', true)\nencKey = await key.getAsymmetricKeyPair('rsa2048', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa3072', true)\nencKey = await key.getAsymmetricKeyPair('rsa3072', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))",
              "err": {},
              "uuid": "96347bc5-7c16-4b77-8250-755a420fc8f3",
              "parentUUID": "3d3ddaa0-56f0-461e-982d-11c368824c62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
              "title": "valid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "4857bc6b-cd4c-4b8c-a9fe-ea91be488746",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 289,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c3312908-491e-4ef6-b311-464709246eaa",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "228b882c-e6bf-48d7-ae9b-d7a9abf9e10f",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "76b6b656-6a31-4e4e-bee7-7d840e4d9587",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 587,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "fca41215-212f-4b92-9a2b-fc96fdf82119",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "f2508d2b-425b-43ce-9399-16e3638987d0",
                  "parentUUID": "41a1ea70-2bc2-4f53-8260-31465f52b9f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4857bc6b-cd4c-4b8c-a9fe-ea91be488746",
                "c3312908-491e-4ef6-b311-464709246eaa",
                "228b882c-e6bf-48d7-ae9b-d7a9abf9e10f",
                "76b6b656-6a31-4e4e-bee7-7d840e4d9587",
                "fca41215-212f-4b92-9a2b-fc96fdf82119",
                "f2508d2b-425b-43ce-9399-16e3638987d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1294,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "64ab342b-30ee-465c-9714-4957f24b3aad",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 502,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "59be4665-db3d-44e6-88b9-9b67bed1cf1a",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "77761ec6-1f60-4e2c-bd49-84cc53378a3f",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "be3700d3-0443-44d9-ada6-12651f98df72",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 325,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "0a69affa-a8fe-4335-994b-d1b79e0b82f2",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "d7dee1f0-6cf2-400e-b8f8-a6a346329651",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric/window",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "6a2abb17-8643-415d-a65c-de00ac566c09",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric/window",
                  "timedOut": false,
                  "duration": 380,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "02f1ba7c-f373-426a-8c52-88b09c559f8b",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF/window",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "b95d49ba-95a1-461b-a9b1-e7147cbca6e0",
                  "parentUUID": "1ebdaec7-ec7d-4f1d-9c7c-d396da1d6e7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64ab342b-30ee-465c-9714-4957f24b3aad",
                "59be4665-db3d-44e6-88b9-9b67bed1cf1a",
                "77761ec6-1f60-4e2c-bd49-84cc53378a3f",
                "be3700d3-0443-44d9-ada6-12651f98df72",
                "0a69affa-a8fe-4335-994b-d1b79e0b82f2",
                "d7dee1f0-6cf2-400e-b8f8-a6a346329651",
                "6a2abb17-8643-415d-a65c-de00ac566c09",
                "02f1ba7c-f373-426a-8c52-88b09c559f8b",
                "b95d49ba-95a1-461b-a9b1-e7147cbca6e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "96347bc5-7c16-4b77-8250-755a420fc8f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14457,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
          "title": "entropy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "f7d7e683-18a2-4fd1-9665-fccfa4a5b4ea",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "eab60cc8-4397-46c4-b6ef-a9d27866f1b8",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "457e84f9-d7ef-42e1-8530-57ec33119ee1",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "cc5c8a12-a8d8-4d2d-b126-fe4ee76045fb",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "50268ada-6ebe-4d2b-83ac-d3e2f0b99995",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "1755d2c8-f362-4753-96fa-cbde6f4521a9",
              "parentUUID": "ac6acfb1-4f91-46dc-98ee-ac3c1380e2f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7d7e683-18a2-4fd1-9665-fccfa4a5b4ea",
            "eab60cc8-4397-46c4-b6ef-a9d27866f1b8",
            "457e84f9-d7ef-42e1-8530-57ec33119ee1",
            "cc5c8a12-a8d8-4d2d-b126-fe4ee76045fb",
            "50268ada-6ebe-4d2b-83ac-d3e2f0b99995",
            "1755d2c8-f362-4753-96fa-cbde6f4521a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0c0e2fad-af72-4f9c-8293-2856daa8bc5c",
          "title": "enveloping",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
          "file": "\\test\\features\\envelope.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "secrets",
              "fullTitle": "enveloping secrets",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nawait setup.addEnvelopedSecret('key2', input)\nawait setup.addEnvelopedSecret('key3', input)\nawait setup.removeEnvelopedSecret('key2')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst output = await derive.getEnvelopedSecret('key')\noutput.toString('hex').should.equal(input.toString('hex'))",
              "err": {},
              "uuid": "020bebde-b3b1-4686-8ca4-14169ff0a25f",
              "parentUUID": "0c0e2fad-af72-4f9c-8293-2856daa8bc5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys",
              "fullTitle": "enveloping keys",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nawait setup.addEnvelopedKey('key1')\nawait setup.addEnvelopedKey('key2', 'rsa1024')\nawait setup.addEnvelopedKey('key3', 'rsa2048')\nawait setup.addEnvelopedKey('key4', 'ed25519')\nconst key11 = await setup.getEnvelopedKey('key1')\nconst key12 = await setup.getEnvelopedKey('key2')\nconst key13 = await setup.getEnvelopedKey('key3')\nconst key14 = await setup.getEnvelopedKey('key4')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst key21 = await derive.getEnvelopedKey('key1')\nconst key22 = await derive.getEnvelopedKey('key2')\nconst key23 = await derive.getEnvelopedKey('key3')\nconst key24 = await derive.getEnvelopedKey('key4')\nkey11.export({ format: 'jwk' }).should.deep.equal(key21.export({ format: 'jwk' }))\nkey12.export({ format: 'jwk' }).should.deep.equal(key22.export({ format: 'jwk' }))\nkey13.export({ format: 'jwk' }).should.deep.equal(key23.export({ format: 'jwk' }))\nkey14.export({ format: 'jwk' }).should.deep.equal(key24.export({ format: 'jwk' }))",
              "err": {},
              "uuid": "9ca7cf23-02b3-47a9-b54b-1b2069dc7084",
              "parentUUID": "0c0e2fad-af72-4f9c-8293-2856daa8bc5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1fdde757-6eb8-409a-9723-c62ed71eec5f",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
              "file": "\\test\\features\\envelope.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "48c83e51-4db1-42f7-8039-7780b4c07575",
                  "title": "addEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret(12345, input).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "4366395b-c715-4415-9c63-e8e71e35d8c5",
                      "parentUUID": "48c83e51-4db1-42f7-8039-7780b4c07575",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "value/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret value/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedSecret('id', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "cc9885a5-35b9-4557-819d-8f9841b612c6",
                      "parentUUID": "48c83e51-4db1-42f7-8039-7780b4c07575",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret type/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret('id', input, 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "cb4e7771-ea59-49d9-badc-7ca2f85470bc",
                      "parentUUID": "48c83e51-4db1-42f7-8039-7780b4c07575",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/unique",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/unique",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nsetup.addEnvelopedSecret('key', input).should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "6c42cce0-6af9-4f59-841d-47d5c8880e92",
                      "parentUUID": "48c83e51-4db1-42f7-8039-7780b4c07575",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4366395b-c715-4415-9c63-e8e71e35d8c5",
                    "cc9885a5-35b9-4557-819d-8f9841b612c6",
                    "cb4e7771-ea59-49d9-badc-7ca2f85470bc",
                    "6c42cce0-6af9-4f59-841d-47d5c8880e92"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 432,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d1d53997-7382-497f-9a71-8b0e20c8a57d",
                  "title": "removeEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "841af1fb-76a0-4134-9291-13c6cb02bb9f",
                      "parentUUID": "d1d53997-7382-497f-9a71-8b0e20c8a57d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret('12345')\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "46592306-6c88-4ce7-990f-bfa1d2274b2a",
                      "parentUUID": "d1d53997-7382-497f-9a71-8b0e20c8a57d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "841af1fb-76a0-4134-9291-13c6cb02bb9f",
                    "46592306-6c88-4ce7-990f-bfa1d2274b2a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 215,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e601cf26-2aed-4fe4-822c-5fb90f721878",
                  "title": "addEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "67ffcd80-b509-4c2b-833b-a2219e6d31f3",
                      "parentUUID": "e601cf26-2aed-4fe4-822c-5fb90f721878",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedKey type/type",
                      "timedOut": false,
                      "duration": 111,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "7bbf661f-0a76-4b54-859b-7d701a1218f8",
                      "parentUUID": "e601cf26-2aed-4fe4-822c-5fb90f721878",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/range",
                      "fullTitle": "enveloping errors addEnvelopedKey type/range",
                      "timedOut": false,
                      "duration": 104,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', '12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "7fd0d3a6-c26f-4baf-971a-48b205643986",
                      "parentUUID": "e601cf26-2aed-4fe4-822c-5fb90f721878",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "67ffcd80-b509-4c2b-833b-a2219e6d31f3",
                    "7bbf661f-0a76-4b54-859b-7d701a1218f8",
                    "7fd0d3a6-c26f-4baf-971a-48b205643986"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 320,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "efc61438-4801-49b5-9eac-734dd932ba57",
                  "title": "getEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "52c44176-6b95-4ac9-8aa5-a6277cbc7ac0",
                      "parentUUID": "efc61438-4801-49b5-9eac-734dd932ba57",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret('12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "11275cc1-1dbc-4705-a31c-88580447c7b1",
                      "parentUUID": "efc61438-4801-49b5-9eac-734dd932ba57",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "52c44176-6b95-4ac9-8aa5-a6277cbc7ac0",
                    "11275cc1-1dbc-4705-a31c-88580447c7b1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 215,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c9b79b1f-1eda-4c7b-9f68-e32d73c17524",
                  "title": "getEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "4fa93e16-71f0-4bf7-ae9c-cc65a2245fe9",
                      "parentUUID": "c9b79b1f-1eda-4c7b-9f68-e32d73c17524",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4fa93e16-71f0-4bf7-ae9c-cc65a2245fe9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 106,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "69ed0ed3-bf8f-4f62-a52e-976e8fc5fb23",
                  "title": "hasEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors hasEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.hasEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "242179f0-0230-4ec3-b0a4-dfe3d3518a6a",
                      "parentUUID": "69ed0ed3-bf8f-4f62-a52e-976e8fc5fb23",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "242179f0-0230-4ec3-b0a4-dfe3d3518a6a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 108,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "020bebde-b3b1-4686-8ca4-14169ff0a25f",
            "9ca7cf23-02b3-47a9-b54b-1b2069dc7084"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 495,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "35c23085-6e80-443d-9a34-0233d7557403",
          "title": "kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\kdf.js",
          "file": "\\test\\features\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "types",
              "fullTitle": "kdf types",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pbkdf2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst bcrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst scrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nconst argon2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nBuffer.isBuffer(pbkdf2).should.be.true\nBuffer.isBuffer(bcrypt).should.be.true\nBuffer.isBuffer(scrypt).should.be.true\nBuffer.isBuffer(argon2).should.be.true",
              "err": {},
              "uuid": "8631cb90-c640-4ab8-b12a-4cad20bca0e9",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha1",
              "fullTitle": "kdf pbkdf2/sha1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 16, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 25555,\n    digest: 'sha1'\n  }\n})\nBuffer.isBuffer(key).should.be.true\nkey.toString('hex').should.equal('8ee4a527b20aa8feeb78d70447d84e20')",
              "err": {},
              "uuid": "9bface53-ba81-41ce-880f-5fa7bf06c266",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha512",
              "fullTitle": "kdf pbkdf2/sha512",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secret', 'salt', 64, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha512'\n  }\n})\nkey.toString('hex').should.equal('3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae')",
              "err": {},
              "uuid": "05865d3d-aa52-419a-84c4-734cb15ff4dd",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/default",
              "fullTitle": "kdf pbkdf2/default",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('test', '', 32, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst key2 = await mfkdf.kdf('test', '', 32, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "71e3f9f9-7076-49de-a9a5-11749e7ff3f8",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/same",
              "fullTitle": "kdf bcrypt/same",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "b9fac5ec-4df2-4fc8-9387-0b37f9773a9b",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/inputdiff",
              "fullTitle": "kdf bcrypt/inputdiff",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password2', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "1bf94615-e703-4803-ac8f-ea569c14e6f5",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/saltdiff",
              "fullTitle": "kdf bcrypt/saltdiff",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "7ad1b99f-e797-4d8f-a18c-d1d5cd986f16",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/rounddiff",
              "fullTitle": "kdf bcrypt/rounddiff",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, { type: 'bcrypt', params: { rounds: 10 } })\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, { type: 'bcrypt', params: { rounds: 11 } })\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "d7abf93c-45f8-41ee-bae3-0998672a3888",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/length",
              "fullTitle": "kdf bcrypt/length",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key16 = await mfkdf.kdf('password', 'salt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key16).should.equal(16)\nconst key32 = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key32).should.equal(32)\nconst key64 = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key64).should.equal(64)",
              "err": {},
              "uuid": "22c1494e-38c9-4fb8-a430-f39c1e23589a",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/known",
              "fullTitle": "kdf bcrypt/known",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey.toString('hex').should.equal('cb36d3d02d502acdf10dfc2d022bf3c024f16a368ba2df4456fbf97291f64334')",
              "err": {},
              "uuid": "639d57b6-eee2-4037-8256-8872055d2606",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/fast",
              "fullTitle": "kdf scrypt/fast",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 16384, scryptblocksize: 8, scryptparallelism: 1 }))\nkey.toString('hex').should.equal('745731af4484f323968969eda289aeee005b5903ac561e64a5aca121797bf7734ef9fd58422e2e22183bcacba9ec87ba0c83b7a2e788f03ce0da06463433cda6')",
              "err": {},
              "uuid": "e4654035-a4f5-46ae-8086-b6d904602da2",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/defaults",
              "fullTitle": "kdf scrypt/defaults",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nkey.toString('hex').should.equal('9009fca57ef2b8c342bdad6b9247e4a1b5bd85628152116513ad44e93cf1b0e2')",
              "err": {},
              "uuid": "cf66faff-e80f-4b05-9104-85a13e57a930",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/N",
              "fullTitle": "kdf scrypt/N",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024 }))\nkey.toString('hex').should.equal('ceb6a6bf4f4afeb3d1806714474d4f00ca97c2ad76a641269192d11444e13a6b')",
              "err": {},
              "uuid": "2af25f40-8131-4d8a-b28b-51037a7ffa2e",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/R",
              "fullTitle": "kdf scrypt/R",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptblocksize: 16 }))\nkey.toString('hex').should.equal('a63de1de715f95bebd9f6d58d78ff11028a8412c1fcf71673544373c67095836')",
              "err": {},
              "uuid": "f002d2d0-880b-46b7-9639-97ebf0b3ed29",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/P",
              "fullTitle": "kdf scrypt/P",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptparallelism: 2 }))\nkey.toString('hex').should.equal('ef224277727457992dc05983b1fd1208bae35b100c853ba4bb11f1ba7ca4c436')",
              "err": {},
              "uuid": "42311047-38c7-4e28-8a98-456b6b1ad447",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2i",
              "fullTitle": "kdf argon2i",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2i' }))\nkey.toString('hex').should.equal('7357892df510f136a0688ceab37bbaf7ba695de590065072717fa6728961c92a')",
              "err": {},
              "uuid": "52be446c-ea8c-45de-8ed6-4080a3e648e2",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2d",
              "fullTitle": "kdf argon2d",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2d' }))\nkey.toString('hex').should.equal('423b0dcc7bbfe16fa8ee7a2e2ebd8891873d726f9dfe70890a7197a5503a2848')",
              "err": {},
              "uuid": "a9e9a07d-82ea-4bbb-9362-30d8ee030057",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id",
              "fullTitle": "kdf argon2id",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "f0dcc2bd-7d79-4f50-bbe4-e76ed6241f29",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/mem",
              "fullTitle": "kdf argon2id/mem",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2mem: 16384 }))\nkey.toString('hex').should.equal('e043f979311b14ff8378b785469974e899a08f05509323a04b2ca29ef63ff3af')",
              "err": {},
              "uuid": "89846eea-f3f3-4147-a6d1-bd4cd2fb91cc",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/time",
              "fullTitle": "kdf argon2id/time",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2time: 1 }))\nkey.toString('hex').should.equal('bf6b1773bdae362ecea04b889079b6628d1f35d96a2be9f2a5481c2d1236e8d7')",
              "err": {},
              "uuid": "07fbd0f8-7a50-4fe5-a573-b7a800b36bb2",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/parallelism",
              "fullTitle": "kdf argon2id/parallelism",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2parallelism: 2 }))\nkey.toString('hex').should.equal('5c12c6873b938cd8467b677d23e525389e3ff7ed62b4ad9e285e1191244f40ca')",
              "err": {},
              "uuid": "b57caf4b-d216-4863-a0ea-5587a9674ad2",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "kdf default",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({}))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "495299e6-5712-4f8f-b0da-86ec352c6584",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "kdf invalid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.kdf('password1', 'salt1', 16, { type: 'invalid', params: { } }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "4e5faa4f-d9c3-454b-a705-08a4964d70dd",
              "parentUUID": "35c23085-6e80-443d-9a34-0233d7557403",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8631cb90-c640-4ab8-b12a-4cad20bca0e9",
            "9bface53-ba81-41ce-880f-5fa7bf06c266",
            "05865d3d-aa52-419a-84c4-734cb15ff4dd",
            "71e3f9f9-7076-49de-a9a5-11749e7ff3f8",
            "b9fac5ec-4df2-4fc8-9387-0b37f9773a9b",
            "1bf94615-e703-4803-ac8f-ea569c14e6f5",
            "7ad1b99f-e797-4d8f-a18c-d1d5cd986f16",
            "d7abf93c-45f8-41ee-bae3-0998672a3888",
            "22c1494e-38c9-4fb8-a430-f39c1e23589a",
            "639d57b6-eee2-4037-8256-8872055d2606",
            "e4654035-a4f5-46ae-8086-b6d904602da2",
            "cf66faff-e80f-4b05-9104-85a13e57a930",
            "2af25f40-8131-4d8a-b28b-51037a7ffa2e",
            "f002d2d0-880b-46b7-9639-97ebf0b3ed29",
            "42311047-38c7-4e28-8a98-456b6b1ad447",
            "52be446c-ea8c-45de-8ed6-4080a3e648e2",
            "a9e9a07d-82ea-4bbb-9362-30d8ee030057",
            "f0dcc2bd-7d79-4f50-bbe4-e76ed6241f29",
            "89846eea-f3f3-4147-a6d1-bd4cd2fb91cc",
            "07fbd0f8-7a50-4fe5-a573-b7a800b36bb2",
            "b57caf4b-d216-4863-a0ea-5587a9674ad2",
            "495299e6-5712-4f8f-b0da-86ec352c6584",
            "4e5faa4f-d9c3-454b-a705-08a4964d70dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2445,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "32942a6a-33b7-42e8-95cf-e0ea50df2c3e",
          "title": "policy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "33eef79c-61a9-402e-81ce-c803dc5c7bc2",
              "title": "validate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "f47ee9dc-8e57-43e6-bbcf-f5002420d59e",
                  "parentUUID": "33eef79c-61a9-402e-81ce-c803dc5c7bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password2' })\n    )\n  )\n).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "74ecfff6-07d7-4d21-a3c0-6c93ddb9f5c4",
                  "parentUUID": "33eef79c-61a9-402e-81ce-c803dc5c7bc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f47ee9dc-8e57-43e6-bbcf-f5002420d59e",
                "74ecfff6-07d7-4d21-a3c0-6c93ddb9f5c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c9d419a9-e470-45f6-b939-54e7fc146974",
              "title": "evaluate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.true",
                  "err": {},
                  "uuid": "ebfd669c-9474-46fa-aa4e-3d2eef5ef68e",
                  "parentUUID": "c9d419a9-e470-45f6-b939-54e7fc146974",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.false",
                  "err": {},
                  "uuid": "7f2d2e65-c02e-4dd5-827e-6ea4bfc325d8",
                  "parentUUID": "c9d419a9-e470-45f6-b939-54e7fc146974",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebfd669c-9474-46fa-aa4e-3d2eef5ef68e",
                "7f2d2e65-c02e-4dd5-827e-6ea4bfc325d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 218,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e993adf3-7447-4697-b08e-32250a83ab6b",
              "title": "derive",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "bc60d5a3-a78b-4fdf-aa5d-516ae1454c41",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f8c008ba-1ac8-408f-a0a0-56f0fd12c3e7",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "e0d7b113-6fcc-4050-8084-5fb351d3e88b",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 616,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "9c5f0402-4a57-4fd1-84aa-d26ea5e267d5",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "7d2fbeb2-d449-4e58-9c46-c8b300ffd26a",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 244,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "2a29e45b-a49a-4136-8fa1-e9779adf065d",
                  "parentUUID": "e993adf3-7447-4697-b08e-32250a83ab6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc60d5a3-a78b-4fdf-aa5d-516ae1454c41",
                "f8c008ba-1ac8-408f-a0a0-56f0fd12c3e7",
                "e0d7b113-6fcc-4050-8084-5fb351d3e88b",
                "9c5f0402-4a57-4fd1-84aa-d26ea5e267d5",
                "7d2fbeb2-d449-4e58-9c46-c8b300ffd26a",
                "2a29e45b-a49a-4136-8fa1-e9779adf065d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1883,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f842b571-fdb4-4103-a276-2a1a8babb26b",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n        await mfkdf.setup.factors.password('password2', { id: 'password2' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n])\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0d508a4f-b951-4568-b4ab-3ce5b4730ca7",
                  "parentUUID": "f842b571-fdb4-4103-a276-2a1a8babb26b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "02ae4382-55f8-4fd7-ae27-626f55b60ba9",
                  "parentUUID": "f842b571-fdb4-4103-a276-2a1a8babb26b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d508a4f-b951-4568-b4ab-3ce5b4730ca7",
                "02ae4382-55f8-4fd7-ae27-626f55b60ba9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 221,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
          "title": "reconstitution",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "4d29de7f-0342-4442-ad5e-adbf148feaa5",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nderive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nmfkdf.derive.key(derive2.policy, {\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "78d7f4cf-45f7-4f4c-a21a-fa5f4a944ace",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "edf2d839-0ad7-4d2a-8ffe-264113e7dbe5",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactor(await mfkdf.setup.factors.password('password3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "f2a30249-aea9-4d3b-aeb9-559ddb6ac721",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "32232f4c-ed48-4246-8bfb-83d296e1603b",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "806ae73e-728f-4d0c-b91a-32aa131f48b0",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "b50beea8-528d-4066-864e-1cfe8508f598",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(['password1'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "874ce2a3-08f7-4d68-b5d4-26b070f03671",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "6238b430-8d11-450c-a7b0-07a411097734",
              "parentUUID": "c0fcd89e-f743-4965-ad97-b153ecc931b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([12345], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4d7429c2-0045-412c-a6a0-686a0379e100",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute(['password4'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fbd040ab-a7e6-412c-a9c2-6564733cb43f",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.reconstitute(['password3'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('diffPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "11269be2-c832-4627-b63f-dcbfa34ee0d7",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute('hello', [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "05cc7df1-e4e4-494f-abd2-af597f6e1c1a",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], '12345', 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7982c057-750a-4ee3-894c-7346f50d49c7",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], '12345').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "feeb11ae-1119-42f8-8430-032d8c93fa4f",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cb16116d-8857-4ea2-b839-b4d8ec2e28d0",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 12345,\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a16a20c9-f8c1-4493-b8bc-7458207e0d30",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: '',\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "60cb5b47-b6c6-40d6-a3bd-c68894cb21f0",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "edca5918-b23a-4a14-b6e6-a7c5e8b04dc5",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "10c93cd4-bfd4-4a9d-b7ad-92091fa02920",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: 12345,\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3bc8da61-8556-43b9-8fd7-d4bb53758248",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from(''),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1e22ca74-687a-42ad-91c6-9625c50e5c51",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: 12345,\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "844ad2f3-61a1-4f3a-b54e-e7e214e28769",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: async () => {\n      return {}\n    },\n    output: 12345\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "464dddad-7db9-4307-add2-c3c00eb5edec",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f398a0c1-4e60-443d-801d-02409a4ba62d",
                  "parentUUID": "fc13e766-5541-4a97-bcd2-ebde6491bddf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d7429c2-0045-412c-a6a0-686a0379e100",
                "fbd040ab-a7e6-412c-a9c2-6564733cb43f",
                "11269be2-c832-4627-b63f-dcbfa34ee0d7",
                "05cc7df1-e4e4-494f-abd2-af597f6e1c1a",
                "7982c057-750a-4ee3-894c-7346f50d49c7",
                "feeb11ae-1119-42f8-8430-032d8c93fa4f",
                "cb16116d-8857-4ea2-b839-b4d8ec2e28d0",
                "a16a20c9-f8c1-4493-b8bc-7458207e0d30",
                "60cb5b47-b6c6-40d6-a3bd-c68894cb21f0",
                "edca5918-b23a-4a14-b6e6-a7c5e8b04dc5",
                "10c93cd4-bfd4-4a9d-b7ad-92091fa02920",
                "3bc8da61-8556-43b9-8fd7-d4bb53758248",
                "1e22ca74-687a-42ad-91c6-9625c50e5c51",
                "844ad2f3-61a1-4f3a-b54e-e7e214e28769",
                "464dddad-7db9-4307-add2-c3c00eb5edec",
                "f398a0c1-4e60-443d-801d-02409a4ba62d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1710,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4d29de7f-0342-4442-ad5e-adbf148feaa5",
            "78d7f4cf-45f7-4f4c-a21a-fa5f4a944ace",
            "edf2d839-0ad7-4d2a-8ffe-264113e7dbe5",
            "f2a30249-aea9-4d3b-aeb9-559ddb6ac721",
            "32232f4c-ed48-4246-8bfb-83d296e1603b",
            "806ae73e-728f-4d0c-b91a-32aa131f48b0",
            "b50beea8-528d-4066-864e-1cfe8508f598",
            "874ce2a3-08f7-4d68-b5d4-26b070f03671",
            "6238b430-8d11-450c-a7b0-07a411097734"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2430,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9c94cbdd-209d-4677-bbf5-bb93c75b90ea",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "d764b9bd-5e85-4619-b0cf-75187bcccf35",
              "parentUUID": "9c94cbdd-209d-4677-bbf5-bb93c75b90ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "dcae9d70-4956-4c2c-969e-cab05d1a9f6b",
              "parentUUID": "9c94cbdd-209d-4677-bbf5-bb93c75b90ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "33bb5411-2a75-450f-ae4a-f4f9599ed7f1",
              "parentUUID": "9c94cbdd-209d-4677-bbf5-bb93c75b90ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d764b9bd-5e85-4619-b0cf-75187bcccf35",
            "dcae9d70-4956-4c2c-969e-cab05d1a9f6b",
            "33bb5411-2a75-450f-ae4a-f4f9599ed7f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
          "title": "secrets",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "338ad710-91fb-4df7-8325-c8d97442406f",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 1, 5)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "53a42483-b238-4dc1-9669-f1ad8dc8a6c8",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 2, 3)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "25338eab-610d-4aff-8a06-79533a3b716b",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "b598c6b5-4dc4-44b1-818a-463cd930d17b",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 1024)\nshares.should.be.an('array').of.length(1024)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 1020; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[1023] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c16b1ef6-3331-4391-bfe5-f12aa692dec0",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)\nxor(shares[0], shares[1]).toString('hex').should.equal('12345678')",
              "err": {},
              "uuid": "91ef6a2b-5fe4-43cf-82b9-e98a828fc027",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "ce2ae12c-4a94-49eb-a195-1f9528e3aa8d",
              "parentUUID": "c575a0ed-72fd-4e09-a1c4-9ba8ee72c9f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "338ad710-91fb-4df7-8325-c8d97442406f",
            "53a42483-b238-4dc1-9669-f1ad8dc8a6c8",
            "25338eab-610d-4aff-8a06-79533a3b716b",
            "b598c6b5-4dc4-44b1-818a-463cd930d17b",
            "c16b1ef6-3331-4391-bfe5-f12aa692dec0",
            "91ef6a2b-5fe4-43cf-82b9-e98a828fc027",
            "ce2ae12c-4a94-49eb-a195-1f9528e3aa8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 79,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
          "title": "secrets/recover",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "479d8f6e-6f43-4905-abc4-cafa4ca5d4cb",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "8f4cddf8-f345-4071-9790-14199d68d284",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "7173ca7c-dd78-4eb6-90c4-4d37d66c9e58",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "96c09197-75b6-4db6-9468-acc2145695fa",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "98c00784-1360-4a4a-bfcb-5b0fa8445fb6",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "922f5dc9-af71-453d-9487-f5b86ce83632",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "89b3b185-6e7b-4863-9c7b-c79ea39c6ca5",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5f6fd217-f646-4cc5-a531-2c98797bfa21",
              "parentUUID": "2e5a0eef-e456-4fbc-b704-145430cbe5a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "479d8f6e-6f43-4905-abc4-cafa4ca5d4cb",
            "8f4cddf8-f345-4071-9790-14199d68d284",
            "7173ca7c-dd78-4eb6-90c4-4d37d66c9e58",
            "96c09197-75b6-4db6-9468-acc2145695fa",
            "98c00784-1360-4a4a-bfcb-5b0fa8445fb6",
            "922f5dc9-af71-453d-9487-f5b86ce83632",
            "89b3b185-6e7b-4863-9c7b-c79ea39c6ca5",
            "5f6fd217-f646-4cc5-a531-2c98797bfa21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "600cafdc-2562-486e-8132-6ef6a785ceae",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "53a51f45-a37c-4812-9e1a-11f8c0988e88",
              "parentUUID": "600cafdc-2562-486e-8132-6ef6a785ceae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "7f02026f-d8cd-4644-9c15-e24549dcdc7d",
              "parentUUID": "600cafdc-2562-486e-8132-6ef6a785ceae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "6ae1a8a4-5eb1-482b-a2f3-e8e5001d8f63",
              "parentUUID": "600cafdc-2562-486e-8132-6ef6a785ceae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53a51f45-a37c-4812-9e1a-11f8c0988e88",
            "7f02026f-d8cd-4644-9c15-e24549dcdc7d",
            "6ae1a8a4-5eb1-482b-a2f3-e8e5001d8f63"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d7527e63-e698-41cd-ae66-8f82666c971f",
          "title": "setup/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.password('password', { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "e4fe5555-3408-4404-8daa-48a3eacd2c2b",
              "parentUUID": "d7527e63-e698-41cd-ae66-8f82666c971f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.password('password', { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d8435eb5-288a-4cf2-bed3-80d54de5aa1e",
              "parentUUID": "d7527e63-e698-41cd-ae66-8f82666c971f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "a8337ede-077f-48e6-8bbd-04be85b5f87d",
              "parentUUID": "d7527e63-e698-41cd-ae66-8f82666c971f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4fe5555-3408-4404-8daa-48a3eacd2c2b",
            "d8435eb5-288a-4cf2-bed3-80d54de5aa1e",
            "a8337ede-077f-48e6-8bbd-04be85b5f87d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "59281bea-bfee-4597-9696-e4411d144d87",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ uuid: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ uuid: 'hello' }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "1738b33c-3f5a-4e07-90b6-0f767b31b0d3",
              "parentUUID": "59281bea-bfee-4597-9696-e4411d144d87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "09670be4-ea96-4113-af45-b4241e37bedb",
              "parentUUID": "59281bea-bfee-4597-9696-e4411d144d87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({ uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\nfactor.type.should.equal('uuid')\nfactor.data.toString('hex').should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "581f71a5-2e3a-4c94-8a83-a3b8efabe061",
              "parentUUID": "59281bea-bfee-4597-9696-e4411d144d87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "fcd92d91-f772-4493-84f7-3aa021cd7a36",
              "parentUUID": "59281bea-bfee-4597-9696-e4411d144d87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1738b33c-3f5a-4e07-90b6-0f767b31b0d3",
            "09670be4-ea96-4113-af45-b4241e37bedb",
            "581f71a5-2e3a-4c94-8a83-a3b8efabe061",
            "fcd92d91-f772-4493-84f7-3aa021cd7a36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "843d665b-1157-400c-84f6-bf55176b7416",
          "title": "setup/kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
          "file": "\\test\\setup\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b88fc04c-9fb5-432e-b647-01c87195c2f3",
              "title": "pbkdf2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf pbkdf2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})",
                  "err": {},
                  "uuid": "e4f3422d-17c7-4fea-a4a5-e5220435c154",
                  "parentUUID": "b88fc04c-9fb5-432e-b647-01c87195c2f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b80f37ab-7e46-4f13-a41c-6da1b1004c70",
                  "title": "pbkdf2rounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "735181b5-e068-4808-b68d-1b6c867edb10",
                      "parentUUID": "b80f37ab-7e46-4f13-a41c-6da1b1004c70",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "f9cbcea7-88d4-4802-8195-7a1699d659b4",
                      "parentUUID": "b80f37ab-7e46-4f13-a41c-6da1b1004c70",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha256'\n  }\n})",
                      "err": {},
                      "uuid": "86cb47b1-198f-472f-9778-9c9b2d72abad",
                      "parentUUID": "b80f37ab-7e46-4f13-a41c-6da1b1004c70",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "735181b5-e068-4808-b68d-1b6c867edb10",
                    "f9cbcea7-88d4-4802-8195-7a1699d659b4",
                    "86cb47b1-198f-472f-9778-9c9b2d72abad"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1e03023c-7200-4c5c-af0f-85a23facaa2c",
                  "title": "pbkdf2digest",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 0\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "545f3e81-40a5-4d8c-a14f-6fd0b0f348ce",
                      "parentUUID": "1e03023c-7200-4c5c-af0f-85a23facaa2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 'foo'\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "a11480cd-d393-4b2b-9716-594bb7247656",
                      "parentUUID": "1e03023c-7200-4c5c-af0f-85a23facaa2c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2digest: 'sha512'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha512'\n  }\n})",
                      "err": {},
                      "uuid": "f22dcc31-0d9e-442e-9456-a35881ffa96d",
                      "parentUUID": "1e03023c-7200-4c5c-af0f-85a23facaa2c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "545f3e81-40a5-4d8c-a14f-6fd0b0f348ce",
                    "a11480cd-d393-4b2b-9716-594bb7247656",
                    "f22dcc31-0d9e-442e-9456-a35881ffa96d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "e4f3422d-17c7-4fea-a4a5-e5220435c154"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "59ccfdce-6d73-4ee6-b813-1ef80c512d23",
              "title": "bcrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf bcrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt'\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 10\n  }\n})",
                  "err": {},
                  "uuid": "474031b7-9b7c-4bf0-92e3-e2fa3a35c50b",
                  "parentUUID": "59ccfdce-6d73-4ee6-b813-1ef80c512d23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c8ea37fb-6665-446d-bdf9-8c65e4607561",
                  "title": "bcryptrounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "9b59ae73-811a-48b1-abc4-c9810d83339e",
                      "parentUUID": "c8ea37fb-6665-446d-bdf9-8c65e4607561",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "d1496a6a-6eb7-4467-b4a8-81cf13c4bc4c",
                      "parentUUID": "c8ea37fb-6665-446d-bdf9-8c65e4607561",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt',\n  bcryptrounds: 25\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 25\n  }\n})",
                      "err": {},
                      "uuid": "4135c347-c374-4826-b14e-ccdc2b0396ce",
                      "parentUUID": "c8ea37fb-6665-446d-bdf9-8c65e4607561",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9b59ae73-811a-48b1-abc4-c9810d83339e",
                    "d1496a6a-6eb7-4467-b4a8-81cf13c4bc4c",
                    "4135c347-c374-4826-b14e-ccdc2b0396ce"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "474031b7-9b7c-4bf0-92e3-e2fa3a35c50b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "490b8873-3331-48e2-91c4-14f486afd27c",
              "title": "scrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf scrypt defaults",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt'\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "84f15b4c-f78f-4556-a544-f38b6f71400b",
                  "parentUUID": "490b8873-3331-48e2-91c4-14f486afd27c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "15cf2bf3-50ad-4302-b59e-ca9338688dc8",
                  "title": "scryptcost",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "51806ea9-6c57-40bd-9947-f9684c7fb4ed",
                      "parentUUID": "15cf2bf3-50ad-4302-b59e-ca9338688dc8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "3f695c1f-6562-4e0a-85eb-d328f25806f7",
                      "parentUUID": "15cf2bf3-50ad-4302-b59e-ca9338688dc8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptcost valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptcost: 12345\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 12345,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "fa71362b-9bc6-4108-9d3c-95b258b2a83b",
                      "parentUUID": "15cf2bf3-50ad-4302-b59e-ca9338688dc8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "51806ea9-6c57-40bd-9947-f9684c7fb4ed",
                    "3f695c1f-6562-4e0a-85eb-d328f25806f7",
                    "fa71362b-9bc6-4108-9d3c-95b258b2a83b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "be3efbd2-e1d2-442c-b223-bd42c30b3830",
                  "title": "scryptblocksize",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "67243fb8-8e28-4e7f-b9e0-a74e4854487d",
                      "parentUUID": "be3efbd2-e1d2-442c-b223-bd42c30b3830",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "daa56598-5fa1-4754-b867-1e1681cbd3e9",
                      "parentUUID": "be3efbd2-e1d2-442c-b223-bd42c30b3830",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptblocksize valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptblocksize: 24\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 24,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "661305eb-ceea-41cd-b0e8-2c74d17d99be",
                      "parentUUID": "be3efbd2-e1d2-442c-b223-bd42c30b3830",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "67243fb8-8e28-4e7f-b9e0-a74e4854487d",
                    "daa56598-5fa1-4754-b867-1e1681cbd3e9",
                    "661305eb-ceea-41cd-b0e8-2c74d17d99be"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7e2f2110-a948-4d5c-b1f7-73d85a559550",
                  "title": "scryptparallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "7595c407-e982-48a3-905f-3518d6ed2efc",
                      "parentUUID": "7e2f2110-a948-4d5c-b1f7-73d85a559550",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "a2c9fde9-69d6-41f8-9196-9b8572154de4",
                      "parentUUID": "7e2f2110-a948-4d5c-b1f7-73d85a559550",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptparallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptparallelism: 2\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "e70a759f-5551-49bd-b31d-2dbb60ffe487",
                      "parentUUID": "7e2f2110-a948-4d5c-b1f7-73d85a559550",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7595c407-e982-48a3-905f-3518d6ed2efc",
                    "a2c9fde9-69d6-41f8-9196-9b8572154de4",
                    "e70a759f-5551-49bd-b31d-2dbb60ffe487"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "84f15b4c-f78f-4556-a544-f38b6f71400b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3fd4fea0-dbb6-45f0-b369-446dec383bc2",
              "title": "argon2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf argon2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "b2da3536-3321-4365-adf3-52f5bb95cce4",
                  "parentUUID": "3fd4fea0-dbb6-45f0-b369-446dec383bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/type",
                  "fullTitle": "setup/kdf argon2 kdf/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 123\n  })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "a401b744-a891-4cc5-8720-a551ca79a6d8",
                  "parentUUID": "3fd4fea0-dbb6-45f0-b369-446dec383bc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/range",
                  "fullTitle": "setup/kdf argon2 kdf/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'foo'\n  })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "2e1064af-c569-4ba6-8822-7802317fa9d8",
                  "parentUUID": "3fd4fea0-dbb6-45f0-b369-446dec383bc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "39b856b6-bbc1-4231-8eda-565639ed0fca",
                  "title": "argon2time",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "b97bd8ab-ac01-46ee-b02a-379466d15587",
                      "parentUUID": "39b856b6-bbc1-4231-8eda-565639ed0fca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "2ba6fb32-198b-4f97-8688-0eb687a4ced1",
                      "parentUUID": "39b856b6-bbc1-4231-8eda-565639ed0fca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2time valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2d',\n  argon2time: 10\n}).should.deep.equal({\n  type: 'argon2d',\n  params: {\n    rounds: 10,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "bbed1242-8d52-4a6c-aa98-687a6de58098",
                      "parentUUID": "39b856b6-bbc1-4231-8eda-565639ed0fca",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b97bd8ab-ac01-46ee-b02a-379466d15587",
                    "2ba6fb32-198b-4f97-8688-0eb687a4ced1",
                    "bbed1242-8d52-4a6c-aa98-687a6de58098"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9785f074-5162-4bbb-a5ea-333cf82d2cba",
                  "title": "argon2mem",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "b07b594e-6893-4548-9d14-c0251f74d9f8",
                      "parentUUID": "9785f074-5162-4bbb-a5ea-333cf82d2cba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "c2dbdea8-0438-4853-b1a7-59cb2f96e90d",
                      "parentUUID": "9785f074-5162-4bbb-a5ea-333cf82d2cba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2mem valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2i',\n  argon2mem: 12345\n}).should.deep.equal({\n  type: 'argon2i',\n  params: {\n    rounds: 2,\n    memory: 12345,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "2a2a2767-21d1-4c7a-95ab-8e79ff5b8671",
                      "parentUUID": "9785f074-5162-4bbb-a5ea-333cf82d2cba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b07b594e-6893-4548-9d14-c0251f74d9f8",
                    "c2dbdea8-0438-4853-b1a7-59cb2f96e90d",
                    "2a2a2767-21d1-4c7a-95ab-8e79ff5b8671"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "96c4ca9b-66b3-445b-b3c9-b1441959febe",
                  "title": "argon2parallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "0e1864be-6f3e-4229-ab3b-c4b584d924b9",
                      "parentUUID": "96c4ca9b-66b3-445b-b3c9-b1441959febe",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "1b96fe6b-e3f5-41c9-8d67-e7a44b963390",
                      "parentUUID": "96c4ca9b-66b3-445b-b3c9-b1441959febe",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2parallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2id',\n  argon2parallelism: 2\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "9e29f0a0-e66b-4a24-ab2e-eb7bdeee8383",
                      "parentUUID": "96c4ca9b-66b3-445b-b3c9-b1441959febe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0e1864be-6f3e-4229-ab3b-c4b584d924b9",
                    "1b96fe6b-e3f5-41c9-8d67-e7a44b963390",
                    "9e29f0a0-e66b-4a24-ab2e-eb7bdeee8383"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "b2da3536-3321-4365-adf3-52f5bb95cce4",
                "a401b744-a891-4cc5-8720-a551ca79a6d8",
                "2e1064af-c569-4ba6-8822-7802317fa9d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4a487b54-d818-4899-86bd-ac836f161ec3",
          "title": "setup/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "4b0d8244-e0c5-4449-82e5-4cec74f96b91",
              "parentUUID": "4a487b54-d818-4899-86bd-ac836f161ec3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8eba19a0-1c17-4e4e-abc6-14a68de7dc9b",
              "title": "id",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "38efc354-cdc5-41e5-9c69-e70d5fe0b53a",
                  "parentUUID": "8eba19a0-1c17-4e4e-abc6-14a68de7dc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 'hello-world' })\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "eef0dd26-dba5-4d9f-9cb0-0065a4392b63",
                  "parentUUID": "8eba19a0-1c17-4e4e-abc6-14a68de7dc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9e01d114-5d06-4829-81cc-6e479e487dda",
                  "parentUUID": "8eba19a0-1c17-4e4e-abc6-14a68de7dc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "01342c37-c931-456e-a9b2-ab0057b31635",
                  "parentUUID": "8eba19a0-1c17-4e4e-abc6-14a68de7dc9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38efc354-cdc5-41e5-9c69-e70d5fe0b53a",
                "eef0dd26-dba5-4d9f-9cb0-0065a4392b63",
                "9e01d114-5d06-4829-81cc-6e479e487dda",
                "01342c37-c931-456e-a9b2-ab0057b31635"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "eccecec5-c6a0-4567-9c81-317c97ea2ae0",
              "title": "size",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key size default",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.size.should.equal(32)",
                  "err": {},
                  "uuid": "665ea712-1969-4c83-b648-605f5e850e01",
                  "parentUUID": "eccecec5-c6a0-4567-9c81-317c97ea2ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key size valid",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 64 })\npolicy.size.should.equal(64)",
                  "err": {},
                  "uuid": "bd819808-ba6b-4cad-a711-4c3a8b387c26",
                  "parentUUID": "eccecec5-c6a0-4567-9c81-317c97ea2ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key size invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2da1ba72-894f-4818-ac35-bc7c1d938032",
                  "parentUUID": "eccecec5-c6a0-4567-9c81-317c97ea2ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key size invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 0 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cd9d9cb5-19b3-4327-9269-1c5e07be53e6",
                  "parentUUID": "eccecec5-c6a0-4567-9c81-317c97ea2ae0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "665ea712-1969-4c83-b648-605f5e850e01",
                "bd819808-ba6b-4cad-a711-4c3a8b387c26",
                "2da1ba72-894f-4818-ac35-bc7c1d938032",
                "cd9d9cb5-19b3-4327-9269-1c5e07be53e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e80b6957-ed01-4bed-8060-b919a01ed547",
              "title": "threshold",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "f1f69457-3c93-46bd-80bd-7416a30cef14",
                  "parentUUID": "e80b6957-ed01-4bed-8060-b919a01ed547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n], { threshold: 1 })\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "6836a9ed-90d7-4de9-99c0-97a444ae8a93",
                  "parentUUID": "e80b6957-ed01-4bed-8060-b919a01ed547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a75380af-1c25-410f-a74d-a790eeeb2c21",
                  "parentUUID": "e80b6957-ed01-4bed-8060-b919a01ed547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 0 }).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 2 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5275305b-7f7e-4164-ad93-b87004d3f0d9",
                  "parentUUID": "e80b6957-ed01-4bed-8060-b919a01ed547",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1f69457-3c93-46bd-80bd-7416a30cef14",
                "6836a9ed-90d7-4de9-99c0-97a444ae8a93",
                "a75380af-1c25-410f-a74d-a790eeeb2c21",
                "5275305b-7f7e-4164-ad93-b87004d3f0d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4f81c722-3002-44f9-99fe-e4404e310d83",
              "title": "salt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 48 })\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(48)",
                  "err": {},
                  "uuid": "06b261fa-2b64-4818-9b53-d3852ef92861",
                  "parentUUID": "4f81c722-3002-44f9-99fe-e4404e310d83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: Buffer.from('12345678', 'base64') })\npolicy.salt.should.equal('12345678')",
                  "err": {},
                  "uuid": "ad844913-f833-451a-9c45-ff5adef946ba",
                  "parentUUID": "4f81c722-3002-44f9-99fe-e4404e310d83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "5e82c0d3-1f39-4874-930f-5ddedd4fc318",
                  "parentUUID": "4f81c722-3002-44f9-99fe-e4404e310d83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06b261fa-2b64-4818-9b53-d3852ef92861",
                "ad844913-f833-451a-9c45-ff5adef946ba",
                "5e82c0d3-1f39-4874-930f-5ddedd4fc318"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "15502197-5bbd-40df-a632-017f95216d0f",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "e2f3b6a3-590d-42b9-9feb-6fcbc14b2b92",
                  "parentUUID": "15502197-5bbd-40df-a632-017f95216d0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password1' })\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7b298729-f116-4e06-8f3f-529fb87ec7be",
                  "parentUUID": "15502197-5bbd-40df-a632-017f95216d0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 12345,\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: 12345,\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: 12345\n  }\n]).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8549ebec-0282-4e9e-9d3e-cbe59d6907a2",
                  "parentUUID": "15502197-5bbd-40df-a632-017f95216d0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: '',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "371e15b9-5482-4e14-b416-9781e35e7dd5",
                  "parentUUID": "15502197-5bbd-40df-a632-017f95216d0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2f3b6a3-590d-42b9-9feb-6fcbc14b2b92",
                "7b298729-f116-4e06-8f3f-529fb87ec7be",
                "8549ebec-0282-4e9e-9d3e-cbe59d6907a2",
                "371e15b9-5482-4e14-b416-9781e35e7dd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4b0d8244-e0c5-4449-82e5-4cec74f96b91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 114,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/tests"
      },
      "version": "6.2.0"
    }
  }
}