{
  "stats": {
    "suites": 76,
    "tests": 309,
    "passes": 309,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-28T18:14:42.108Z",
    "end": "2022-04-28T18:16:01.898Z",
    "duration": 79790,
    "testsRegistered": 309,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c8220841-2232-475b-9775-3ebbecde5e78",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a8f09e30-4d3b-44af-bd62-e1c2365767e7",
          "title": "asymmetric",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
          "file": "\\test\\crypto\\asymmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "67f89333-1497-4255-adab-af19f77fdee0",
              "title": "encryption",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric encryption rsa1024",
                  "timedOut": false,
                  "duration": 335,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa1024')\nconst pt = await setup.decrypt(ct, 'rsa1024')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "8b4e4626-52fa-41fe-925b-374bac5c0b75",
                  "parentUUID": "67f89333-1497-4255-adab-af19f77fdee0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric encryption rsa2048",
                  "timedOut": false,
                  "duration": 2193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa2048')\nconst pt = await setup.decrypt(ct, 'rsa2048')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "f06665b5-2f79-403d-9e0e-0a596e8346bf",
                  "parentUUID": "67f89333-1497-4255-adab-af19f77fdee0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b4e4626-52fa-41fe-925b-374bac5c0b75",
                "f06665b5-2f79-403d-9e0e-0a596e8346bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2528,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f792f008-0f28-4db2-b373-de123baac7ba",
              "title": "signatures",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric signatures rsa1024",
                  "timedOut": false,
                  "duration": 495,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa1024')\nconst validity = await setup.verify('hello world', signature, 'rsa1024')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "5c1760f3-b821-4636-8b17-2cf8064891b4",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric signatures rsa2048",
                  "timedOut": false,
                  "duration": 1757,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa2048')\nconst validity = await setup.verify('hello world', signature, 'rsa2048')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "5c06deaf-703a-4574-9e9b-d9df2912a1a8",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa3072",
                  "fullTitle": "asymmetric signatures rsa3072",
                  "timedOut": false,
                  "duration": 11596,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa3072')\nconst validity = await setup.verify('hello world', signature, 'rsa3072')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "0d43d900-3f25-431b-88e8-7b1f54a3948e",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "defaults",
                  "fullTitle": "asymmetric signatures defaults",
                  "timedOut": false,
                  "duration": 8111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world')\nconst validity = await setup.verify('hello world', signature)\nvalidity.should.be.true\nawait setup.getAsymmetricKeyPair()",
                  "err": {},
                  "uuid": "b6da9810-086a-4dad-ae06-50b8c7d73830",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ed25519",
                  "fullTitle": "asymmetric signatures ed25519",
                  "timedOut": false,
                  "duration": 122,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nawait setup.getAsymmetricKeyPair('ed25519')",
                  "err": {},
                  "uuid": "ab1d633f-6c3f-4f4e-a295-8d349757982b",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unknown",
                  "fullTitle": "asymmetric signatures unknown",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.getAsymmetricKeyPair('unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7dd25051-f569-4187-8f18-e8a0e341b4d1",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "errors",
                  "fullTitle": "asymmetric signatures errors",
                  "timedOut": false,
                  "duration": 7578,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.sign(12345, 'rsa1024').should.be.rejectedWith(TypeError)\nconst signature = await setup.sign('hello world')\nsetup.verify(12345, signature).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "46b4f7e5-230f-4dd3-b36e-70818162039b",
                  "parentUUID": "f792f008-0f28-4db2-b373-de123baac7ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c1760f3-b821-4636-8b17-2cf8064891b4",
                "5c06deaf-703a-4574-9e9b-d9df2912a1a8",
                "0d43d900-3f25-431b-88e8-7b1f54a3948e",
                "b6da9810-086a-4dad-ae06-50b8c7d73830",
                "ab1d633f-6c3f-4f4e-a295-8d349757982b",
                "7dd25051-f569-4187-8f18-e8a0e341b4d1",
                "46b4f7e5-230f-4dd3-b36e-70818162039b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29767,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f03b9231-653a-4453-8e14-cf49615d527a",
          "title": "encrypt",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "defaults",
              "fullTitle": "encrypt defaults",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext)\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "a9ebda0e-8f66-4cd6-b61f-922738bd2192",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-CBC",
              "fullTitle": "encrypt AES256-CBC",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "819a0280-7280-4728-be23-c5094c905191",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-CBC",
              "fullTitle": "encrypt AES192-CBC",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "96d86698-e672-4c1d-a675-e8ad228bbd87",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-CBC",
              "fullTitle": "encrypt AES128-CBC",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "1b530ed1-9ec4-4179-b866-259b54c0b19a",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-CBC",
              "fullTitle": "encrypt 3DES-CBC",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "f7dc0649-5b9c-41b2-a337-9b4f5f6d2f3a",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-CBC",
              "fullTitle": "encrypt DES-CBC",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "8b05ef9e-0318-4757-bcf1-c311468f1509",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-ECB",
              "fullTitle": "encrypt AES256-ECB",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "0bc69e0a-ac58-46ac-97b4-c2de35e0c88c",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-ECB",
              "fullTitle": "encrypt AES192-ECB",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "a8024973-7f3a-48ef-882f-31efb16805f3",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-ECB",
              "fullTitle": "encrypt AES128-ECB",
              "timedOut": false,
              "duration": 237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "1c0373a2-d30b-4476-958b-f31968cf010e",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-ECB",
              "fullTitle": "encrypt 3DES-ECB",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "299a2e79-a08d-46e0-b3b8-59c465abd97a",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-ECB",
              "fullTitle": "encrypt DES-ECB",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "df503e06-6de0-4995-9f39-8f761bf09c4d",
              "parentUUID": "f03b9231-653a-4453-8e14-cf49615d527a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c9507bb0-d76b-4e1b-a78a-fd662ecf33e5",
              "title": "utils",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSubkey(32, 'AES256', 'sha256')\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey(32, '', 'sha512')\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "d263fb21-1008-4e85-a938-ad8d63f80695",
                  "parentUUID": "c9507bb0-d76b-4e1b-a78a-fd662ecf33e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "symmetric key",
                  "fullTitle": "encrypt utils symmetric key",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSymmetricKey()\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))",
                  "err": {},
                  "uuid": "99b02017-f5cf-4d44-9ea2-3922df0632d8",
                  "parentUUID": "c9507bb0-d76b-4e1b-a78a-fd662ecf33e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d263fb21-1008-4e85-a938-ad8d63f80695",
                "99b02017-f5cf-4d44-9ea2-3922df0632d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e773ad9b-92c6-4e9c-9703-bd50ffd9d488",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid key",
                  "fullTitle": "encrypt errors invalid key",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt('hello world', 'unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d06b133e-5288-4ebb-8741-fccb0a0f7dd8",
                  "parentUUID": "e773ad9b-92c6-4e9c-9703-bd50ffd9d488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid message",
                  "fullTitle": "encrypt errors invalid message",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "db394e02-c647-4683-953a-55e0dde7efdf",
                  "parentUUID": "e773ad9b-92c6-4e9c-9703-bd50ffd9d488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid ciphertext",
                  "fullTitle": "encrypt errors invalid ciphertext",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.decrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "750af0aa-0e56-4765-a318-792cd924d660",
                  "parentUUID": "e773ad9b-92c6-4e9c-9703-bd50ffd9d488",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d06b133e-5288-4ebb-8741-fccb0a0f7dd8",
                "db394e02-c647-4683-953a-55e0dde7efdf",
                "750af0aa-0e56-4765-a318-792cd924d660"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 320,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a9ebda0e-8f66-4cd6-b61f-922738bd2192",
            "819a0280-7280-4728-be23-c5094c905191",
            "96d86698-e672-4c1d-a675-e8ad228bbd87",
            "1b530ed1-9ec4-4179-b866-259b54c0b19a",
            "f7dc0649-5b9c-41b2-a337-9b4f5f6d2f3a",
            "8b05ef9e-0318-4757-bcf1-c311468f1509",
            "0bc69e0a-ac58-46ac-97b4-c2de35e0c88c",
            "a8024973-7f3a-48ef-882f-31efb16805f3",
            "1c0373a2-d30b-4476-958b-f31968cf010e",
            "299a2e79-a08d-46e0-b3b8-59c465abd97a",
            "df503e06-6de0-4995-9f39-8f761bf09c4d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2471,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "93afa967-8e3b-4556-af90-da9232c0aa59",
          "title": "derive/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "7ad5bf83-e67b-4543-8232-de935b0c7735",
              "parentUUID": "93afa967-8e3b-4556-af90-da9232c0aa59",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e62dbe2c-af8e-4295-bb4e-02f0a25fb1d7",
              "parentUUID": "93afa967-8e3b-4556-af90-da9232c0aa59",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ad5bf83-e67b-4543-8232-de935b0c7735",
            "e62dbe2c-af8e-4295-bb4e-02f0a25fb1d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8239ddc8-4f96-4a5c-96c4-9b887f4f3fd5",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "d0417c55-322f-456d-8149-1a88450ed109",
              "parentUUID": "8239ddc8-4f96-4a5c-96c4-9b887f4f3fd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "18006c23-0d9a-4cf4-bc45-918f108ed7a1",
              "parentUUID": "8239ddc8-4f96-4a5c-96c4-9b887f4f3fd5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0417c55-322f-456d-8149-1a88450ed109",
            "18006c23-0d9a-4cf4-bc45-918f108ed7a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9032ab32-ccb2-4b49-a69f-66ec4550bbf6",
          "title": "derive/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "a126d159-8cd9-4dd2-8489-9d9c86115f24",
              "parentUUID": "9032ab32-ccb2-4b49-a69f-66ec4550bbf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('wrongpassword2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('wrongpassword2'),\n  password3: mfkdf.derive.factors.password('wrongpassword3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password2')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "7fb7c9f7-3978-4667-84a0-c54a03d38be3",
              "parentUUID": "9032ab32-ccb2-4b49-a69f-66ec4550bbf6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nmfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n}).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "73fbf12c-8013-456c-ac2d-41fc38d66bac",
              "parentUUID": "9032ab32-ccb2-4b49-a69f-66ec4550bbf6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3766a88b-2cec-469e-8b16-ec6d8f0b0c19",
              "title": "shares",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 439,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "3b090712-29ae-4197-ae65-a929ae185977",
                  "parentUUID": "3766a88b-2cec-469e-8b16-ec6d8f0b0c19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b090712-29ae-4197-ae65-a929ae185977"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 439,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4c306d51-2aa6-4ecc-b14b-a3b0bdfe12d2",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f78196b4-4608-4e79-a684-a8e5b5e57cee",
                  "parentUUID": "4c306d51-2aa6-4ecc-b14b-a3b0bdfe12d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e6eb4bf3-4493-489e-ab84-b9723c065a2f",
                  "parentUUID": "4c306d51-2aa6-4ecc-b14b-a3b0bdfe12d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f78196b4-4608-4e79-a684-a8e5b5e57cee",
                "e6eb4bf3-4493-489e-ab84-b9723c065a2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 231,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a126d159-8cd9-4dd2-8489-9d9c86115f24",
            "7fb7c9f7-3978-4667-84a0-c54a03d38be3",
            "73fbf12c-8013-456c-ac2d-41fc38d66bac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e48926f1-b12f-4a67-91ea-1897018e3a63",
          "title": "examples",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "kdf",
              "fullTitle": "examples kdf",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup kdf configuration\nconst config = await mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000,\n  pbkdf2digest: 'sha256'\n}) // -> { type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } }\n// derive key\nconst key = await mfkdf.kdf('password', 'salt', 8, config)\nkey.toString('hex') // -> 0394a2ede332c9a1\nconfig.should.deep.equal({ type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } })\nkey.toString('hex').should.equal('0394a2ede332c9a1')",
              "err": {},
              "uuid": "513db132-e06f-44c0-8a36-999ff633120a",
              "parentUUID": "e48926f1-b12f-4a67-91ea-1897018e3a63",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "4ac2a5ad-08d0-4b36-aef3-f2a68ff7d3f0",
              "parentUUID": "e48926f1-b12f-4a67-91ea-1897018e3a63",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "8d37b157-27bd-4a3d-953f-7be9c2af84f3",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n], { size: 8 })\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response = crypto.createHmac('sha1', secret).update(challenge).digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "1bb00fb6-3c86-4881-9edb-4c90ad8301be",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 1152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n], { size: 8 })\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "96ff2351-fb19-4905-8a81-65425dad580e",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') })\n], { size: 8 })\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "b3e5eafe-6fd9-4ef9-8ca3-991e0964b810",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 8 })\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "e8d679b1-57d0-402a-924b-62e5d68bfb5b",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n], { size: 8 })\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ed60c4a1-a9a4-4b85-ae04-d17f51819b1c",
                  "parentUUID": "6ac631ba-807f-4fd1-82cd-30235ea1411f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d37b157-27bd-4a3d-953f-7be9c2af84f3",
                "1bb00fb6-3c86-4881-9edb-4c90ad8301be",
                "96ff2351-fb19-4905-8a81-65425dad580e",
                "b3e5eafe-6fd9-4ef9-8ca3-991e0964b810",
                "e8d679b1-57d0-402a-924b-62e5d68bfb5b",
                "ed60c4a1-a9a4-4b85-ae04-d17f51819b1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a075092c-1c96-4783-8ad4-9173039587d9",
              "title": "secrets",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(Buffer.from('hello world'), 2, 3) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "79b1f2fd-400c-44b8-b275-9dceccc58cb2",
                  "parentUUID": "a075092c-1c96-4783-8ad4-9173039587d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79b1f2fd-400c-44b8-b275-9dceccc58cb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
              "title": "policy",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "b4fc73a2-9310-4a8a-8924-f28559ef9ca6",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "15196ae7-e244-4f7e-81f7-cd7bee21cca0",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, ['passwordA', 'passwordC']) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, ['passwordB', 'passwordC']) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "360b3382-12e0-4ff9-8680-44fd2a3a5d41",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 231,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  ), { size: 8 }\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c3286080-a642-4ba7-bf50-d0b34106ac63",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "6291c28b-379e-40a6-ac24-dae0bdd09972",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "a782fc4a-1387-430f-bb96-0cc73f843a0d",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "01a5d884-a5b8-4c7b-8f35-c34ad82bac9f",
                  "parentUUID": "a2a99eee-ab16-4ff4-b770-741f8fe1d6af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4fc73a2-9310-4a8a-8924-f28559ef9ca6",
                "15196ae7-e244-4f7e-81f7-cd7bee21cca0",
                "360b3382-12e0-4ff9-8680-44fd2a3a5d41",
                "c3286080-a642-4ba7-bf50-d0b34106ac63",
                "6291c28b-379e-40a6-ac24-dae0bdd09972",
                "a782fc4a-1387-430f-bb96-0cc73f843a0d",
                "01a5d884-a5b8-4c7b-8f35-c34ad82bac9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c0288bfd-531e-4478-8218-238209f61966",
              "title": "reconstitution",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "d9f8ea32-65e2-4186-aef3-b57263ca697d",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "6b199351-e52f-4af5-a550-ce7de55ab7ac",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "d05089cb-6df6-4db8-b457-31cab1265d99",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "9bb7b190-9b53-4f45-b4f1-b03eba41f949",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "a20eb55c-c600-40bd-a1c7-da02dc817051",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3c16f4cf-7d88-488a-9541-0167c2bfadf8",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "10c22537-a605-4231-b198-b5475eead5cc",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "7ce0209f-fddd-42cc-b17d-db0362933324",
                  "parentUUID": "c0288bfd-531e-4478-8218-238209f61966",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9f8ea32-65e2-4186-aef3-b57263ca697d",
                "6b199351-e52f-4af5-a550-ce7de55ab7ac",
                "d05089cb-6df6-4db8-b457-31cab1265d99",
                "9bb7b190-9b53-4f45-b4f1-b03eba41f949",
                "a20eb55c-c600-40bd-a1c7-da02dc817051",
                "3c16f4cf-7d88-488a-9541-0167c2bfadf8",
                "10c22537-a605-4231-b198-b5475eead5cc",
                "7ce0209f-fddd-42cc-b17d-db0362933324"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1730,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9042ef56-4167-408b-9990-9f199a39bbe1",
              "title": "persistence",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "b1d55f01-9b02-4122-a63a-850f39cb6c0c",
                  "parentUUID": "9042ef56-4167-408b-9990-9f199a39bbe1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1d55f01-9b02-4122-a63a-850f39cb6c0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ee3d0b74-ea99-484e-8f49-f6f35dcfe5df",
              "title": "envelope",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add/get secret",
                  "fullTitle": "examples envelope add/get secret",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "f0b09510-d303-40d4-be9b-e02e53919bfa",
                  "parentUUID": "ee3d0b74-ea99-484e-8f49-f6f35dcfe5df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/check/remove secret",
                  "fullTitle": "examples envelope add/check/remove secret",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// check secret\nconst check1 = derived.hasEnvelopedSecret('mySecret') // -> true\n// remove secret\nderived.removeEnvelopedSecret('mySecret')\n// check secret\nconst check2 = derived.hasEnvelopedSecret('mySecret') // -> false\ncheck1.should.be.true\ncheck2.should.be.false",
                  "err": {},
                  "uuid": "f2cc8d1a-b640-4cb4-af00-f454c5882658",
                  "parentUUID": "ee3d0b74-ea99-484e-8f49-f6f35dcfe5df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/get key",
                  "fullTitle": "examples envelope add/get key",
                  "timedOut": false,
                  "duration": 236,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
                  "err": {},
                  "uuid": "c940f712-aba5-41de-ad30-a5f5d1ca1c83",
                  "parentUUID": "ee3d0b74-ea99-484e-8f49-f6f35dcfe5df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0b09510-d303-40d4-be9b-e02e53919bfa",
                "f2cc8d1a-b640-4cb4-af00-f454c5882658",
                "c940f712-aba5-41de-ad30-a5f5d1ca1c83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
              "title": "crypto",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte sub-key for \"eth\" using hkdf/sha256\nconst subkey = await key.getSubkey(16, 'eth', 'sha256')\nsubkey.toString('hex') // -> 54ad9e5acbc1c33b08a15dd79126e9c9",
                  "err": {},
                  "uuid": "c9864b85-8539-49b7-bb69-7bb573572b2e",
                  "parentUUID": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getSymmetricKey",
                  "fullTitle": "examples crypto getSymmetricKey",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte AES128 sub-key\nconst subkey = await key.getSymmetricKey('aes128')\nsubkey.toString('hex') // -> c985454e008e5ecc695e865d339cb2be",
                  "err": {},
                  "uuid": "721e6b1d-8644-4bdf-bae2-6458ba995fff",
                  "parentUUID": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getAsymmetricKeyPair",
                  "fullTitle": "examples crypto getAsymmetricKeyPair",
                  "timedOut": false,
                  "duration": 151,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte RSA1024 sub-key\nconst subkey = await key.getAsymmetricKeyPair('rsa1024') // -> { privateKey: Uint8Array, publicKey: Uint8Array }\nsubkey.should.be.a('object')",
                  "err": {},
                  "uuid": "644b458d-95da-4351-8202-932ee65d97e3",
                  "parentUUID": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sign/verify",
                  "fullTitle": "examples crypto sign/verify",
                  "timedOut": false,
                  "duration": 845,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// sign message using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature using RSA-1024\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "b6b47133-bdf3-4d32-9963-5e71a8b013d6",
                  "parentUUID": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "encrypt/decrypt",
                  "fullTitle": "examples crypto encrypt/decrypt",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// encrypt message using 3DES\nconst encrypted = await key.encrypt('hello world', '3des')\n// decrypt message using 3DES\nconst decrypted = await key.decrypt(encrypted, '3des')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "c3c42a50-5f3e-4670-b947-6a656dfcfe37",
                  "parentUUID": "56f654b7-732a-4f82-9ae7-6c2fab5c699a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9864b85-8539-49b7-bb69-7bb573572b2e",
                "721e6b1d-8644-4bdf-bae2-6458ba995fff",
                "644b458d-95da-4351-8202-932ee65d97e3",
                "b6b47133-bdf3-4d32-9963-5e71a8b013d6",
                "c3c42a50-5f3e-4670-b947-6a656dfcfe37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1324,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
              "title": "auth",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "ecf41cca-5f17-4f4d-afe4-39ff3a6490be",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 318,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "3bf41be3-c0c6-43c6-a76c-7d5c325359d6",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "96ee6289-da1d-4ba3-8b3a-77dbc5da33fe",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "9d15bbdf-0b69-487c-be83-6caf15ed0ca3",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 264,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "cc951134-6dee-49c6-b9c4-440541c82af3",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "37790055-31ab-4e11-b8b3-6da888610a8b",
                  "parentUUID": "75b5a1bc-db03-4f8f-98ee-e20c4aa5092f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecf41cca-5f17-4f4d-afe4-39ff3a6490be",
                "3bf41be3-c0c6-43c6-a76c-7d5c325359d6",
                "96ee6289-da1d-4ba3-8b3a-77dbc5da33fe",
                "9d15bbdf-0b69-487c-be83-6caf15ed0ca3",
                "cc951134-6dee-49c6-b9c4-440541c82af3",
                "37790055-31ab-4e11-b8b3-6da888610a8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1009,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "513db132-e06f-44c0-8a36-999ff633120a",
            "4ac2a5ad-08d0-4b36-aef3-f2a68ff7d3f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
          "title": "tutorials",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Auth",
              "fullTitle": "tutorials Auth",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e6452430-a1ae-4e43-81ec-7bac08995747",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloepd Key",
              "fullTitle": "tutorials Enveloepd Key",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
              "err": {},
              "uuid": "d97e5cad-bf3e-433a-a489-596cffde617f",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloped Secret",
              "fullTitle": "tutorials Enveloped Secret",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
              "err": {},
              "uuid": "54c8229e-0702-4be1-b70a-1437193765a7",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "4aa3e977-6c26-4154-b86c-dfeea787b17d",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signing & Verification",
              "fullTitle": "tutorials Signing & Verification",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// sign message with derived key using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
              "err": {},
              "uuid": "7d1db6c2-6215-45f0-9675-a5576df50e22",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Encryption & Decryption",
              "fullTitle": "tutorials Encryption & Decryption",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// encrypt secret with derived key using AES-256\nconst encrypted = await key.encrypt('hello world', 'aes256')\n// ... later, decrypt secret with derived key\nconst decrypted = await key.decrypt(encrypted, 'aes256')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
              "err": {},
              "uuid": "93f4d55f-a46d-4c64-a75c-b7d40a876e86",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// reconstitute key to change password\nawait setup.recoverFactor(await mfkdf.setup.factors.password('newPassword'))\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771",
              "err": {},
              "uuid": "8d18d295-a93b-4e63-85ee-d20572348d8d",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\nsetup.key.toString('hex') // -> 01d0c7236adf2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "5a5c1b5a-8ab5-47ee-9e2c-dc60c9113a77",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "6805ba50-9972-4304-81c5-889ad8253372",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16, threshold: 2 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "a37a8e53-7c69-4a41-8e90-7f0e4ea5a63a",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n], { size: 32 })\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n], { size: 32 })\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n], { size: 32 })\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32 })\nconst threshold = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32, threshold: 2 })\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "a15a97a5-2855-409a-a82e-6c6c7dedf080",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "31ccd246-0bb4-4239-9859-24feb207402f",
              "parentUUID": "b51698ff-c5bf-466b-9d4e-5f81250015c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6452430-a1ae-4e43-81ec-7bac08995747",
            "d97e5cad-bf3e-433a-a489-596cffde617f",
            "54c8229e-0702-4be1-b70a-1437193765a7",
            "4aa3e977-6c26-4154-b86c-dfeea787b17d",
            "7d1db6c2-6215-45f0-9675-a5576df50e22",
            "93f4d55f-a46d-4c64-a75c-b7d40a876e86",
            "8d18d295-a93b-4e63-85ee-d20572348d8d",
            "5a5c1b5a-8ab5-47ee-9e2c-dc60c9113a77",
            "6805ba50-9972-4304-81c5-889ad8253372",
            "a37a8e53-7c69-4a41-8e90-7f0e4ea5a63a",
            "a15a97a5-2855-409a-a82e-6c6c7dedf080",
            "31ccd246-0bb4-4239-9859-24feb207402f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2682,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d8974410-9335-4547-8f6d-9e821cf68fd5",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key)\n  .update(challenge)\n  .digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "e2af3023-2ddf-41bf-b3f3-4513431ad48c",
              "parentUUID": "d8974410-9335-4547-8f6d-9e821cf68fd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response1 = crypto.createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(derive1.policy.factors[0].params.challenge, 'hex')\nconst response2 = crypto.createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "d239073e-a757-400b-9445-2ca4828bca44",
              "parentUUID": "d8974410-9335-4547-8f6d-9e821cf68fd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = '{\"$schema\":\"https://mfkdf.com/schema/v1.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"kdf\":{\"type\":\"argon2id\",\"params\":{\"rounds\":2,\"memory\":24576,\"parallelism\":1}},\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"f8d33204be0436f2629d5173e9bd3fc1953cf982\"}}]}'\nconst derive = await mfkdf.derive.key(JSON.parse(setup), {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex'))\n})\nderive.key.toString('hex').should.equal('ca76d2b456be4e40ba6ef65a68fbfc71bf27a0ca3e0fa4481a2ddf29fb6b65d9')",
              "err": {},
              "uuid": "e8356f1e-ea42-4fce-9e6b-1d1433f80110",
              "parentUUID": "d8974410-9335-4547-8f6d-9e821cf68fd5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f8220bf7-1b3f-4fe5-8d9a-ada5c2519a19",
                  "parentUUID": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1308a85a-f34a-4e91-be15-f9a4a74a4a9c",
                  "parentUUID": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0ec505ea-3f27-45c2-81be-2fb8b1e175fe",
                  "parentUUID": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: Buffer.from('12345') }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2bf99c2e-3391-4b10-b6f0-f4de88a0c5ee",
                  "parentUUID": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "1ea6e84b-42b7-44c1-80f5-4ad2976b1e5b",
                  "parentUUID": "55111d74-efdd-4dc5-8560-37032c6c5dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8220bf7-1b3f-4fe5-8d9a-ada5c2519a19",
                "1308a85a-f34a-4e91-be15-f9a4a74a4a9c",
                "0ec505ea-3f27-45c2-81be-2fb8b1e175fe",
                "2bf99c2e-3391-4b10-b6f0-f4de88a0c5ee",
                "1ea6e84b-42b7-44c1-80f5-4ad2976b1e5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "e2af3023-2ddf-41bf-b3f3-4513431ad48c",
            "d239073e-a757-400b-9445-2ca4828bca44",
            "e8356f1e-ea42-4fce-9e6b-1d1433f80110"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 429,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1bc6ca3c-9c63-458d-8b19-67d3f22a4525",
          "title": "factors/hotp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('hello world')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(891649)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(795484)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "19a30eed-1e99-4564-beae-2479df1d4640",
              "parentUUID": "1bc6ca3c-9c63-458d-8b19-67d3f22a4525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp()\n])",
              "err": {},
              "uuid": "6d5b7faf-3157-475c-87ea-7254cf0c97c5",
              "parentUUID": "1bc6ca3c-9c63-458d-8b19-67d3f22a4525",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "6adc45f6-fc19-423f-aa31-b31edd3c9c61",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8ef5bb10-824f-495e-a063-3c29001d1515",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3e25c03f-b26f-4e44-99a4-4a70cf4ac532",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ee29fff1-507a-439e-b51a-e9f928e22592",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "de9593d2-3f43-409c-adca-390c46e6f1bb",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "323f55fd-5018-4363-98e2-dd4b0f4d4e42",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b31505ad-0d33-4d45-9420-a9f9510668bd",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ae10f472-7ae9-45d6-87a3-1e745dc393e2",
                  "parentUUID": "2f974021-88b0-4c72-92bb-5fb6ea15c45b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6adc45f6-fc19-423f-aa31-b31edd3c9c61",
                "8ef5bb10-824f-495e-a063-3c29001d1515",
                "3e25c03f-b26f-4e44-99a4-4a70cf4ac532",
                "ee29fff1-507a-439e-b51a-e9f928e22592",
                "de9593d2-3f43-409c-adca-390c46e6f1bb",
                "323f55fd-5018-4363-98e2-dd4b0f4d4e42",
                "b31505ad-0d33-4d45-9420-a9f9510668bd",
                "ae10f472-7ae9-45d6-87a3-1e745dc393e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "19a30eed-1e99-4564-beae-2479df1d4640",
            "6d5b7faf-3157-475c-87ea-7254cf0c97c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "76c58069-6a2e-442b-8872-a100fd8b5633",
          "title": "persistence",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "97784cc5-e640-424b-87c5-b80d6090aec7",
              "parentUUID": "76c58069-6a2e-442b-8872-a100fd8b5633",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "fa267fc3-a1eb-4baa-a5e6-c29a46697dfe",
              "parentUUID": "76c58069-6a2e-442b-8872-a100fd8b5633",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97784cc5-e640-424b-87c5-b80d6090aec7",
            "fa267fc3-a1eb-4baa-a5e6-c29a46697dfe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7c7f7417-276c-4b05-9ab0-d34e90be5ac0",
          "title": "factors/stack",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "b7b6d111-6b3b-464a-a8a7-138250d31011",
              "parentUUID": "7c7f7417-276c-4b05-9ab0-d34e90be5ac0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d7726351-0c5b-4257-8e4a-0e78a601645e",
              "parentUUID": "7c7f7417-276c-4b05-9ab0-d34e90be5ac0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ], { id: 'stack1' }),\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ], { id: 'stack2' })\n], { threshold: 1 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "1a8919d0-7a6d-4940-8a91-0464dc1fd080",
              "parentUUID": "7c7f7417-276c-4b05-9ab0-d34e90be5ac0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7b6d111-6b3b-464a-a8a7-138250d31011",
            "d7726351-0c5b-4257-8e4a-0e78a601645e",
            "1a8919d0-7a6d-4940-8a91-0464dc1fd080"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 342,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1e1f4228-551f-4230-abb0-e306d9a4f7a4",
          "title": "factors/totp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 1107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])\nconst code = parseInt(speakeasy.totp({\n  secret: setup.outputs.totp.secret.toString('hex'),\n  encoding: 'hex',\n  step: setup.outputs.totp.period,\n  algorithm: setup.outputs.totp.algorithm,\n  digits: setup.outputs.totp.digits\n}))\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "7e466134-47da-49e5-97e7-c6c2079c6a5d",
              "parentUUID": "1e1f4228-551f-4230-abb0-e306d9a4f7a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 1130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(99922, { time: 1650430991083 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(398884, { time: 1650431018392 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "1c2675c4-41a7-4dcf-93ad-fe229405bad8",
              "parentUUID": "1e1f4228-551f-4230-abb0-e306d9a4f7a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])",
              "err": {},
              "uuid": "dbd1d183-26d2-4169-a1f0-55eeda1d7ac8",
              "parentUUID": "1e1f4228-551f-4230-abb0-e306d9a4f7a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "e2690e80-8eea-458a-a320-8cf3fbd72ae3",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 751,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nmfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1750430943604 })\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7e31f74f-685e-4a06-838e-a67ac96475d9",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "c48a716a-0796-44fb-9290-68b8a6eeecd7",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "f53a8793-984f-4c6c-8be0-9332ee93e438",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "09af7cfb-a74e-4436-9050-75b82a96e1be",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6f7f1b51-be7b-4156-9a65-ead3171a7631",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c679bddf-abfc-4a6e-8414-beebcc6f2829",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f2565a08-e6e6-41aa-b204-deea833ad1aa",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "323c07e7-9df0-4e52-bbd2-705d80d59c5c",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e5b7df5c-4a65-4a5b-ba93-322f9d0f0fce",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2cfc7327-437a-46e7-8bcd-f24f37d3d53d",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "1b9b3a38-4703-45f7-af02-abc82d6a3b90",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a9ba4515-7d95-4e70-823f-07d8efc1a1af",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "21e28b48-ebb3-48f6-8892-b2f43c7564da",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1ef25c13-538c-426a-9de5-2cab06adf717",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a3fe602e-d8dc-4bcf-a146-334a242a58d2",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c854daf7-8121-42a9-9974-eff88b3b74aa",
                  "parentUUID": "8ff7df3c-ec61-437b-aa95-931be0edb1af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2690e80-8eea-458a-a320-8cf3fbd72ae3",
                "7e31f74f-685e-4a06-838e-a67ac96475d9",
                "c48a716a-0796-44fb-9290-68b8a6eeecd7",
                "f53a8793-984f-4c6c-8be0-9332ee93e438",
                "09af7cfb-a74e-4436-9050-75b82a96e1be",
                "6f7f1b51-be7b-4156-9a65-ead3171a7631",
                "c679bddf-abfc-4a6e-8414-beebcc6f2829",
                "f2565a08-e6e6-41aa-b204-deea833ad1aa",
                "323c07e7-9df0-4e52-bbd2-705d80d59c5c",
                "e5b7df5c-4a65-4a5b-ba93-322f9d0f0fce",
                "2cfc7327-437a-46e7-8bcd-f24f37d3d53d",
                "1b9b3a38-4703-45f7-af02-abc82d6a3b90",
                "a9ba4515-7d95-4e70-823f-07d8efc1a1af",
                "21e28b48-ebb3-48f6-8892-b2f43c7564da",
                "1ef25c13-538c-426a-9de5-2cab06adf717",
                "a3fe602e-d8dc-4bcf-a146-334a242a58d2",
                "c854daf7-8121-42a9-9974-eff88b3b74aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 753,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "7e466134-47da-49e5-97e7-c6c2079c6a5d",
            "1c2675c4-41a7-4dcf-93ad-fe229405bad8",
            "dbd1d183-26d2-4169-a1f0-55eeda1d7ac8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2965,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "990e9cb0-51a9-4646-976e-2c3ef2033dd0",
          "title": "factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "1d8c09d8-68c0-4b79-82a3-a47fd2ee3979",
              "parentUUID": "990e9cb0-51a9-4646-976e-2c3ef2033dd0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "23cac35d-c3a4-41af-b495-6b59434b3f46",
              "parentUUID": "990e9cb0-51a9-4646-976e-2c3ef2033dd0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d8c09d8-68c0-4b79-82a3-a47fd2ee3979",
            "23cac35d-c3a4-41af-b495-6b59434b3f46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1091,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ffd34032-2666-465b-996f-266f73d4c9c3",
          "title": "authentication",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
          "file": "\\test\\features\\authentication.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getKey/auth",
              "fullTitle": "authentication getKey/auth",
              "timedOut": false,
              "duration": 7854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nlet authKey\nlet encKey\nauthKey = await key.getSymmetricKey('des', true)\nencKey = await key.getSymmetricKey('des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('3des', true)\nencKey = await key.getSymmetricKey('3des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes128', true)\nencKey = await key.getSymmetricKey('aes128', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes192', true)\nencKey = await key.getSymmetricKey('aes192', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes256', true)\nencKey = await key.getSymmetricKey('aes256', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('ed25519', true)\nencKey = await key.getAsymmetricKeyPair('ed25519', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa1024', true)\nencKey = await key.getAsymmetricKeyPair('rsa1024', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa2048', true)\nencKey = await key.getAsymmetricKeyPair('rsa2048', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa3072', true)\nencKey = await key.getAsymmetricKeyPair('rsa3072', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))",
              "err": {},
              "uuid": "17d4f601-eeb4-4969-8157-b4d4c1301aa2",
              "parentUUID": "ffd34032-2666-465b-996f-266f73d4c9c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
              "title": "valid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c3c50260-8d46-4bc5-89ca-0e4cc506fb4f",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "4f082077-c13c-4503-afc9-849850e5cd63",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "0764f6f9-b45f-4007-8ce7-c8eae59c342e",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c52cdd40-385f-4412-9d36-4e8c2ce1a330",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "4d643fd7-62c7-4be5-a75e-0ad5ec9ad163",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "90f68aa0-aad5-46fe-b15f-caa5bca88d66",
                  "parentUUID": "e2f21c82-35f1-4828-919c-5d157f7d22b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3c50260-8d46-4bc5-89ca-0e4cc506fb4f",
                "4f082077-c13c-4503-afc9-849850e5cd63",
                "0764f6f9-b45f-4007-8ce7-c8eae59c342e",
                "c52cdd40-385f-4412-9d36-4e8c2ce1a330",
                "4d643fd7-62c7-4be5-a75e-0ad5ec9ad163",
                "90f68aa0-aad5-46fe-b15f-caa5bca88d66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 820,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "809a7fc0-0dda-40fe-8aa5-b02b5918da69",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 460,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "7b6fb0f8-f1ea-4335-ba8e-c3ba3d853eb8",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "889ddb9c-7603-4c2d-a65d-daaefc834a79",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 210,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "a17a0c55-4c0d-41d8-ad6f-84f9efb73509",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 373,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "98dca8f3-7e82-4c52-b94e-fe45b25235a9",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "59fc6c1f-dbaf-4e56-958f-bb26ef4a0361",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric/window",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "e1613207-bdcc-4068-b175-cf584947f070",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric/window",
                  "timedOut": false,
                  "duration": 253,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "13b1f4cd-fc53-422e-a078-1490fcfb6ccf",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF/window",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "2022583e-8f51-4f1e-818b-6a52734922c4",
                  "parentUUID": "d2d559c7-8b7c-4be2-9f8f-86085e951a54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "809a7fc0-0dda-40fe-8aa5-b02b5918da69",
                "7b6fb0f8-f1ea-4335-ba8e-c3ba3d853eb8",
                "889ddb9c-7603-4c2d-a65d-daaefc834a79",
                "a17a0c55-4c0d-41d8-ad6f-84f9efb73509",
                "98dca8f3-7e82-4c52-b94e-fe45b25235a9",
                "59fc6c1f-dbaf-4e56-958f-bb26ef4a0361",
                "e1613207-bdcc-4068-b175-cf584947f070",
                "13b1f4cd-fc53-422e-a078-1490fcfb6ccf",
                "2022583e-8f51-4f1e-818b-6a52734922c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "17d4f601-eeb4-4969-8157-b4d4c1301aa2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7854,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
          "title": "entropy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "f9e53e42-8e21-4ffb-b536-5ab88f85afdc",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "3a54ec3f-6901-41d2-9252-fc9b3139cbe3",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "3958dc47-0a70-4f07-b91a-f25fd8dfca50",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "9797bd3a-27e1-4ed6-be1c-67843ef8f447",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "4bafa866-f0b4-4dec-9912-24cb1368cc43",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "fff9bfcc-b50e-4ff5-8c4a-515b35bc0705",
              "parentUUID": "b46b5758-d8bf-47b7-9907-a36c64179f1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9e53e42-8e21-4ffb-b536-5ab88f85afdc",
            "3a54ec3f-6901-41d2-9252-fc9b3139cbe3",
            "3958dc47-0a70-4f07-b91a-f25fd8dfca50",
            "9797bd3a-27e1-4ed6-be1c-67843ef8f447",
            "4bafa866-f0b4-4dec-9912-24cb1368cc43",
            "fff9bfcc-b50e-4ff5-8c4a-515b35bc0705"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1978,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dd8d3343-d237-4580-872e-6b531b1770d5",
          "title": "enveloping",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
          "file": "\\test\\features\\envelope.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "secrets",
              "fullTitle": "enveloping secrets",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nawait setup.addEnvelopedSecret('key2', input)\nawait setup.addEnvelopedSecret('key3', input)\nawait setup.removeEnvelopedSecret('key2')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst output = await derive.getEnvelopedSecret('key')\noutput.toString('hex').should.equal(input.toString('hex'))",
              "err": {},
              "uuid": "e613c146-9afb-452e-9a01-7069885ca419",
              "parentUUID": "dd8d3343-d237-4580-872e-6b531b1770d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys",
              "fullTitle": "enveloping keys",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nawait setup.addEnvelopedKey('key1')\nawait setup.addEnvelopedKey('key2', 'rsa1024')\nawait setup.addEnvelopedKey('key3', 'rsa2048')\nawait setup.addEnvelopedKey('key4', 'ed25519')\nconst key11 = await setup.getEnvelopedKey('key1')\nconst key12 = await setup.getEnvelopedKey('key2')\nconst key13 = await setup.getEnvelopedKey('key3')\nconst key14 = await setup.getEnvelopedKey('key4')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst key21 = await derive.getEnvelopedKey('key1')\nconst key22 = await derive.getEnvelopedKey('key2')\nconst key23 = await derive.getEnvelopedKey('key3')\nconst key24 = await derive.getEnvelopedKey('key4')\nkey11.export({ format: 'jwk' }).should.deep.equal(key21.export({ format: 'jwk' }))\nkey12.export({ format: 'jwk' }).should.deep.equal(key22.export({ format: 'jwk' }))\nkey13.export({ format: 'jwk' }).should.deep.equal(key23.export({ format: 'jwk' }))\nkey14.export({ format: 'jwk' }).should.deep.equal(key24.export({ format: 'jwk' }))",
              "err": {},
              "uuid": "9d0f9026-c5ce-4a04-9da7-affae4b20ab5",
              "parentUUID": "dd8d3343-d237-4580-872e-6b531b1770d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "50a013cd-467e-4b5f-9101-7329b3c4ad16",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
              "file": "\\test\\features\\envelope.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b9abdd17-a716-49ed-b0f7-78b0c4b39dc1",
                  "title": "addEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret(12345, input).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "e158df41-0658-44c3-a422-f2b724b115af",
                      "parentUUID": "b9abdd17-a716-49ed-b0f7-78b0c4b39dc1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "value/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret value/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedSecret('id', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "19fc1875-7543-4c96-81b6-f077e78ddcdd",
                      "parentUUID": "b9abdd17-a716-49ed-b0f7-78b0c4b39dc1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret type/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret('id', input, 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "c971686c-b02a-411d-91e9-9073525a358e",
                      "parentUUID": "b9abdd17-a716-49ed-b0f7-78b0c4b39dc1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/unique",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/unique",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nsetup.addEnvelopedSecret('key', input).should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "c9e877d1-2b20-41a4-897d-5e706285cb65",
                      "parentUUID": "b9abdd17-a716-49ed-b0f7-78b0c4b39dc1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e158df41-0658-44c3-a422-f2b724b115af",
                    "19fc1875-7543-4c96-81b6-f077e78ddcdd",
                    "c971686c-b02a-411d-91e9-9073525a358e",
                    "c9e877d1-2b20-41a4-897d-5e706285cb65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 427,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "bf45a1d4-169e-4235-94b0-4908987a14a1",
                  "title": "removeEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "7e168285-fb66-4ab4-8f6f-7872d3c552a7",
                      "parentUUID": "bf45a1d4-169e-4235-94b0-4908987a14a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret('12345')\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "e9807d64-1ee5-4144-86cb-00d9e11fae05",
                      "parentUUID": "bf45a1d4-169e-4235-94b0-4908987a14a1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7e168285-fb66-4ab4-8f6f-7872d3c552a7",
                    "e9807d64-1ee5-4144-86cb-00d9e11fae05"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 211,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "58336f8d-c2eb-4262-867c-980ab9816bd6",
                  "title": "addEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "7b74a570-b564-4c7b-b1e1-5f34716da9a0",
                      "parentUUID": "58336f8d-c2eb-4262-867c-980ab9816bd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedKey type/type",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "6699715d-f543-4102-b62a-72e3f7136926",
                      "parentUUID": "58336f8d-c2eb-4262-867c-980ab9816bd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/range",
                      "fullTitle": "enveloping errors addEnvelopedKey type/range",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', '12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "4a998fd3-6ce2-4b60-96e9-3d48d1d371b3",
                      "parentUUID": "58336f8d-c2eb-4262-867c-980ab9816bd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7b74a570-b564-4c7b-b1e1-5f34716da9a0",
                    "6699715d-f543-4102-b62a-72e3f7136926",
                    "4a998fd3-6ce2-4b60-96e9-3d48d1d371b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 316,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8118a1bb-3eb6-4386-b259-6e63307e5e4f",
                  "title": "getEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "e79a8486-fe07-408f-bad5-9db7d285bbf7",
                      "parentUUID": "8118a1bb-3eb6-4386-b259-6e63307e5e4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret('12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "f99fd5ec-ff26-44c8-8eaa-6588819db456",
                      "parentUUID": "8118a1bb-3eb6-4386-b259-6e63307e5e4f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e79a8486-fe07-408f-bad5-9db7d285bbf7",
                    "f99fd5ec-ff26-44c8-8eaa-6588819db456"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 215,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9ca77477-c301-4e58-b51b-f63944d02cd5",
                  "title": "getEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "253b1d64-49b2-4d88-85e7-facde4878a67",
                      "parentUUID": "9ca77477-c301-4e58-b51b-f63944d02cd5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "253b1d64-49b2-4d88-85e7-facde4878a67"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 107,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c7ef00a2-ea3c-4927-a515-eef486347bdb",
                  "title": "hasEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors hasEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.hasEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "5f421a9d-f60d-499a-b2df-403831ade34f",
                      "parentUUID": "c7ef00a2-ea3c-4927-a515-eef486347bdb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5f421a9d-f60d-499a-b2df-403831ade34f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 108,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "e613c146-9afb-452e-9a01-7069885ca419",
            "9d0f9026-c5ce-4a04-9da7-affae4b20ab5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 478,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
          "title": "kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\kdf.js",
          "file": "\\test\\features\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "types",
              "fullTitle": "kdf types",
              "timedOut": false,
              "duration": 432,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pbkdf2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst bcrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst scrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nconst argon2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nBuffer.isBuffer(pbkdf2).should.be.true\nBuffer.isBuffer(bcrypt).should.be.true\nBuffer.isBuffer(scrypt).should.be.true\nBuffer.isBuffer(argon2).should.be.true",
              "err": {},
              "uuid": "4e41983c-4e69-4b94-822b-2fea2637b986",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha1",
              "fullTitle": "kdf pbkdf2/sha1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 16, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 25555,\n    digest: 'sha1'\n  }\n})\nBuffer.isBuffer(key).should.be.true\nkey.toString('hex').should.equal('8ee4a527b20aa8feeb78d70447d84e20')",
              "err": {},
              "uuid": "79552724-d36a-4c2c-95f7-1ba3b9465c0f",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha512",
              "fullTitle": "kdf pbkdf2/sha512",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secret', 'salt', 64, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha512'\n  }\n})\nkey.toString('hex').should.equal('3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae')",
              "err": {},
              "uuid": "ecd1f387-0ab8-4375-8e45-a4bb7999481e",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/default",
              "fullTitle": "kdf pbkdf2/default",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('test', '', 32, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst key2 = await mfkdf.kdf('test', '', 32, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "686d741c-7403-48f1-9fd6-3dcb013edf6f",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/same",
              "fullTitle": "kdf bcrypt/same",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "63c96b86-9e4c-4298-8331-4316bcc27ea7",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/inputdiff",
              "fullTitle": "kdf bcrypt/inputdiff",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password2', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "d30d6195-df4c-450a-a3c9-8c421613cbde",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/saltdiff",
              "fullTitle": "kdf bcrypt/saltdiff",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "2d4de624-6d90-46df-b7bf-ebb97317aa1c",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/rounddiff",
              "fullTitle": "kdf bcrypt/rounddiff",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, { type: 'bcrypt', params: { rounds: 10 } })\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, { type: 'bcrypt', params: { rounds: 11 } })\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "cfe425bd-0b50-406e-a2c4-74128aa8d196",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/length",
              "fullTitle": "kdf bcrypt/length",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key16 = await mfkdf.kdf('password', 'salt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key16).should.equal(16)\nconst key32 = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key32).should.equal(32)\nconst key64 = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key64).should.equal(64)",
              "err": {},
              "uuid": "ffde4e03-78b1-45ed-969a-4b730e7a2e02",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/known",
              "fullTitle": "kdf bcrypt/known",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey.toString('hex').should.equal('cb36d3d02d502acdf10dfc2d022bf3c024f16a368ba2df4456fbf97291f64334')",
              "err": {},
              "uuid": "7b9714aa-f847-4f31-adce-55519deacd85",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/fast",
              "fullTitle": "kdf scrypt/fast",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 16384, scryptblocksize: 8, scryptparallelism: 1 }))\nkey.toString('hex').should.equal('745731af4484f323968969eda289aeee005b5903ac561e64a5aca121797bf7734ef9fd58422e2e22183bcacba9ec87ba0c83b7a2e788f03ce0da06463433cda6')",
              "err": {},
              "uuid": "b33d05d6-ed39-48b7-a6f1-f3111e077b6a",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/defaults",
              "fullTitle": "kdf scrypt/defaults",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nkey.toString('hex').should.equal('9009fca57ef2b8c342bdad6b9247e4a1b5bd85628152116513ad44e93cf1b0e2')",
              "err": {},
              "uuid": "12015217-a847-46f8-ba11-5c5aa8d409b2",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/N",
              "fullTitle": "kdf scrypt/N",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024 }))\nkey.toString('hex').should.equal('ceb6a6bf4f4afeb3d1806714474d4f00ca97c2ad76a641269192d11444e13a6b')",
              "err": {},
              "uuid": "c4ccc46a-99dc-4481-8e44-72e2fc384772",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/R",
              "fullTitle": "kdf scrypt/R",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptblocksize: 16 }))\nkey.toString('hex').should.equal('a63de1de715f95bebd9f6d58d78ff11028a8412c1fcf71673544373c67095836')",
              "err": {},
              "uuid": "27dc412c-e73f-467c-aced-8556382d0403",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/P",
              "fullTitle": "kdf scrypt/P",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptparallelism: 2 }))\nkey.toString('hex').should.equal('ef224277727457992dc05983b1fd1208bae35b100c853ba4bb11f1ba7ca4c436')",
              "err": {},
              "uuid": "fb6acdf0-d21e-4035-9fd8-c6f7eb99fd6b",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2i",
              "fullTitle": "kdf argon2i",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2i' }))\nkey.toString('hex').should.equal('7357892df510f136a0688ceab37bbaf7ba695de590065072717fa6728961c92a')",
              "err": {},
              "uuid": "9fc5cd9b-518f-4a6a-bd88-8c778f7045f5",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2d",
              "fullTitle": "kdf argon2d",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2d' }))\nkey.toString('hex').should.equal('423b0dcc7bbfe16fa8ee7a2e2ebd8891873d726f9dfe70890a7197a5503a2848')",
              "err": {},
              "uuid": "988d28ef-b85f-4c05-a430-1596ba3dd0c0",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id",
              "fullTitle": "kdf argon2id",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "84e12066-9267-426f-84b9-66b7e5f4d325",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/mem",
              "fullTitle": "kdf argon2id/mem",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2mem: 16384 }))\nkey.toString('hex').should.equal('e043f979311b14ff8378b785469974e899a08f05509323a04b2ca29ef63ff3af')",
              "err": {},
              "uuid": "8194c0b8-1a99-47dc-bb54-7f4196313149",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/time",
              "fullTitle": "kdf argon2id/time",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2time: 1 }))\nkey.toString('hex').should.equal('bf6b1773bdae362ecea04b889079b6628d1f35d96a2be9f2a5481c2d1236e8d7')",
              "err": {},
              "uuid": "6d0dea3c-47ce-4d3a-995d-00bba2a05156",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/parallelism",
              "fullTitle": "kdf argon2id/parallelism",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2parallelism: 2 }))\nkey.toString('hex').should.equal('5c12c6873b938cd8467b677d23e525389e3ff7ed62b4ad9e285e1191244f40ca')",
              "err": {},
              "uuid": "dedc4897-3462-439c-9856-05b5f7bb7fd4",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "kdf default",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({}))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "354bc5a8-b745-4b25-846a-779a6490e2f3",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "kdf invalid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.kdf('password1', 'salt1', 16, { type: 'invalid', params: { } }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "0a8bcad1-83c6-4751-917c-7799eb4af101",
              "parentUUID": "27a3f407-dd3f-44e9-a0fb-c83bfb4dc92e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e41983c-4e69-4b94-822b-2fea2637b986",
            "79552724-d36a-4c2c-95f7-1ba3b9465c0f",
            "ecd1f387-0ab8-4375-8e45-a4bb7999481e",
            "686d741c-7403-48f1-9fd6-3dcb013edf6f",
            "63c96b86-9e4c-4298-8331-4316bcc27ea7",
            "d30d6195-df4c-450a-a3c9-8c421613cbde",
            "2d4de624-6d90-46df-b7bf-ebb97317aa1c",
            "cfe425bd-0b50-406e-a2c4-74128aa8d196",
            "ffde4e03-78b1-45ed-969a-4b730e7a2e02",
            "7b9714aa-f847-4f31-adce-55519deacd85",
            "b33d05d6-ed39-48b7-a6f1-f3111e077b6a",
            "12015217-a847-46f8-ba11-5c5aa8d409b2",
            "c4ccc46a-99dc-4481-8e44-72e2fc384772",
            "27dc412c-e73f-467c-aced-8556382d0403",
            "fb6acdf0-d21e-4035-9fd8-c6f7eb99fd6b",
            "9fc5cd9b-518f-4a6a-bd88-8c778f7045f5",
            "988d28ef-b85f-4c05-a430-1596ba3dd0c0",
            "84e12066-9267-426f-84b9-66b7e5f4d325",
            "8194c0b8-1a99-47dc-bb54-7f4196313149",
            "6d0dea3c-47ce-4d3a-995d-00bba2a05156",
            "dedc4897-3462-439c-9856-05b5f7bb7fd4",
            "354bc5a8-b745-4b25-846a-779a6490e2f3",
            "0a8bcad1-83c6-4751-917c-7799eb4af101"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2410,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5c218019-5b39-4999-9e2b-17f29cfeec0d",
          "title": "policy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4a22ac04-bdf6-4f9e-8db7-b65234533dc3",
              "title": "validate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 121,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "d0740a9d-f0d3-41c5-adbd-6aeafa8b772a",
                  "parentUUID": "4a22ac04-bdf6-4f9e-8db7-b65234533dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password2' })\n    )\n  )\n).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b7551069-5242-4c3d-9e33-89413ec2a5ef",
                  "parentUUID": "4a22ac04-bdf6-4f9e-8db7-b65234533dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0740a9d-f0d3-41c5-adbd-6aeafa8b772a",
                "b7551069-5242-4c3d-9e33-89413ec2a5ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 230,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "767850cd-a810-4140-af9f-069185540d98",
              "title": "evaluate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.true",
                  "err": {},
                  "uuid": "797757b8-65d3-4a24-8e77-a57ac7217c39",
                  "parentUUID": "767850cd-a810-4140-af9f-069185540d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.false",
                  "err": {},
                  "uuid": "ddc07f1a-3cc8-4a6b-9510-e2d6af906608",
                  "parentUUID": "767850cd-a810-4140-af9f-069185540d98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "797757b8-65d3-4a24-8e77-a57ac7217c39",
                "ddc07f1a-3cc8-4a6b-9510-e2d6af906608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
              "title": "derive",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "38298755-f575-4da0-9f73-3f8fc3f8704e",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "26302120-7350-4e5e-b0f7-e8482aa6e8d5",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "d4de1ead-b3dd-4554-995d-d57f475499da",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 612,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "d7738041-51de-47a8-8906-ba008ff29ce7",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 346,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "1e18bc35-185a-4eec-a201-dce27a5a68ae",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "feb099f4-6e78-4823-b9af-85c97e4d1ba0",
                  "parentUUID": "73ee6e89-50d1-4283-89a0-6c35d0c36877",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38298755-f575-4da0-9f73-3f8fc3f8704e",
                "26302120-7350-4e5e-b0f7-e8482aa6e8d5",
                "d4de1ead-b3dd-4554-995d-d57f475499da",
                "d7738041-51de-47a8-8906-ba008ff29ce7",
                "1e18bc35-185a-4eec-a201-dce27a5a68ae",
                "feb099f4-6e78-4823-b9af-85c97e4d1ba0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1867,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "91d2c693-e3a8-48cb-a3c4-c68774f06aaf",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n        await mfkdf.setup.factors.password('password2', { id: 'password2' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n])\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "91f21577-ba63-4c56-a2d2-2e25dda698e9",
                  "parentUUID": "91d2c693-e3a8-48cb-a3c4-c68774f06aaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0071fec2-10aa-44c1-9ed2-76336a5e52c6",
                  "parentUUID": "91d2c693-e3a8-48cb-a3c4-c68774f06aaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91f21577-ba63-4c56-a2d2-2e25dda698e9",
                "0071fec2-10aa-44c1-9ed2-76336a5e52c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 213,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
          "title": "reconstitution",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "3762a206-8935-4c0a-82d8-5acd8def33da",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nderive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nmfkdf.derive.key(derive2.policy, {\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "373579a5-12ca-421a-a025-4529fd2c4a42",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "134c9c98-1440-471b-a550-285723f144d5",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactor(await mfkdf.setup.factors.password('password3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "f98a0a5f-bd38-41eb-9411-81226967a0c6",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "8f6eee2b-90e1-433e-a9da-33a66d0b7d04",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "ba86ddd5-98c1-4702-b704-f9172bccdba6",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "3489f721-6447-4ece-ad7e-7918a4c01641",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(['password1'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "50dccfcc-22d0-4604-b3b8-54aeb5abd9a9",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "a74896c8-7133-47d8-8747-1470e7e979f4",
              "parentUUID": "53d3b28f-7d66-4a6f-bf9f-8c9dcdf4c5c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([12345], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3d13d9d8-7035-48fd-9d08-ee0e77638c11",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute(['password4'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "431fb47d-23f9-4c67-8874-72fb7f78e327",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.reconstitute(['password3'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('diffPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "09522a5f-9138-43a5-a118-82d071440fd9",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute('hello', [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3113640a-3903-4853-afc0-f5878ef9b35f",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], '12345', 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2872c7c5-058b-4b58-82cc-9fda09e8dc87",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], '12345').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ede73ed5-2f1a-4916-8efe-4e8f10566542",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9f3b0d0f-7104-46c2-89f3-218dafa6683e",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 12345,\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fb2ac2fb-e3a2-4e2e-b3e1-5f8733dd53cf",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: '',\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "767b7c4e-6fa2-4cb8-839d-e354db9248d7",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "6d28446d-8666-4ec6-8355-d7352b8a28e2",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "054d0e7d-bfcb-4437-abbd-fd33843ea9f2",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: 12345,\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c0157aff-011b-48f2-aad0-0ba8d363df68",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from(''),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9bd86d21-56b4-4cc2-af25-fd4c64832793",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: 12345,\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0509388b-5320-484c-a38b-21fbbf9e81ea",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: async () => {\n      return {}\n    },\n    output: 12345\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f77443f9-bb2d-40ba-89d2-59e5843e2587",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fc0e3cf0-ba42-4fbf-bdf7-966a4f95f50c",
                  "parentUUID": "cebc47b6-f153-40f1-9a36-cc2b5745d0e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d13d9d8-7035-48fd-9d08-ee0e77638c11",
                "431fb47d-23f9-4c67-8874-72fb7f78e327",
                "09522a5f-9138-43a5-a118-82d071440fd9",
                "3113640a-3903-4853-afc0-f5878ef9b35f",
                "2872c7c5-058b-4b58-82cc-9fda09e8dc87",
                "ede73ed5-2f1a-4916-8efe-4e8f10566542",
                "9f3b0d0f-7104-46c2-89f3-218dafa6683e",
                "fb2ac2fb-e3a2-4e2e-b3e1-5f8733dd53cf",
                "767b7c4e-6fa2-4cb8-839d-e354db9248d7",
                "6d28446d-8666-4ec6-8355-d7352b8a28e2",
                "054d0e7d-bfcb-4437-abbd-fd33843ea9f2",
                "c0157aff-011b-48f2-aad0-0ba8d363df68",
                "9bd86d21-56b4-4cc2-af25-fd4c64832793",
                "0509388b-5320-484c-a38b-21fbbf9e81ea",
                "f77443f9-bb2d-40ba-89d2-59e5843e2587",
                "fc0e3cf0-ba42-4fbf-bdf7-966a4f95f50c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1687,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "3762a206-8935-4c0a-82d8-5acd8def33da",
            "373579a5-12ca-421a-a025-4529fd2c4a42",
            "134c9c98-1440-471b-a550-285723f144d5",
            "f98a0a5f-bd38-41eb-9411-81226967a0c6",
            "8f6eee2b-90e1-433e-a9da-33a66d0b7d04",
            "ba86ddd5-98c1-4702-b704-f9172bccdba6",
            "3489f721-6447-4ece-ad7e-7918a4c01641",
            "50dccfcc-22d0-4604-b3b8-54aeb5abd9a9",
            "a74896c8-7133-47d8-8747-1470e7e979f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6b5cb81b-1549-462d-8cc1-d91a3461e289",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "85de1e22-b34c-4bb6-b400-db597bb277c1",
              "parentUUID": "6b5cb81b-1549-462d-8cc1-d91a3461e289",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "26bebeab-9e6e-4a9e-ab88-5e8d2d4de903",
              "parentUUID": "6b5cb81b-1549-462d-8cc1-d91a3461e289",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a42e2087-b194-448c-9932-7d13fe5fb14c",
              "parentUUID": "6b5cb81b-1549-462d-8cc1-d91a3461e289",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85de1e22-b34c-4bb6-b400-db597bb277c1",
            "26bebeab-9e6e-4a9e-ab88-5e8d2d4de903",
            "a42e2087-b194-448c-9932-7d13fe5fb14c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
          "title": "secrets",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c52d3b4e-ae00-41f8-b7a9-9a88974ba1bc",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 1, 5)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "fc37a449-8d7b-47fb-8492-5846551f63c0",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 2, 3)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "da3a19ad-e13f-4dd7-9bb8-343fdc476a13",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "7d5a4031-5ffc-403b-a0f3-264c71e51421",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 1024)\nshares.should.be.an('array').of.length(1024)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 1020; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[1023] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "054df9e4-b074-4c3d-8632-13da5db6a9e5",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)\nxor(shares[0], shares[1]).toString('hex').should.equal('12345678')",
              "err": {},
              "uuid": "c9071a88-f84c-451b-b273-0a2870fbee59",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "56c30543-ae61-4fbb-b098-302c8f38a100",
              "parentUUID": "7f0a76d9-9bc4-4dbf-a0b5-1345e34671ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c52d3b4e-ae00-41f8-b7a9-9a88974ba1bc",
            "fc37a449-8d7b-47fb-8492-5846551f63c0",
            "da3a19ad-e13f-4dd7-9bb8-343fdc476a13",
            "7d5a4031-5ffc-403b-a0f3-264c71e51421",
            "054df9e4-b074-4c3d-8632-13da5db6a9e5",
            "c9071a88-f84c-451b-b273-0a2870fbee59",
            "56c30543-ae61-4fbb-b098-302c8f38a100"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 77,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "94bfef87-40aa-449d-a293-dbb9e337de16",
          "title": "secrets/recover",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "f5d9b1fe-b621-4973-8e90-329b96d770e6",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "0c786f16-b8e2-4f9f-8f0e-d94dae1c82c8",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "10c823aa-a6e8-43e4-b06b-56fa1283fcfd",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "b30f29be-df58-45b6-8c90-46662c5a0425",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d4a2eb9d-3ffb-4e74-b2fd-5b5790230e91",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "8e48c6a8-1324-4cf5-8c6a-805c4b45eb9c",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "b68ccb82-2538-4581-9364-171a877ff2df",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "b78823bf-6069-4a4a-b019-8e48e4cdf2e5",
              "parentUUID": "94bfef87-40aa-449d-a293-dbb9e337de16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5d9b1fe-b621-4973-8e90-329b96d770e6",
            "0c786f16-b8e2-4f9f-8f0e-d94dae1c82c8",
            "10c823aa-a6e8-43e4-b06b-56fa1283fcfd",
            "b30f29be-df58-45b6-8c90-46662c5a0425",
            "d4a2eb9d-3ffb-4e74-b2fd-5b5790230e91",
            "8e48c6a8-1324-4cf5-8c6a-805c4b45eb9c",
            "b68ccb82-2538-4581-9364-171a877ff2df",
            "b78823bf-6069-4a4a-b019-8e48e4cdf2e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "35745b12-86a7-446b-ad07-bc6b518dae4d",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "4783caa8-c0c6-41a8-b96b-2ce451cae544",
              "parentUUID": "35745b12-86a7-446b-ad07-bc6b518dae4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "52614596-d080-471a-8646-f702acc9dbd6",
              "parentUUID": "35745b12-86a7-446b-ad07-bc6b518dae4d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "fa4084cb-9a3f-4052-b415-df92c18bf35d",
              "parentUUID": "35745b12-86a7-446b-ad07-bc6b518dae4d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4783caa8-c0c6-41a8-b96b-2ce451cae544",
            "52614596-d080-471a-8646-f702acc9dbd6",
            "fa4084cb-9a3f-4052-b415-df92c18bf35d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "20b5d495-038b-4ba2-b0c0-5ef69c33cf5c",
          "title": "setup/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.password('password', { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "df8ab28d-996d-4dcd-964a-ccb6bc7b3e0b",
              "parentUUID": "20b5d495-038b-4ba2-b0c0-5ef69c33cf5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.password('password', { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "5e2fb070-8e4c-4ab2-99de-40ea1e01851a",
              "parentUUID": "20b5d495-038b-4ba2-b0c0-5ef69c33cf5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "41e0f33f-2a75-4048-9453-3551fc09df2a",
              "parentUUID": "20b5d495-038b-4ba2-b0c0-5ef69c33cf5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df8ab28d-996d-4dcd-964a-ccb6bc7b3e0b",
            "5e2fb070-8e4c-4ab2-99de-40ea1e01851a",
            "41e0f33f-2a75-4048-9453-3551fc09df2a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "299c4565-2e51-4127-b09e-c38726827e5a",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ uuid: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ uuid: 'hello' }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "c4012929-28d6-4920-b058-584b74b1e990",
              "parentUUID": "299c4565-2e51-4127-b09e-c38726827e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "0b833fbe-4d96-4c6b-a1ff-41808aa78e1c",
              "parentUUID": "299c4565-2e51-4127-b09e-c38726827e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({ uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\nfactor.type.should.equal('uuid')\nfactor.data.toString('hex').should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "73ab54a3-0b7f-4a0b-89d7-2fbf6723d532",
              "parentUUID": "299c4565-2e51-4127-b09e-c38726827e5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "5da29d7b-4a3a-474f-87da-b1ab2ce3d33e",
              "parentUUID": "299c4565-2e51-4127-b09e-c38726827e5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4012929-28d6-4920-b058-584b74b1e990",
            "0b833fbe-4d96-4c6b-a1ff-41808aa78e1c",
            "73ab54a3-0b7f-4a0b-89d7-2fbf6723d532",
            "5da29d7b-4a3a-474f-87da-b1ab2ce3d33e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a59b3390-6134-4365-b182-5ca37a897241",
          "title": "setup/kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
          "file": "\\test\\setup\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cc46854-9c18-4be1-9b8a-634b5078b674",
              "title": "pbkdf2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf pbkdf2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})",
                  "err": {},
                  "uuid": "6e8fefe9-7688-456d-ab30-7ffc7222b277",
                  "parentUUID": "9cc46854-9c18-4be1-9b8a-634b5078b674",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "87abf78d-7caf-481b-9d0f-5e5b7b0aa06a",
                  "title": "pbkdf2rounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "754ca02c-448a-4e19-a6de-161ab73443c4",
                      "parentUUID": "87abf78d-7caf-481b-9d0f-5e5b7b0aa06a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "8af48533-53ec-489d-8ee8-16b55ffaee3e",
                      "parentUUID": "87abf78d-7caf-481b-9d0f-5e5b7b0aa06a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha256'\n  }\n})",
                      "err": {},
                      "uuid": "f385f8f9-b9a0-4fab-899f-43905a8764ee",
                      "parentUUID": "87abf78d-7caf-481b-9d0f-5e5b7b0aa06a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "754ca02c-448a-4e19-a6de-161ab73443c4",
                    "8af48533-53ec-489d-8ee8-16b55ffaee3e",
                    "f385f8f9-b9a0-4fab-899f-43905a8764ee"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "307b1fbc-32ae-445d-9457-4a24e3a1ea35",
                  "title": "pbkdf2digest",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 0\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "db24f118-0919-40dd-a842-9def049de181",
                      "parentUUID": "307b1fbc-32ae-445d-9457-4a24e3a1ea35",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 'foo'\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "1acd02d3-bae7-4c42-99de-eb7fdce0b2a8",
                      "parentUUID": "307b1fbc-32ae-445d-9457-4a24e3a1ea35",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2digest: 'sha512'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha512'\n  }\n})",
                      "err": {},
                      "uuid": "ffbe9611-b3a5-475a-9347-5f9e68e7327d",
                      "parentUUID": "307b1fbc-32ae-445d-9457-4a24e3a1ea35",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "db24f118-0919-40dd-a842-9def049de181",
                    "1acd02d3-bae7-4c42-99de-eb7fdce0b2a8",
                    "ffbe9611-b3a5-475a-9347-5f9e68e7327d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "6e8fefe9-7688-456d-ab30-7ffc7222b277"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b64d601d-0391-4ac9-b30a-a8d890b83898",
              "title": "bcrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf bcrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt'\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 10\n  }\n})",
                  "err": {},
                  "uuid": "e3613f82-a5a8-41c9-a0e5-c7fe939f9925",
                  "parentUUID": "b64d601d-0391-4ac9-b30a-a8d890b83898",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1e22bd54-299a-4be1-a730-898ceba57a04",
                  "title": "bcryptrounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "fcbec1e8-0f4a-40cd-a06e-bff6fc77eda6",
                      "parentUUID": "1e22bd54-299a-4be1-a730-898ceba57a04",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "f4c5057f-6270-4cef-9184-b8646929f527",
                      "parentUUID": "1e22bd54-299a-4be1-a730-898ceba57a04",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds valid",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt',\n  bcryptrounds: 25\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 25\n  }\n})",
                      "err": {},
                      "uuid": "5032bcb3-6bff-4fbc-9176-794d48a84e71",
                      "parentUUID": "1e22bd54-299a-4be1-a730-898ceba57a04",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fcbec1e8-0f4a-40cd-a06e-bff6fc77eda6",
                    "f4c5057f-6270-4cef-9184-b8646929f527",
                    "5032bcb3-6bff-4fbc-9176-794d48a84e71"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "e3613f82-a5a8-41c9-a0e5-c7fe939f9925"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "181f60e0-44c4-41e5-aecf-7150687a9d09",
              "title": "scrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf scrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt'\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "7f0aca8a-2fcf-4c06-942b-70f56ea6ff79",
                  "parentUUID": "181f60e0-44c4-41e5-aecf-7150687a9d09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "af51c1d9-768c-4a54-a1a9-424484880cba",
                  "title": "scryptcost",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "00d0e612-adb0-43a0-8ca3-af3f8b90b53c",
                      "parentUUID": "af51c1d9-768c-4a54-a1a9-424484880cba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/range",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "4a02555b-10bd-450e-8a09-54602cefe3e1",
                      "parentUUID": "af51c1d9-768c-4a54-a1a9-424484880cba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptcost valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptcost: 12345\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 12345,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "3d2c1b23-fb88-4615-9f6f-22c17518830f",
                      "parentUUID": "af51c1d9-768c-4a54-a1a9-424484880cba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "00d0e612-adb0-43a0-8ca3-af3f8b90b53c",
                    "4a02555b-10bd-450e-8a09-54602cefe3e1",
                    "3d2c1b23-fb88-4615-9f6f-22c17518830f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9a44464d-5e01-4bad-a080-9e644210b8e9",
                  "title": "scryptblocksize",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "b7430c87-a158-43af-b3a9-0fa4ab78a4c2",
                      "parentUUID": "9a44464d-5e01-4bad-a080-9e644210b8e9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "3a0bc4aa-16e4-4782-ad32-66b0d0d6cc1e",
                      "parentUUID": "9a44464d-5e01-4bad-a080-9e644210b8e9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptblocksize valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptblocksize: 24\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 24,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "6e2ccb93-cf88-49a9-bd4e-8a7355ef0548",
                      "parentUUID": "9a44464d-5e01-4bad-a080-9e644210b8e9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b7430c87-a158-43af-b3a9-0fa4ab78a4c2",
                    "3a0bc4aa-16e4-4782-ad32-66b0d0d6cc1e",
                    "6e2ccb93-cf88-49a9-bd4e-8a7355ef0548"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e3cc964e-9401-40bb-8963-65ba4a6c5100",
                  "title": "scryptparallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "f08c5b92-fef3-4498-8978-80dd503ae4d5",
                      "parentUUID": "e3cc964e-9401-40bb-8963-65ba4a6c5100",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "3c495676-c466-483d-aeb9-c232aee95e3d",
                      "parentUUID": "e3cc964e-9401-40bb-8963-65ba4a6c5100",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptparallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptparallelism: 2\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "19a00928-803e-49a4-85c9-52c48c7e88f0",
                      "parentUUID": "e3cc964e-9401-40bb-8963-65ba4a6c5100",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f08c5b92-fef3-4498-8978-80dd503ae4d5",
                    "3c495676-c466-483d-aeb9-c232aee95e3d",
                    "19a00928-803e-49a4-85c9-52c48c7e88f0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "7f0aca8a-2fcf-4c06-942b-70f56ea6ff79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d0c12927-2d57-4b50-be58-58a804b3bfe9",
              "title": "argon2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf argon2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "dc78a497-b90d-45b6-b157-757291695b1e",
                  "parentUUID": "d0c12927-2d57-4b50-be58-58a804b3bfe9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/type",
                  "fullTitle": "setup/kdf argon2 kdf/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 123\n  })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "0763b3e3-e4dc-436b-ac88-0e10eabf4d17",
                  "parentUUID": "d0c12927-2d57-4b50-be58-58a804b3bfe9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/range",
                  "fullTitle": "setup/kdf argon2 kdf/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'foo'\n  })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "4f9652e4-4cab-4d5f-ad20-77835fbf20d9",
                  "parentUUID": "d0c12927-2d57-4b50-be58-58a804b3bfe9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "539e4dc5-7b4f-4ac6-9af1-9ba8ec5fd496",
                  "title": "argon2time",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "cf82cf4b-a6e8-4108-bb2f-9c4a51c1dab0",
                      "parentUUID": "539e4dc5-7b4f-4ac6-9af1-9ba8ec5fd496",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "d2349294-0d04-4ecd-8df7-221fa2a23c1f",
                      "parentUUID": "539e4dc5-7b4f-4ac6-9af1-9ba8ec5fd496",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2time valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2d',\n  argon2time: 10\n}).should.deep.equal({\n  type: 'argon2d',\n  params: {\n    rounds: 10,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "76865ae6-0c4f-4bee-afcb-f213b496623b",
                      "parentUUID": "539e4dc5-7b4f-4ac6-9af1-9ba8ec5fd496",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cf82cf4b-a6e8-4108-bb2f-9c4a51c1dab0",
                    "d2349294-0d04-4ecd-8df7-221fa2a23c1f",
                    "76865ae6-0c4f-4bee-afcb-f213b496623b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b5404ea4-5cc2-497f-ba43-53f2063c69e1",
                  "title": "argon2mem",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "09f6b18e-b1ab-4cc0-8384-1012fa396a37",
                      "parentUUID": "b5404ea4-5cc2-497f-ba43-53f2063c69e1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "700c4985-66a9-4e93-9423-34f75b4f0424",
                      "parentUUID": "b5404ea4-5cc2-497f-ba43-53f2063c69e1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2mem valid",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2i',\n  argon2mem: 12345\n}).should.deep.equal({\n  type: 'argon2i',\n  params: {\n    rounds: 2,\n    memory: 12345,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "1fdfedc6-a50e-4e08-9c1d-cbdc608407b7",
                      "parentUUID": "b5404ea4-5cc2-497f-ba43-53f2063c69e1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "09f6b18e-b1ab-4cc0-8384-1012fa396a37",
                    "700c4985-66a9-4e93-9423-34f75b4f0424",
                    "1fdfedc6-a50e-4e08-9c1d-cbdc608407b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f8677801-6198-4915-a4c5-6dc8b84bf3a4",
                  "title": "argon2parallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "9f91a10a-23d4-4bd0-9555-ec51cddda39a",
                      "parentUUID": "f8677801-6198-4915-a4c5-6dc8b84bf3a4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "ece5b39a-d973-4f7e-a27b-b1b63de901e4",
                      "parentUUID": "f8677801-6198-4915-a4c5-6dc8b84bf3a4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2parallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2id',\n  argon2parallelism: 2\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "75d906b7-b5b7-4634-ba66-f92e03137f48",
                      "parentUUID": "f8677801-6198-4915-a4c5-6dc8b84bf3a4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9f91a10a-23d4-4bd0-9555-ec51cddda39a",
                    "ece5b39a-d973-4f7e-a27b-b1b63de901e4",
                    "75d906b7-b5b7-4634-ba66-f92e03137f48"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "dc78a497-b90d-45b6-b157-757291695b1e",
                "0763b3e3-e4dc-436b-ac88-0e10eabf4d17",
                "4f9652e4-4cab-4d5f-ad20-77835fbf20d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c3aafbc3-1564-4b64-9c1a-fdd2821be777",
          "title": "setup/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "4fd87f1e-3059-4e68-aeab-61109f78f55f",
              "parentUUID": "c3aafbc3-1564-4b64-9c1a-fdd2821be777",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7231e548-4096-4607-8aff-057d4307e7a2",
              "title": "id",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "f05373ca-db1a-47a0-b3c6-f8908b60bee3",
                  "parentUUID": "7231e548-4096-4607-8aff-057d4307e7a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 'hello-world' })\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "6199b583-0052-430c-a2b1-6e4126218ef7",
                  "parentUUID": "7231e548-4096-4607-8aff-057d4307e7a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "84337afb-29cc-4b10-a30b-216d14869620",
                  "parentUUID": "7231e548-4096-4607-8aff-057d4307e7a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e230f963-be8b-4534-bb25-6d1300416c37",
                  "parentUUID": "7231e548-4096-4607-8aff-057d4307e7a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f05373ca-db1a-47a0-b3c6-f8908b60bee3",
                "6199b583-0052-430c-a2b1-6e4126218ef7",
                "84337afb-29cc-4b10-a30b-216d14869620",
                "e230f963-be8b-4534-bb25-6d1300416c37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5ed20862-c5e6-4553-9e83-f213ef4f4947",
              "title": "size",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key size default",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.size.should.equal(32)",
                  "err": {},
                  "uuid": "37056b31-c947-4080-b367-55910c3c26ec",
                  "parentUUID": "5ed20862-c5e6-4553-9e83-f213ef4f4947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key size valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 64 })\npolicy.size.should.equal(64)",
                  "err": {},
                  "uuid": "9a088ac2-1d0f-4752-b0f2-d32e1c91b692",
                  "parentUUID": "5ed20862-c5e6-4553-9e83-f213ef4f4947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key size invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0d98e328-1c52-45b1-9d78-392c9c01aa19",
                  "parentUUID": "5ed20862-c5e6-4553-9e83-f213ef4f4947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key size invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 0 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e76abbdf-1228-4c5f-9bcd-ca96dd396af5",
                  "parentUUID": "5ed20862-c5e6-4553-9e83-f213ef4f4947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37056b31-c947-4080-b367-55910c3c26ec",
                "9a088ac2-1d0f-4752-b0f2-d32e1c91b692",
                "0d98e328-1c52-45b1-9d78-392c9c01aa19",
                "e76abbdf-1228-4c5f-9bcd-ca96dd396af5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "74bcf66b-b955-40b0-bbc1-19f79f18a64e",
              "title": "threshold",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "36227816-210a-4303-a3c1-0e2026637957",
                  "parentUUID": "74bcf66b-b955-40b0-bbc1-19f79f18a64e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n], { threshold: 1 })\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "c435582b-6938-4d18-a859-15243a74f2a2",
                  "parentUUID": "74bcf66b-b955-40b0-bbc1-19f79f18a64e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "84d9d233-eed7-42f1-8027-e58e12e36207",
                  "parentUUID": "74bcf66b-b955-40b0-bbc1-19f79f18a64e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 0 }).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 2 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "20bf678a-59ce-44af-a30f-ba1d49337de7",
                  "parentUUID": "74bcf66b-b955-40b0-bbc1-19f79f18a64e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36227816-210a-4303-a3c1-0e2026637957",
                "c435582b-6938-4d18-a859-15243a74f2a2",
                "84d9d233-eed7-42f1-8027-e58e12e36207",
                "20bf678a-59ce-44af-a30f-ba1d49337de7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f9d19e2a-a092-470d-9bf0-c3f582fa05dc",
              "title": "salt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 48 })\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(48)",
                  "err": {},
                  "uuid": "f941bd56-02f7-44f8-a273-ebb9fe9dfb81",
                  "parentUUID": "f9d19e2a-a092-470d-9bf0-c3f582fa05dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: Buffer.from('12345678', 'base64') })\npolicy.salt.should.equal('12345678')",
                  "err": {},
                  "uuid": "2900c633-2415-4720-8803-658d38046e83",
                  "parentUUID": "f9d19e2a-a092-470d-9bf0-c3f582fa05dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "94f51abf-591e-41b1-96a9-0bbe1cde6465",
                  "parentUUID": "f9d19e2a-a092-470d-9bf0-c3f582fa05dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f941bd56-02f7-44f8-a273-ebb9fe9dfb81",
                "2900c633-2415-4720-8803-658d38046e83",
                "94f51abf-591e-41b1-96a9-0bbe1cde6465"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9e8779b2-4e06-468d-b19b-1e9bd0d989c8",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "16942b46-9a55-4573-8e82-71d948c05dfb",
                  "parentUUID": "9e8779b2-4e06-468d-b19b-1e9bd0d989c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password1' })\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "28d28f13-e5c8-42bf-9a52-f7b5679b9be4",
                  "parentUUID": "9e8779b2-4e06-468d-b19b-1e9bd0d989c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 12345,\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: 12345,\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: 12345\n  }\n]).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "898a76e0-f178-49d2-a60b-2be449f9e238",
                  "parentUUID": "9e8779b2-4e06-468d-b19b-1e9bd0d989c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: '',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ea905843-4f4a-426b-b66a-f8402422af52",
                  "parentUUID": "9e8779b2-4e06-468d-b19b-1e9bd0d989c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16942b46-9a55-4573-8e82-71d948c05dfb",
                "28d28f13-e5c8-42bf-9a52-f7b5679b9be4",
                "898a76e0-f178-49d2-a60b-2be449f9e238",
                "ea905843-4f4a-426b-b66a-f8402422af52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4fd87f1e-3059-4e68-aeab-61109f78f55f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}