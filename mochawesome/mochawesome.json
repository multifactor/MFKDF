{
  "stats": {
    "suites": 81,
    "tests": 323,
    "passes": 323,
    "pending": 0,
    "failures": 0,
    "start": "2022-06-10T22:17:52.903Z",
    "end": "2022-06-10T22:19:07.995Z",
    "duration": 75092,
    "testsRegistered": 323,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "18e96636-2fff-473b-ae47-67211a4c77d1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7dcb0e7-8731-424f-92b9-23c68c5eee76",
          "title": "asymmetric",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
          "file": "\\test\\crypto\\asymmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "148f708a-9d4b-43f6-8278-e63bc5603eab",
              "title": "encryption",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric encryption rsa1024",
                  "timedOut": false,
                  "duration": 286,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa1024')\nconst pt = await setup.decrypt(ct, 'rsa1024')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "1fed5024-393b-4ac2-a2a0-9121b32e360b",
                  "parentUUID": "148f708a-9d4b-43f6-8278-e63bc5603eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric encryption rsa2048",
                  "timedOut": false,
                  "duration": 2158,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa2048')\nconst pt = await setup.decrypt(ct, 'rsa2048')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "7f52f24e-55a0-4e9c-87bf-4a32c19adf40",
                  "parentUUID": "148f708a-9d4b-43f6-8278-e63bc5603eab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fed5024-393b-4ac2-a2a0-9121b32e360b",
                "7f52f24e-55a0-4e9c-87bf-4a32c19adf40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2444,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "71425b2a-00a1-4790-941c-127b7c50be66",
              "title": "signatures",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric signatures rsa1024",
                  "timedOut": false,
                  "duration": 364,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa1024')\nconst validity = await setup.verify('hello world', signature, 'rsa1024')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "4bb992a7-74d6-4801-88da-8ccb40414080",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric signatures rsa2048",
                  "timedOut": false,
                  "duration": 577,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa2048')\nconst validity = await setup.verify('hello world', signature, 'rsa2048')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "8cb595a3-0371-47da-9c18-9821ba8fe1d6",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa3072",
                  "fullTitle": "asymmetric signatures rsa3072",
                  "timedOut": false,
                  "duration": 1876,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa3072')\nconst validity = await setup.verify('hello world', signature, 'rsa3072')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "870a9520-6d9e-486c-8de8-6024c77bdb8e",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "defaults",
                  "fullTitle": "asymmetric signatures defaults",
                  "timedOut": false,
                  "duration": 10047,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world')\nconst validity = await setup.verify('hello world', signature)\nvalidity.should.be.true\nawait setup.getAsymmetricKeyPair()",
                  "err": {},
                  "uuid": "fc662a18-b498-40dd-99f2-8271da509fca",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ed25519",
                  "fullTitle": "asymmetric signatures ed25519",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nawait setup.getAsymmetricKeyPair('ed25519')",
                  "err": {},
                  "uuid": "df888dfd-40f0-4269-abc6-0052f3a81cc8",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unknown",
                  "fullTitle": "asymmetric signatures unknown",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.getAsymmetricKeyPair('unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "d8257755-c3ff-4d50-b32d-e92f4fcf781b",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "errors",
                  "fullTitle": "asymmetric signatures errors",
                  "timedOut": false,
                  "duration": 3105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.sign(12345, 'rsa1024').should.be.rejectedWith(TypeError)\nconst signature = await setup.sign('hello world')\nsetup.verify(12345, signature).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4107e736-a5b0-4297-92c2-8762c3a93db9",
                  "parentUUID": "71425b2a-00a1-4790-941c-127b7c50be66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bb992a7-74d6-4801-88da-8ccb40414080",
                "8cb595a3-0371-47da-9c18-9821ba8fe1d6",
                "870a9520-6d9e-486c-8de8-6024c77bdb8e",
                "fc662a18-b498-40dd-99f2-8271da509fca",
                "df888dfd-40f0-4269-abc6-0052f3a81cc8",
                "d8257755-c3ff-4d50-b32d-e92f4fcf781b",
                "4107e736-a5b0-4297-92c2-8762c3a93db9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16191,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0274606f-adf9-4bfc-b380-20665804a2c0",
          "title": "encrypt",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "defaults",
              "fullTitle": "encrypt defaults",
              "timedOut": false,
              "duration": 246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext)\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "9c6649bc-1b61-44c4-8c02-8c1370203410",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-CBC",
              "fullTitle": "encrypt AES256-CBC",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "f1ea545f-45d7-473f-a0df-f85db1ed8e04",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-CBC",
              "fullTitle": "encrypt AES192-CBC",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "4d2cc115-8ce1-4be5-9581-0e396fb8dfcb",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-CBC",
              "fullTitle": "encrypt AES128-CBC",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "df2f883d-5d5c-4e7f-a437-eb6b0ecf57c3",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-CBC",
              "fullTitle": "encrypt 3DES-CBC",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "9f4f9e17-fe85-433d-8ff4-c6834669d9e9",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-CBC",
              "fullTitle": "encrypt DES-CBC",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "95468b8e-af50-40f1-a40e-2d084661176b",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-ECB",
              "fullTitle": "encrypt AES256-ECB",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "8b44d80e-d572-435f-9ef8-4f6ca75b6250",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-ECB",
              "fullTitle": "encrypt AES192-ECB",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "22eb0bef-0a20-448c-aa12-e35afccf8d41",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-ECB",
              "fullTitle": "encrypt AES128-ECB",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "c0b42b58-574d-441e-9803-71ae13ea604c",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-ECB",
              "fullTitle": "encrypt 3DES-ECB",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "136f2b6c-ab57-4ecf-9841-bd005dc0faf6",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-ECB",
              "fullTitle": "encrypt DES-ECB",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "b3e0bf99-6ff3-4e79-a0b3-12accd39a5e3",
              "parentUUID": "0274606f-adf9-4bfc-b380-20665804a2c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "35fcb784-3727-447a-96f4-7f26d684832b",
              "title": "utils",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSubkey(32, 'AES256', 'sha256')\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey(32, '', 'sha512')\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "d53fba8e-f487-4247-bffd-7f052c95981a",
                  "parentUUID": "35fcb784-3727-447a-96f4-7f26d684832b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "symmetric key",
                  "fullTitle": "encrypt utils symmetric key",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSymmetricKey()\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))",
                  "err": {},
                  "uuid": "833f5b8e-7027-4b02-ae03-261a94a41530",
                  "parentUUID": "35fcb784-3727-447a-96f4-7f26d684832b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d53fba8e-f487-4247-bffd-7f052c95981a",
                "833f5b8e-7027-4b02-ae03-261a94a41530"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1e928341-9d4b-4add-b038-d4fe6147302c",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid key",
                  "fullTitle": "encrypt errors invalid key",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt('hello world', 'unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "4a30348d-b0ee-413c-ae0a-a399c860ffad",
                  "parentUUID": "1e928341-9d4b-4add-b038-d4fe6147302c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid message",
                  "fullTitle": "encrypt errors invalid message",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c6db254e-894d-46af-862a-e2ae3b46332b",
                  "parentUUID": "1e928341-9d4b-4add-b038-d4fe6147302c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid ciphertext",
                  "fullTitle": "encrypt errors invalid ciphertext",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.decrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8aa418e7-64be-48c1-a93c-f2dbe6ff62c9",
                  "parentUUID": "1e928341-9d4b-4add-b038-d4fe6147302c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a30348d-b0ee-413c-ae0a-a399c860ffad",
                "c6db254e-894d-46af-862a-e2ae3b46332b",
                "8aa418e7-64be-48c1-a93c-f2dbe6ff62c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 317,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9c6649bc-1b61-44c4-8c02-8c1370203410",
            "f1ea545f-45d7-473f-a0df-f85db1ed8e04",
            "4d2cc115-8ce1-4be5-9581-0e396fb8dfcb",
            "df2f883d-5d5c-4e7f-a437-eb6b0ecf57c3",
            "9f4f9e17-fe85-433d-8ff4-c6834669d9e9",
            "95468b8e-af50-40f1-a40e-2d084661176b",
            "8b44d80e-d572-435f-9ef8-4f6ca75b6250",
            "22eb0bef-0a20-448c-aa12-e35afccf8d41",
            "c0b42b58-574d-441e-9803-71ae13ea604c",
            "136f2b6c-ab57-4ecf-9841-bd005dc0faf6",
            "b3e0bf99-6ff3-4e79-a0b3-12accd39a5e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2476,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fa0643f7-b524-4db9-9f55-1ffe0ca69a3b",
          "title": "derive/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "09ddb516-c66d-4a7c-9eb6-164962b207fe",
              "parentUUID": "fa0643f7-b524-4db9-9f55-1ffe0ca69a3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c40aaedb-d56e-46b5-a39e-46db3cc55d6a",
              "parentUUID": "fa0643f7-b524-4db9-9f55-1ffe0ca69a3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09ddb516-c66d-4a7c-9eb6-164962b207fe",
            "c40aaedb-d56e-46b5-a39e-46db3cc55d6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "40c5dde2-cc82-493c-858e-7385dd1cd39f",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "129bd3f7-badc-4d00-9cef-99b08b62556b",
              "parentUUID": "40c5dde2-cc82-493c-858e-7385dd1cd39f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "d6c64166-50f9-43c5-b1af-fcf84c6a1cc1",
              "parentUUID": "40c5dde2-cc82-493c-858e-7385dd1cd39f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "129bd3f7-badc-4d00-9cef-99b08b62556b",
            "d6c64166-50f9-43c5-b1af-fcf84c6a1cc1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ba518c9d-702f-4f91-9ff0-9f994aaf31bf",
          "title": "derive/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 577,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "6cc8e9f2-0022-41b6-b0e6-6abe312229ab",
              "parentUUID": "ba518c9d-702f-4f91-9ff0-9f994aaf31bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('wrongpassword2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('wrongpassword2'),\n  password3: mfkdf.derive.factors.password('wrongpassword3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password2')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "b2fa9c79-67e5-42a2-8f90-b9c50de42ad0",
              "parentUUID": "ba518c9d-702f-4f91-9ff0-9f994aaf31bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nmfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n}).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "5af9e6ce-6b73-4544-be6c-2ad3d05279b5",
              "parentUUID": "ba518c9d-702f-4f91-9ff0-9f994aaf31bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1de0d6b5-f223-4266-a9c5-7e620cc966de",
              "title": "shares",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 450,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "117f14e8-98d7-484f-8e64-9cf8c33e1097",
                  "parentUUID": "1de0d6b5-f223-4266-a9c5-7e620cc966de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "117f14e8-98d7-484f-8e64-9cf8c33e1097"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 450,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ce669f6c-f990-431a-bc54-5491c85a8d91",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a198951d-a316-4b5b-90ac-142136ab7525",
                  "parentUUID": "ce669f6c-f990-431a-bc54-5491c85a8d91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "39f4b22f-d368-4233-b3e4-f89bd18f0f29",
                  "parentUUID": "ce669f6c-f990-431a-bc54-5491c85a8d91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a198951d-a316-4b5b-90ac-142136ab7525",
                "39f4b22f-d368-4233-b3e4-f89bd18f0f29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 235,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "6cc8e9f2-0022-41b6-b0e6-6abe312229ab",
            "b2fa9c79-67e5-42a2-8f90-b9c50de42ad0",
            "5af9e6ce-6b73-4544-be6c-2ad3d05279b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1266,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ee213a0e-aafa-4bb3-adf7-73c365438b28",
          "title": "examples",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "kdf",
              "fullTitle": "examples kdf",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup kdf configuration\nconst config = await mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000,\n  pbkdf2digest: 'sha256'\n}) // -> { type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } }\n// derive key\nconst key = await mfkdf.kdf('password', 'salt', 8, config)\nkey.toString('hex') // -> 0394a2ede332c9a1\nconfig.should.deep.equal({ type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } })\nkey.toString('hex').should.equal('0394a2ede332c9a1')",
              "err": {},
              "uuid": "aa720cf4-dba0-4f36-8438-f1cf576b4950",
              "parentUUID": "ee213a0e-aafa-4bb3-adf7-73c365438b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "816e10a2-1b31-4ff1-a310-674b34a5effc",
              "parentUUID": "ee213a0e-aafa-4bb3-adf7-73c365438b28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "a4e54de2-9826-41e2-93c9-74afea341a11",
              "parentUUID": "ee213a0e-aafa-4bb3-adf7-73c365438b28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "26b578b1-e942-4db2-bcde-180848a4d4b2",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n], { size: 8 })\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response = crypto.createHmac('sha1', secret).update(challenge).digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "538b98af-d835-4626-ab22-0b2e44c5966e",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 1099,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n], { size: 8 })\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0c94d390-5fe6-4e75-90b8-8053f0f2fb8f",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') })\n], { size: 8 })\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0037cd1a-af79-4364-abbc-6acc597622f0",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 8 })\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0f965b73-e8fe-40a7-859e-233f17ad1065",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "question",
                  "fullTitle": "examples factors question",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with security question factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido')\n], { size: 8 })\n// derive key with security question factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Fido')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f4532ce3-c3b4-4250-a5d4-7c966d9afd4f",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ooba",
                  "fullTitle": "examples factors ooba",
                  "timedOut": false,
                  "duration": 242,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup RSA key pair (on out-of-band server)\nconst keyPair = await crypto.webcrypto.subtle.generateKey({ hash: 'SHA-256', modulusLength: 2048, name: 'RSA-OAEP', publicExponent: new Uint8Array([1, 0, 1]) }, true, ['encrypt', 'decrypt'])\n// setup key with out-of-band authentication factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey, params: { email: 'test@mfkdf.com' }\n  })\n])\n// decrypt and send code (on out-of-band server)\nconst next = setup.policy.factors[0].params.next\nconst decrypted = await crypto.webcrypto.subtle.decrypt({ name: 'RSA-OAEP' }, keyPair.privateKey, Buffer.from(next, 'hex'))\nconst code = JSON.parse(Buffer.from(decrypted).toString()).code\n// derive key with out-of-band factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "8769ac1a-cbac-4a5a-a785-cf4aa81a0fb9",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n], { size: 8 })\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "9dc57918-1f06-42f9-90b0-2e9a9850f501",
                  "parentUUID": "3c3383c7-0f37-4a8f-b367-9884d3d9a16b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26b578b1-e942-4db2-bcde-180848a4d4b2",
                "538b98af-d835-4626-ab22-0b2e44c5966e",
                "0c94d390-5fe6-4e75-90b8-8053f0f2fb8f",
                "0037cd1a-af79-4364-abbc-6acc597622f0",
                "0f965b73-e8fe-40a7-859e-233f17ad1065",
                "f4532ce3-c3b4-4250-a5d4-7c966d9afd4f",
                "8769ac1a-cbac-4a5a-a785-cf4aa81a0fb9",
                "9dc57918-1f06-42f9-90b0-2e9a9850f501"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2644,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7ec30b15-1a23-4a0c-b10c-acffab993d13",
              "title": "secrets",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(Buffer.from('hello world'), 2, 3) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "d8b8c0ed-cb49-46db-8cb6-6460e32331cc",
                  "parentUUID": "7ec30b15-1a23-4a0c-b10c-acffab993d13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8b8c0ed-cb49-46db-8cb6-6460e32331cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
              "title": "policy",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "4d7a1fdb-1e13-41a2-bf9a-7bf142c73a25",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "a55cee36-aeba-46c4-a33e-74fa6eeb5ec0",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, ['passwordA', 'passwordC']) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, ['passwordB', 'passwordC']) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "dd878da6-e080-407a-a3ea-1c648064d1a7",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 232,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  ), { size: 8 }\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "76af3305-7dab-40cc-89d9-4d44c14cbad8",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "2459ee46-5121-47ca-b91c-7ace5c832e06",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0f07e067-9ac0-47e9-aca9-fecfe31ecbf4",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d8e315d5-ae55-411e-a4f4-de22b28ec9a4",
                  "parentUUID": "eb59e2d4-159a-4ed0-8272-a10c76dd43bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d7a1fdb-1e13-41a2-bf9a-7bf142c73a25",
                "a55cee36-aeba-46c4-a33e-74fa6eeb5ec0",
                "dd878da6-e080-407a-a3ea-1c648064d1a7",
                "76af3305-7dab-40cc-89d9-4d44c14cbad8",
                "2459ee46-5121-47ca-b91c-7ace5c832e06",
                "0f07e067-9ac0-47e9-aca9-fecfe31ecbf4",
                "d8e315d5-ae55-411e-a4f4-de22b28ec9a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1216,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
              "title": "reconstitution",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "9f05050f-2d02-42e7-ae79-c0275f752871",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "63d3eadf-06e6-499c-bf4b-d5804af61cae",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "0753b025-8886-4431-a5f7-96ed007b259f",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac907c20-62e4-4f95-9575-256af48ead52",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "95a99879-ece0-47bf-b255-f19b3c3c4dd1",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "994de056-8a4d-4f98-bc13-deb856deded0",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ba849714-44a7-48f9-bc62-f056232714ec",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3818ebbd-5e7b-4502-87eb-75a5e9c04214",
                  "parentUUID": "b51f82e1-3763-488e-a1d7-87f1d160b3de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f05050f-2d02-42e7-ae79-c0275f752871",
                "63d3eadf-06e6-499c-bf4b-d5804af61cae",
                "0753b025-8886-4431-a5f7-96ed007b259f",
                "ac907c20-62e4-4f95-9575-256af48ead52",
                "95a99879-ece0-47bf-b255-f19b3c3c4dd1",
                "994de056-8a4d-4f98-bc13-deb856deded0",
                "ba849714-44a7-48f9-bc62-f056232714ec",
                "3818ebbd-5e7b-4502-87eb-75a5e9c04214"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1738,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "32f3bfce-033b-4da3-b6b2-a510206a3106",
              "title": "persistence",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "987e56b3-8e3d-4e10-a715-8e5566a4eaf2",
                  "parentUUID": "32f3bfce-033b-4da3-b6b2-a510206a3106",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "987e56b3-8e3d-4e10-a715-8e5566a4eaf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 215,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2b80badd-ca14-4746-b7ed-1a7dc708a460",
              "title": "envelope",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add/get secret",
                  "fullTitle": "examples envelope add/get secret",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "32ea78dd-84d3-438d-ac18-72f9b28c0164",
                  "parentUUID": "2b80badd-ca14-4746-b7ed-1a7dc708a460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/check/remove secret",
                  "fullTitle": "examples envelope add/check/remove secret",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// check secret\nconst check1 = derived.hasEnvelopedSecret('mySecret') // -> true\n// remove secret\nderived.removeEnvelopedSecret('mySecret')\n// check secret\nconst check2 = derived.hasEnvelopedSecret('mySecret') // -> false\ncheck1.should.be.true\ncheck2.should.be.false",
                  "err": {},
                  "uuid": "7473e197-1b6c-42f7-b92f-d46005b425f9",
                  "parentUUID": "2b80badd-ca14-4746-b7ed-1a7dc708a460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/get key",
                  "fullTitle": "examples envelope add/get key",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
                  "err": {},
                  "uuid": "4bc0ee26-c6a0-4123-b53f-e3b7922312bf",
                  "parentUUID": "2b80badd-ca14-4746-b7ed-1a7dc708a460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32ea78dd-84d3-438d-ac18-72f9b28c0164",
                "7473e197-1b6c-42f7-b92f-d46005b425f9",
                "4bc0ee26-c6a0-4123-b53f-e3b7922312bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 661,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "04090f48-216a-43e3-b518-4a1bb281375b",
              "title": "crypto",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte sub-key for \"eth\" using hkdf/sha256\nconst subkey = await key.getSubkey(16, 'eth', 'sha256')\nsubkey.toString('hex') // -> 54ad9e5acbc1c33b08a15dd79126e9c9",
                  "err": {},
                  "uuid": "b7eb1eb2-5f93-4baa-a833-a612c2d27d0a",
                  "parentUUID": "04090f48-216a-43e3-b518-4a1bb281375b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getSymmetricKey",
                  "fullTitle": "examples crypto getSymmetricKey",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte AES128 sub-key\nconst subkey = await key.getSymmetricKey('aes128')\nsubkey.toString('hex') // -> c985454e008e5ecc695e865d339cb2be",
                  "err": {},
                  "uuid": "b37e2868-b56c-45a3-972a-c2e82e1fb6fa",
                  "parentUUID": "04090f48-216a-43e3-b518-4a1bb281375b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getAsymmetricKeyPair",
                  "fullTitle": "examples crypto getAsymmetricKeyPair",
                  "timedOut": false,
                  "duration": 206,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte RSA1024 sub-key\nconst subkey = await key.getAsymmetricKeyPair('rsa1024') // -> { privateKey: Uint8Array, publicKey: Uint8Array }\nsubkey.should.be.a('object')",
                  "err": {},
                  "uuid": "082c5ace-afe5-460c-92c6-3ce66ff89815",
                  "parentUUID": "04090f48-216a-43e3-b518-4a1bb281375b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sign/verify",
                  "fullTitle": "examples crypto sign/verify",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// sign message using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature using RSA-1024\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "e15f69a7-7df9-4e0a-9e7b-4a51cfc76e67",
                  "parentUUID": "04090f48-216a-43e3-b518-4a1bb281375b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "encrypt/decrypt",
                  "fullTitle": "examples crypto encrypt/decrypt",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// encrypt message using 3DES\nconst encrypted = await key.encrypt('hello world', '3des')\n// decrypt message using 3DES\nconst decrypted = await key.decrypt(encrypted, '3des')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "78bb0f98-9961-4f59-a916-1d3656683987",
                  "parentUUID": "04090f48-216a-43e3-b518-4a1bb281375b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7eb1eb2-5f93-4baa-a833-a612c2d27d0a",
                "b37e2868-b56c-45a3-972a-c2e82e1fb6fa",
                "082c5ace-afe5-460c-92c6-3ce66ff89815",
                "e15f69a7-7df9-4e0a-9e7b-4a51cfc76e67",
                "78bb0f98-9961-4f59-a916-1d3656683987"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 756,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "311258da-583e-4e3b-bc89-f530b96de4a2",
              "title": "auth",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "2d81aaa4-fa33-432c-aa9f-408391e67867",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 378,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "2b9f9bf9-71cd-47b6-9d8e-1f1a5a8253f7",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "395df9bf-d18a-4669-aef4-14301ac2a195",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "52fe4cff-3516-40ab-81bc-40e14e2faf82",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 336,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "9b526d4c-4d90-4f07-b4f4-6b110e95f192",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "38ce7803-3d5d-415e-8d6c-c526fd8bfafc",
                  "parentUUID": "311258da-583e-4e3b-bc89-f530b96de4a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d81aaa4-fa33-432c-aa9f-408391e67867",
                "2b9f9bf9-71cd-47b6-9d8e-1f1a5a8253f7",
                "395df9bf-d18a-4669-aef4-14301ac2a195",
                "52fe4cff-3516-40ab-81bc-40e14e2faf82",
                "9b526d4c-4d90-4f07-b4f4-6b110e95f192",
                "38ce7803-3d5d-415e-8d6c-c526fd8bfafc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "aa720cf4-dba0-4f36-8438-f1cf576b4950",
            "816e10a2-1b31-4ff1-a310-674b34a5effc",
            "a4e54de2-9826-41e2-93c9-74afea341a11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 256,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5de36e0a-0d21-43fe-8085-47c5f9ce2d75",
          "title": "site",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify((\n  await mfkdf.setup.key([\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n    await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n  ], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n).policy)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  recovery: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "15777ec9-a96a-43ae-bf84-b3d963428fee",
              "parentUUID": "5de36e0a-0d21-43fe-8085-47c5f9ce2d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor((await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])).entropyBits.real).should.equal(16)\nMath.floor((await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.hmacsha1()\n])).entropyBits.real).should.equal(196)",
              "err": {},
              "uuid": "6d9615cf-6c48-46ca-9d44-1d919978f8c5",
              "parentUUID": "5de36e0a-0d21-43fe-8085-47c5f9ce2d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 726,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "847b6361-1e77-4368-89d5-2dd0bc1b9201",
              "parentUUID": "5de36e0a-0d21-43fe-8085-47c5f9ce2d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify((\n  await mfkdf.setup.key([\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n  ], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n).policy)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  recoveryCode: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "8bf4288e-2521-4d00-a202-ff3935ac0910",
              "parentUUID": "5de36e0a-0d21-43fe-8085-47c5f9ce2d75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15777ec9-a96a-43ae-bf84-b3d963428fee",
            "6d9615cf-6c48-46ca-9d44-1d919978f8c5",
            "847b6361-1e77-4368-89d5-2dd0bc1b9201",
            "8bf4288e-2521-4d00-a202-ff3935ac0910"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 960,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
          "title": "tutorials",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Auth",
              "fullTitle": "tutorials Auth",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f0b9c245-1daa-4e74-bc30-b2f79b18178d",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloepd Key",
              "fullTitle": "tutorials Enveloepd Key",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
              "err": {},
              "uuid": "bfe48259-4ea1-43e0-997a-ae170aa68ab0",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloped Secret",
              "fullTitle": "tutorials Enveloped Secret",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
              "err": {},
              "uuid": "9149d25a-0945-40a9-8b82-e16914feb2ab",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "4e5c9a05-ebb6-47d9-b4d7-7a47f91d087b",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signing & Verification",
              "fullTitle": "tutorials Signing & Verification",
              "timedOut": false,
              "duration": 291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// sign message with derived key using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
              "err": {},
              "uuid": "33ce5791-8a90-40fb-b64c-bc12a423fc5e",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Encryption & Decryption",
              "fullTitle": "tutorials Encryption & Decryption",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// encrypt secret with derived key using AES-256\nconst encrypted = await key.encrypt('hello world', 'aes256')\n// ... later, decrypt secret with derived key\nconst decrypted = await key.decrypt(encrypted, 'aes256')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
              "err": {},
              "uuid": "568142e1-85a2-4b40-8db1-b4331c89fc49",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// reconstitute key to change password\nawait setup.recoverFactor(await mfkdf.setup.factors.password('newPassword'))\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771",
              "err": {},
              "uuid": "fae3e93a-f452-4310-a8d8-44f9a63364a2",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\nsetup.key.toString('hex') // -> 01d0c7236adf2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "cdc07a8b-8eaa-47c5-aec4-98f4bb7b9487",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "c5add639-dcde-47fa-9539-76d0530f330c",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16, threshold: 2 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "4aa88737-203f-4746-ae89-8432b4814a82",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n], { size: 32 })\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n], { size: 32 })\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n], { size: 32 })\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32 })\nconst threshold = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32, threshold: 2 })\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "c4969c62-55d1-4ea7-b076-2c9f21d6b0f3",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "6c5a39cc-18a7-4db2-b017-2c5a8ed677b9",
              "parentUUID": "2a96fc05-9ec1-46d6-91a2-bf949acd0467",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0b9c245-1daa-4e74-bc30-b2f79b18178d",
            "bfe48259-4ea1-43e0-997a-ae170aa68ab0",
            "9149d25a-0945-40a9-8b82-e16914feb2ab",
            "4e5c9a05-ebb6-47d9-b4d7-7a47f91d087b",
            "33ce5791-8a90-40fb-b64c-bc12a423fc5e",
            "568142e1-85a2-4b40-8db1-b4331c89fc49",
            "fae3e93a-f452-4310-a8d8-44f9a63364a2",
            "cdc07a8b-8eaa-47c5-aec4-98f4bb7b9487",
            "c5add639-dcde-47fa-9539-76d0530f330c",
            "4aa88737-203f-4746-ae89-8432b4814a82",
            "c4969c62-55d1-4ea7-b076-2c9f21d6b0f3",
            "6c5a39cc-18a7-4db2-b017-2c5a8ed677b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2841,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b85a2c6d-9349-4837-8b84-f09ff2c10a50",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key)\n  .update(challenge)\n  .digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "aef4d66a-c84b-40ce-9b36-fc5f6dc6dd7a",
              "parentUUID": "b85a2c6d-9349-4837-8b84-f09ff2c10a50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response1 = crypto.createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(derive1.policy.factors[0].params.challenge, 'hex')\nconst response2 = crypto.createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "2c3d2122-42e7-4c8a-ab7e-f4d2f3c70fc0",
              "parentUUID": "b85a2c6d-9349-4837-8b84-f09ff2c10a50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = '{\"$schema\":\"https://mfkdf.com/schema/v1.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"kdf\":{\"type\":\"argon2id\",\"params\":{\"rounds\":2,\"memory\":24576,\"parallelism\":1}},\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"f8d33204be0436f2629d5173e9bd3fc1953cf982\"}}]}'\nconst derive = await mfkdf.derive.key(JSON.parse(setup), {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex'))\n})\nderive.key.toString('hex').should.equal('ca76d2b456be4e40ba6ef65a68fbfc71bf27a0ca3e0fa4481a2ddf29fb6b65d9')",
              "err": {},
              "uuid": "1c1fd287-b253-4cc3-a4a5-e5f0059da1f8",
              "parentUUID": "b85a2c6d-9349-4837-8b84-f09ff2c10a50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "48f0527d-d475-42fd-841f-051f599ce100",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7629f113-d41c-4c28-a2a1-f54b83e11878",
                  "parentUUID": "48f0527d-d475-42fd-841f-051f599ce100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0edcc555-afb4-4acf-9b65-c33cdd04ed25",
                  "parentUUID": "48f0527d-d475-42fd-841f-051f599ce100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "6e255e16-365c-4869-a577-5b6647347607",
                  "parentUUID": "48f0527d-d475-42fd-841f-051f599ce100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: Buffer.from('12345') }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8603d7dd-0f5d-400a-8077-2aff263411c1",
                  "parentUUID": "48f0527d-d475-42fd-841f-051f599ce100",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "cb6891c4-e267-4605-8950-e4b2cd02b55b",
                  "parentUUID": "48f0527d-d475-42fd-841f-051f599ce100",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7629f113-d41c-4c28-a2a1-f54b83e11878",
                "0edcc555-afb4-4acf-9b65-c33cdd04ed25",
                "6e255e16-365c-4869-a577-5b6647347607",
                "8603d7dd-0f5d-400a-8077-2aff263411c1",
                "cb6891c4-e267-4605-8950-e4b2cd02b55b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "aef4d66a-c84b-40ce-9b36-fc5f6dc6dd7a",
            "2c3d2122-42e7-4c8a-ab7e-f4d2f3c70fc0",
            "1c1fd287-b253-4cc3-a4a5-e5f0059da1f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 436,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7bb3b1ff-0018-4ce0-8a9d-5c64291fcbec",
          "title": "factors/hotp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('hello world')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(891649)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(795484)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "4f2b653e-7ef2-4938-a8b9-b17063dad51e",
              "parentUUID": "7bb3b1ff-0018-4ce0-8a9d-5c64291fcbec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp()\n])",
              "err": {},
              "uuid": "8083ef8b-aed1-4bfc-8b0c-1829184a0726",
              "parentUUID": "7bb3b1ff-0018-4ce0-8a9d-5c64291fcbec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d0e02e57-327c-4717-b980-af750bc036c8",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "d4b5aff9-94d6-4a94-b8fd-4aa1b71d2384",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b1207477-3c48-4233-8765-1b7dd322a4a5",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c9d591e0-eecb-44ea-affb-f6a88a8d6b25",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a0f4b1ac-1c5c-4c5d-ba7f-d67485f90655",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "547a9e00-5875-4a68-9b3e-7447a097d8d2",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "37d84784-fdaf-4d88-bcac-1c37b7c8867a",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "0d90d445-0950-49db-86e2-5b253fa69a3f",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "cc845cf7-167f-405c-8014-066ed1d99961",
                  "parentUUID": "d0e02e57-327c-4717-b980-af750bc036c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4b5aff9-94d6-4a94-b8fd-4aa1b71d2384",
                "b1207477-3c48-4233-8765-1b7dd322a4a5",
                "c9d591e0-eecb-44ea-affb-f6a88a8d6b25",
                "a0f4b1ac-1c5c-4c5d-ba7f-d67485f90655",
                "547a9e00-5875-4a68-9b3e-7447a097d8d2",
                "37d84784-fdaf-4d88-bcac-1c37b7c8867a",
                "0d90d445-0950-49db-86e2-5b253fa69a3f",
                "cc845cf7-167f-405c-8014-066ed1d99961"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "4f2b653e-7ef2-4938-a8b9-b17063dad51e",
            "8083ef8b-aed1-4bfc-8b0c-1829184a0726"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 542,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "211d674e-af87-457e-88d6-797389b8f001",
          "title": "factors/ooba",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\ooba.js",
          "file": "\\test\\factors\\ooba.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "full",
              "fullTitle": "factors/ooba full",
              "timedOut": false,
              "duration": 463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  { hash: 'SHA-256', modulusLength: 2048, name: 'RSA-OAEP', publicExponent: new Uint8Array([1, 0, 1]) },\n  true,\n  ['encrypt', 'decrypt']\n)\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.ooba({\n    key: keyPair.publicKey,\n    params: {\n      email: 'test@mfkdf.com'\n    }\n  })\n])\nlet next = setup.policy.factors[0].params.next\nlet decrypted = await crypto.webcrypto.subtle.decrypt({ name: 'RSA-OAEP' }, keyPair.privateKey, Buffer.from(next, 'hex'))\nlet json = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\nlet code = json.code\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  ooba: mfkdf.derive.factors.ooba(code)\n})\nnext = derive1.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt({ name: 'RSA-OAEP' }, keyPair.privateKey, Buffer.from(next, 'hex'))\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toLowerCase())\n})\nnext = derive2.policy.factors[0].params.next\ndecrypted = await crypto.webcrypto.subtle.decrypt({ name: 'RSA-OAEP' }, keyPair.privateKey, Buffer.from(next, 'hex'))\njson = JSON.parse(Buffer.from(decrypted).toString())\njson.email.should.equal('test@mfkdf.com')\ncode = json.code\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  ooba: mfkdf.derive.factors.ooba(code.toUpperCase())\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "69783123-d9cd-48ae-807a-ea20027358f7",
              "parentUUID": "211d674e-af87-457e-88d6-797389b8f001",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e8604877-d29c-4934-929a-739f7c567018",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\ooba.js",
              "file": "\\test\\factors\\ooba.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/ooba errors derive",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.ooba(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "63f7a8dd-f159-4f27-be26-953546cb5ee6",
                  "parentUUID": "e8604877-d29c-4934-929a-739f7c567018",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/ooba errors setup",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const keyPair = await crypto.webcrypto.subtle.generateKey(\n  { hash: 'SHA-256', modulusLength: 2048, name: 'RSA-OAEP', publicExponent: new Uint8Array([1, 0, 1]) },\n  true,\n  ['encrypt', 'decrypt']\n)\nmfkdf.setup.factors.ooba({\n  id: 12345\n}).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.ooba({\n  id: ''\n}).should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.ooba({\n  length: 'foo'\n}).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.ooba({\n  length: 0\n}).should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.ooba({\n  length: 100\n}).should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.ooba({\n  key: '12345'\n}).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.ooba({\n  key: keyPair.publicKey,\n  params: '12345'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b812079e-aa87-454b-9f2d-d66e1a316370",
                  "parentUUID": "e8604877-d29c-4934-929a-739f7c567018",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63f7a8dd-f159-4f27-be26-953546cb5ee6",
                "b812079e-aa87-454b-9f2d-d66e1a316370"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "69783123-d9cd-48ae-807a-ea20027358f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 463,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aa4f88eb-91a5-45c1-914c-c29075e5d10f",
          "title": "persistence",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "9afefeed-a808-4a11-983b-e05d3e17b21e",
              "parentUUID": "aa4f88eb-91a5-45c1-914c-c29075e5d10f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "fbf7e377-8434-437d-8689-df76b647d502",
              "parentUUID": "aa4f88eb-91a5-45c1-914c-c29075e5d10f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9afefeed-a808-4a11-983b-e05d3e17b21e",
            "fbf7e377-8434-437d-8689-df76b647d502"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e551bccf-1044-4a1f-9af0-faccb217c93d",
          "title": "factors/question",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\question.js",
          "file": "\\test\\factors\\question.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/question valid",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question(' Fido-', { question: 'What is the name of your first pet?' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('-f_i%d#o ? ')\n})\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive.policy))",
              "err": {},
              "uuid": "38815127-2537-4c7f-9822-41e3aa4c36e5",
              "parentUUID": "e551bccf-1044-4a1f-9af0-faccb217c93d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/question invalid",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.question('Fido', { question: 'What is the name of your first pet?' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  question: mfkdf.derive.factors.question('Rex')\n})\nsetup.key.toString('hex').should.not.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "3adb2893-cf39-4a93-8c2a-a36e2b487e3b",
              "parentUUID": "e551bccf-1044-4a1f-9af0-faccb217c93d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "58738da4-7932-4b9f-b92a-1f79238a231a",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\question.js",
              "file": "\\test\\factors\\question.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "derive",
                  "fullTitle": "factors/question errors derive",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.question(123)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.derive.factors.question('')\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "12b646c9-b039-46ac-9b43-795b3f480cda",
                  "parentUUID": "58738da4-7932-4b9f-b92a-1f79238a231a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup",
                  "fullTitle": "factors/question errors setup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.question(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.question('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.question('hello', { id: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.question('hello', { id: '' }).should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.question('hello', { question: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e6c0e1bb-6e77-4ce0-beb4-7d73a07abc9b",
                  "parentUUID": "58738da4-7932-4b9f-b92a-1f79238a231a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12b646c9-b039-46ac-9b43-795b3f480cda",
                "e6c0e1bb-6e77-4ce0-beb4-7d73a07abc9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "38815127-2537-4c7f-9822-41e3aa4c36e5",
            "3adb2893-cf39-4a93-8c2a-a36e2b487e3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 434,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9577eb37-6ed3-44d4-9100-25821a32ccce",
          "title": "factors/stack",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "f11a7eec-7b50-4125-b1f6-702f9695fb43",
              "parentUUID": "9577eb37-6ed3-44d4-9100-25821a32ccce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "c25f27f8-030c-4ee9-8d8e-33fd228eecf5",
              "parentUUID": "9577eb37-6ed3-44d4-9100-25821a32ccce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ], { id: 'stack1' }),\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ], { id: 'stack2' })\n], { threshold: 1 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "70b9fad3-fe3a-4449-bb7d-e14d5de59b63",
              "parentUUID": "9577eb37-6ed3-44d4-9100-25821a32ccce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f11a7eec-7b50-4125-b1f6-702f9695fb43",
            "c25f27f8-030c-4ee9-8d8e-33fd228eecf5",
            "70b9fad3-fe3a-4449-bb7d-e14d5de59b63"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "986486ae-64bb-4a55-a142-f746a7d320b5",
          "title": "factors/totp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 1093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])\nconst code = parseInt(speakeasy.totp({\n  secret: setup.outputs.totp.secret.toString('hex'),\n  encoding: 'hex',\n  step: setup.outputs.totp.period,\n  algorithm: setup.outputs.totp.algorithm,\n  digits: setup.outputs.totp.digits\n}))\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "e5013910-e73c-47f8-bcb0-bd21138f547d",
              "parentUUID": "986486ae-64bb-4a55-a142-f746a7d320b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 1092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(99922, { time: 1650430991083 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(398884, { time: 1650431018392 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "ca203f0b-fafb-4a68-9790-a6d62f0f0132",
              "parentUUID": "986486ae-64bb-4a55-a142-f746a7d320b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 722,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])",
              "err": {},
              "uuid": "620f035b-4e3f-4eb1-a902-4945ff38e005",
              "parentUUID": "986486ae-64bb-4a55-a142-f746a7d320b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6d256a9b-0b46-4424-a931-f272ed849248",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "77188e2c-8ef6-4a6a-8bda-79571b651684",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 723,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nmfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1750430943604 })\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "4ef8e737-8e53-4c65-9d83-78df2f442ad6",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "0c77917f-b2ff-4b8c-9b5b-b9264a267122",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "b4594e77-8e37-4a81-9597-ad3bba59335b",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "64c4e6a2-c73d-4453-a713-b1b28addbea9",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "91afc404-a1f8-4c23-8eb3-37ab8a3bbdf3",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "96184cb8-6bb2-4b0b-b969-07278e75ff64",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "caf29114-b26c-4901-bfa1-6444acec26ab",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "20fb9c6b-95e0-43e2-899a-ab8e8806573e",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f9f0d501-b090-416c-af69-1a51b474bfa0",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "74a3dd7c-528a-472c-abc0-06e6eb6b39bd",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2fef9258-52c4-4935-b045-f599faf3d63e",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "62473b9c-b500-4a20-ac1b-9affaf37a561",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "77799f29-a2b7-4843-a3da-631018e9b43a",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "36bc924e-9f43-45cc-89d5-05b3dfca3498",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4474c5fb-11ad-45f9-a684-2805abf5780c",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "894643c2-5c1f-4227-a4df-bb93610db399",
                  "parentUUID": "6d256a9b-0b46-4424-a931-f272ed849248",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77188e2c-8ef6-4a6a-8bda-79571b651684",
                "4ef8e737-8e53-4c65-9d83-78df2f442ad6",
                "0c77917f-b2ff-4b8c-9b5b-b9264a267122",
                "b4594e77-8e37-4a81-9597-ad3bba59335b",
                "64c4e6a2-c73d-4453-a713-b1b28addbea9",
                "91afc404-a1f8-4c23-8eb3-37ab8a3bbdf3",
                "96184cb8-6bb2-4b0b-b969-07278e75ff64",
                "caf29114-b26c-4901-bfa1-6444acec26ab",
                "20fb9c6b-95e0-43e2-899a-ab8e8806573e",
                "f9f0d501-b090-416c-af69-1a51b474bfa0",
                "74a3dd7c-528a-472c-abc0-06e6eb6b39bd",
                "2fef9258-52c4-4935-b045-f599faf3d63e",
                "62473b9c-b500-4a20-ac1b-9affaf37a561",
                "77799f29-a2b7-4843-a3da-631018e9b43a",
                "36bc924e-9f43-45cc-89d5-05b3dfca3498",
                "4474c5fb-11ad-45f9-a684-2805abf5780c",
                "894643c2-5c1f-4227-a4df-bb93610db399"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 727,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "e5013910-e73c-47f8-bcb0-bd21138f547d",
            "ca203f0b-fafb-4a68-9790-a6d62f0f0132",
            "620f035b-4e3f-4eb1-a902-4945ff38e005"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2907,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7a5b097e-5152-4d21-acca-734e43c1e490",
          "title": "factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "924e4195-ea48-4257-8e77-0f849215ee24",
              "parentUUID": "7a5b097e-5152-4d21-acca-734e43c1e490",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "4a7e539e-359b-4644-9ef6-db2a95d7e251",
              "parentUUID": "7a5b097e-5152-4d21-acca-734e43c1e490",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "924e4195-ea48-4257-8e77-0f849215ee24",
            "4a7e539e-359b-4644-9ef6-db2a95d7e251"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "43146e28-8a1d-41b7-8386-e3d3b1651128",
          "title": "authentication",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
          "file": "\\test\\features\\authentication.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getKey/auth",
              "fullTitle": "authentication getKey/auth",
              "timedOut": false,
              "duration": 14824,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nlet authKey\nlet encKey\nauthKey = await key.getSymmetricKey('des', true)\nencKey = await key.getSymmetricKey('des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('3des', true)\nencKey = await key.getSymmetricKey('3des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes128', true)\nencKey = await key.getSymmetricKey('aes128', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes192', true)\nencKey = await key.getSymmetricKey('aes192', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes256', true)\nencKey = await key.getSymmetricKey('aes256', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('ed25519', true)\nencKey = await key.getAsymmetricKeyPair('ed25519', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa1024', true)\nencKey = await key.getAsymmetricKeyPair('rsa1024', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa2048', true)\nencKey = await key.getAsymmetricKeyPair('rsa2048', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa3072', true)\nencKey = await key.getAsymmetricKeyPair('rsa3072', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))",
              "err": {},
              "uuid": "b03994dd-90c8-4995-a1cc-14808f9f96dc",
              "parentUUID": "43146e28-8a1d-41b7-8386-e3d3b1651128",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
              "title": "valid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "ae1e89f8-dbae-4cbc-9f97-95a4669381e5",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 373,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "a665f927-c509-4f26-af24-393baa446e02",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "5c3a0be8-cd3c-47f9-a6c8-fd9052d95773",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "33dad8e5-00f1-4a1d-9222-fa827db2a2c2",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 162,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "a07b6366-b92e-4845-89dc-af5f4c8e0ff9",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "e2b92136-739c-4bce-92fd-4b8cb149c09d",
                  "parentUUID": "a691a4a6-df99-4e0d-b70e-90ddb920b350",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae1e89f8-dbae-4cbc-9f97-95a4669381e5",
                "a665f927-c509-4f26-af24-393baa446e02",
                "5c3a0be8-cd3c-47f9-a6c8-fd9052d95773",
                "33dad8e5-00f1-4a1d-9222-fa827db2a2c2",
                "a07b6366-b92e-4845-89dc-af5f4c8e0ff9",
                "e2b92136-739c-4bce-92fd-4b8cb149c09d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 958,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c155038a-6b90-487c-bba1-55b146e39e6e",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 211,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "ec3f7ef1-5e7b-49c7-a0f0-095c1409ee4e",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 330,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "4b4158e3-c008-461a-a859-71d2298e9348",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "fa1421d4-07d7-4c72-81fe-b45a848dacd4",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "c9cfa482-9d6d-4ceb-bc65-0d45e9837b82",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 342,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "490f7f1e-feb6-4400-852a-8bef8938cf9a",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "87fbd945-2b0b-468a-bd0b-2cf78aad9323",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric/window",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "43f2df13-1c62-455a-9381-54d5a0ae33f8",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric/window",
                  "timedOut": false,
                  "duration": 209,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "bbd62571-44f8-42d6-ab1a-f63c4201e808",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF/window",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "0a7a0cc0-bedc-476d-8ec5-e09303a9969a",
                  "parentUUID": "c155038a-6b90-487c-bba1-55b146e39e6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec3f7ef1-5e7b-49c7-a0f0-095c1409ee4e",
                "4b4158e3-c008-461a-a859-71d2298e9348",
                "fa1421d4-07d7-4c72-81fe-b45a848dacd4",
                "c9cfa482-9d6d-4ceb-bc65-0d45e9837b82",
                "490f7f1e-feb6-4400-852a-8bef8938cf9a",
                "87fbd945-2b0b-468a-bd0b-2cf78aad9323",
                "43f2df13-1c62-455a-9381-54d5a0ae33f8",
                "bbd62571-44f8-42d6-ab1a-f63c4201e808",
                "0a7a0cc0-bedc-476d-8ec5-e09303a9969a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1934,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "b03994dd-90c8-4995-a1cc-14808f9f96dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14824,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "170aa36a-47e9-4681-9368-013e5d601a13",
          "title": "entropy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "46d8025d-a4f0-4b4d-b2c9-8057cea0d262",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "fbf14747-502d-4fbc-85be-c40d2bb50c45",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "b8cff9e2-9383-4abd-9841-7fb77bf2e5fc",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "25b73b48-41f9-4cdd-b47b-38aeda2bc4e1",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "8cd8457f-7f1b-4a24-b7e5-d5e504b60e28",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "b7ff7968-566c-4ee8-abf4-c18ba3a8e05d",
              "parentUUID": "170aa36a-47e9-4681-9368-013e5d601a13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46d8025d-a4f0-4b4d-b2c9-8057cea0d262",
            "fbf14747-502d-4fbc-85be-c40d2bb50c45",
            "b8cff9e2-9383-4abd-9841-7fb77bf2e5fc",
            "25b73b48-41f9-4cdd-b47b-38aeda2bc4e1",
            "8cd8457f-7f1b-4a24-b7e5-d5e504b60e28",
            "b7ff7968-566c-4ee8-abf4-c18ba3a8e05d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1911,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c4238791-b709-4e17-9c46-a7cdf78afe83",
          "title": "enveloping",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
          "file": "\\test\\features\\envelope.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "secrets",
              "fullTitle": "enveloping secrets",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nawait setup.addEnvelopedSecret('key2', input)\nawait setup.addEnvelopedSecret('key3', input)\nawait setup.removeEnvelopedSecret('key2')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst output = await derive.getEnvelopedSecret('key')\noutput.toString('hex').should.equal(input.toString('hex'))",
              "err": {},
              "uuid": "9812d258-d09e-4066-a653-78634fd08cc4",
              "parentUUID": "c4238791-b709-4e17-9c46-a7cdf78afe83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys",
              "fullTitle": "enveloping keys",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nawait setup.addEnvelopedKey('key1')\nawait setup.addEnvelopedKey('key2', 'rsa1024')\nawait setup.addEnvelopedKey('key3', 'rsa2048')\nawait setup.addEnvelopedKey('key4', 'ed25519')\nconst key11 = await setup.getEnvelopedKey('key1')\nconst key12 = await setup.getEnvelopedKey('key2')\nconst key13 = await setup.getEnvelopedKey('key3')\nconst key14 = await setup.getEnvelopedKey('key4')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst key21 = await derive.getEnvelopedKey('key1')\nconst key22 = await derive.getEnvelopedKey('key2')\nconst key23 = await derive.getEnvelopedKey('key3')\nconst key24 = await derive.getEnvelopedKey('key4')\nkey11.export({ format: 'jwk' }).should.deep.equal(key21.export({ format: 'jwk' }))\nkey12.export({ format: 'jwk' }).should.deep.equal(key22.export({ format: 'jwk' }))\nkey13.export({ format: 'jwk' }).should.deep.equal(key23.export({ format: 'jwk' }))\nkey14.export({ format: 'jwk' }).should.deep.equal(key24.export({ format: 'jwk' }))",
              "err": {},
              "uuid": "c42c5f08-be51-40cb-a254-50ba7364dfec",
              "parentUUID": "c4238791-b709-4e17-9c46-a7cdf78afe83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "dc7a0244-fae2-4c54-859d-3f234ded5cd8",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
              "file": "\\test\\features\\envelope.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "36dde8d3-90e4-466c-9e58-c4fc2779fa17",
                  "title": "addEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret(12345, input).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "4b25ff68-611f-497e-8cb5-653959a21192",
                      "parentUUID": "36dde8d3-90e4-466c-9e58-c4fc2779fa17",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "value/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret value/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedSecret('id', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "2982511b-3b4e-4288-be47-b3b050e3441a",
                      "parentUUID": "36dde8d3-90e4-466c-9e58-c4fc2779fa17",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret type/type",
                      "timedOut": false,
                      "duration": 105,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret('id', input, 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "c6c3e192-fa09-4a0a-a069-cb8dbf8d3044",
                      "parentUUID": "36dde8d3-90e4-466c-9e58-c4fc2779fa17",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/unique",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/unique",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nsetup.addEnvelopedSecret('key', input).should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "94cf4532-10e1-477f-ba49-4ccc46ecd1e3",
                      "parentUUID": "36dde8d3-90e4-466c-9e58-c4fc2779fa17",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4b25ff68-611f-497e-8cb5-653959a21192",
                    "2982511b-3b4e-4288-be47-b3b050e3441a",
                    "c6c3e192-fa09-4a0a-a069-cb8dbf8d3044",
                    "94cf4532-10e1-477f-ba49-4ccc46ecd1e3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 426,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "0c1e25f0-ae0e-4176-a51e-74b92f746087",
                  "title": "removeEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "c57ef984-9b86-452a-8959-9b42087fe9fa",
                      "parentUUID": "0c1e25f0-ae0e-4176-a51e-74b92f746087",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret('12345')\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "1e6f1665-f93f-4017-9ad9-5bc85c109ade",
                      "parentUUID": "0c1e25f0-ae0e-4176-a51e-74b92f746087",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c57ef984-9b86-452a-8959-9b42087fe9fa",
                    "1e6f1665-f93f-4017-9ad9-5bc85c109ade"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 214,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "0607a5f0-315c-4f7a-ad1b-84ef5869c880",
                  "title": "addEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "5dc3af17-b3f9-4a02-b982-64779fdea6f7",
                      "parentUUID": "0607a5f0-315c-4f7a-ad1b-84ef5869c880",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedKey type/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "d9574fc6-e09c-4769-b953-e10dae129f80",
                      "parentUUID": "0607a5f0-315c-4f7a-ad1b-84ef5869c880",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/range",
                      "fullTitle": "enveloping errors addEnvelopedKey type/range",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', '12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "94bfa901-5843-4555-ab20-2d17c2fe8154",
                      "parentUUID": "0607a5f0-315c-4f7a-ad1b-84ef5869c880",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5dc3af17-b3f9-4a02-b982-64779fdea6f7",
                    "d9574fc6-e09c-4769-b953-e10dae129f80",
                    "94bfa901-5843-4555-ab20-2d17c2fe8154"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 322,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "579b0cc9-95b1-4ce9-a56b-a35faf548811",
                  "title": "getEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "8cc2e84e-eaa7-4f84-8776-59b54a96e754",
                      "parentUUID": "579b0cc9-95b1-4ce9-a56b-a35faf548811",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret('12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "2cb7ca85-3bd7-48bd-b450-16f67f5bfbdb",
                      "parentUUID": "579b0cc9-95b1-4ce9-a56b-a35faf548811",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8cc2e84e-eaa7-4f84-8776-59b54a96e754",
                    "2cb7ca85-3bd7-48bd-b450-16f67f5bfbdb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 217,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "2e66d9dc-33cc-4359-a4a1-10db1329a20a",
                  "title": "getEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "ec99e262-efa0-404c-ba5e-ead5bec18141",
                      "parentUUID": "2e66d9dc-33cc-4359-a4a1-10db1329a20a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ec99e262-efa0-404c-ba5e-ead5bec18141"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 108,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d04bb223-808d-48e6-b361-e76672c88fe5",
                  "title": "hasEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors hasEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.hasEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "852329e7-0d9e-4540-9829-b9a5da8a94dc",
                      "parentUUID": "d04bb223-808d-48e6-b361-e76672c88fe5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "852329e7-0d9e-4540-9829-b9a5da8a94dc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 107,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9812d258-d09e-4066-a653-78634fd08cc4",
            "c42c5f08-be51-40cb-a254-50ba7364dfec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 470,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
          "title": "kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\kdf.js",
          "file": "\\test\\features\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "types",
              "fullTitle": "kdf types",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pbkdf2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst bcrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst scrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nconst argon2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nBuffer.isBuffer(pbkdf2).should.be.true\nBuffer.isBuffer(bcrypt).should.be.true\nBuffer.isBuffer(scrypt).should.be.true\nBuffer.isBuffer(argon2).should.be.true",
              "err": {},
              "uuid": "d01562a8-b516-481d-9300-f402e8d20c28",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha1",
              "fullTitle": "kdf pbkdf2/sha1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 16, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 25555,\n    digest: 'sha1'\n  }\n})\nBuffer.isBuffer(key).should.be.true\nkey.toString('hex').should.equal('8ee4a527b20aa8feeb78d70447d84e20')",
              "err": {},
              "uuid": "7c52b8f5-6db3-407b-9fed-d858294e43a2",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha512",
              "fullTitle": "kdf pbkdf2/sha512",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secret', 'salt', 64, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha512'\n  }\n})\nkey.toString('hex').should.equal('3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae')",
              "err": {},
              "uuid": "9257f63d-665e-4ee2-a5df-a1ee880c0564",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/default",
              "fullTitle": "kdf pbkdf2/default",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('test', '', 32, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst key2 = await mfkdf.kdf('test', '', 32, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "34e01122-1006-44a9-9e15-9561d61bca73",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/same",
              "fullTitle": "kdf bcrypt/same",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "3aecd25c-bc42-40f9-9db1-70cc2e745301",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/inputdiff",
              "fullTitle": "kdf bcrypt/inputdiff",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password2', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "6318d635-b2f3-425e-8060-cf2c1c7694c7",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/saltdiff",
              "fullTitle": "kdf bcrypt/saltdiff",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "d37266d0-bdd7-4c62-9b40-11d49f4a3db4",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/rounddiff",
              "fullTitle": "kdf bcrypt/rounddiff",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, { type: 'bcrypt', params: { rounds: 10 } })\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, { type: 'bcrypt', params: { rounds: 11 } })\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "ed295bfc-4e78-41eb-876c-8dcc9a1cfacd",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/length",
              "fullTitle": "kdf bcrypt/length",
              "timedOut": false,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key16 = await mfkdf.kdf('password', 'salt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key16).should.equal(16)\nconst key32 = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key32).should.equal(32)\nconst key64 = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key64).should.equal(64)",
              "err": {},
              "uuid": "410ff0da-0f99-421a-a5ff-d8c9ba46e5b4",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/known",
              "fullTitle": "kdf bcrypt/known",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey.toString('hex').should.equal('cb36d3d02d502acdf10dfc2d022bf3c024f16a368ba2df4456fbf97291f64334')",
              "err": {},
              "uuid": "9d0098d6-35a5-40fe-a662-ae63e420f82d",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/fast",
              "fullTitle": "kdf scrypt/fast",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 16384, scryptblocksize: 8, scryptparallelism: 1 }))\nkey.toString('hex').should.equal('745731af4484f323968969eda289aeee005b5903ac561e64a5aca121797bf7734ef9fd58422e2e22183bcacba9ec87ba0c83b7a2e788f03ce0da06463433cda6')",
              "err": {},
              "uuid": "5c3c9b46-508e-4ccd-8bb4-ff0d6ef8b52b",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/defaults",
              "fullTitle": "kdf scrypt/defaults",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nkey.toString('hex').should.equal('9009fca57ef2b8c342bdad6b9247e4a1b5bd85628152116513ad44e93cf1b0e2')",
              "err": {},
              "uuid": "4eb28da2-34bd-41e0-8ba1-4ba64ffd383e",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/N",
              "fullTitle": "kdf scrypt/N",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024 }))\nkey.toString('hex').should.equal('ceb6a6bf4f4afeb3d1806714474d4f00ca97c2ad76a641269192d11444e13a6b')",
              "err": {},
              "uuid": "f2c2a043-5cce-4607-a1f9-057a37aa0a3a",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/R",
              "fullTitle": "kdf scrypt/R",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptblocksize: 16 }))\nkey.toString('hex').should.equal('a63de1de715f95bebd9f6d58d78ff11028a8412c1fcf71673544373c67095836')",
              "err": {},
              "uuid": "1aa243b1-673d-4c2d-baab-1edac1bb6c4c",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/P",
              "fullTitle": "kdf scrypt/P",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptparallelism: 2 }))\nkey.toString('hex').should.equal('ef224277727457992dc05983b1fd1208bae35b100c853ba4bb11f1ba7ca4c436')",
              "err": {},
              "uuid": "3b5d08b7-248f-40f3-b68d-924eb41476e5",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2i",
              "fullTitle": "kdf argon2i",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2i' }))\nkey.toString('hex').should.equal('7357892df510f136a0688ceab37bbaf7ba695de590065072717fa6728961c92a')",
              "err": {},
              "uuid": "04cb49c6-e149-4cae-943f-defee68043c8",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2d",
              "fullTitle": "kdf argon2d",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2d' }))\nkey.toString('hex').should.equal('423b0dcc7bbfe16fa8ee7a2e2ebd8891873d726f9dfe70890a7197a5503a2848')",
              "err": {},
              "uuid": "470c5f08-f7c7-4b76-a9b9-c07f483be0f2",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id",
              "fullTitle": "kdf argon2id",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "0c69d045-54c0-43b4-a306-0756829bc08b",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/mem",
              "fullTitle": "kdf argon2id/mem",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2mem: 16384 }))\nkey.toString('hex').should.equal('e043f979311b14ff8378b785469974e899a08f05509323a04b2ca29ef63ff3af')",
              "err": {},
              "uuid": "0e69bba1-9e39-451a-9f0a-c142f7c3e749",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/time",
              "fullTitle": "kdf argon2id/time",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2time: 1 }))\nkey.toString('hex').should.equal('bf6b1773bdae362ecea04b889079b6628d1f35d96a2be9f2a5481c2d1236e8d7')",
              "err": {},
              "uuid": "0053944c-1c68-437a-87f6-8e060b337cf7",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/parallelism",
              "fullTitle": "kdf argon2id/parallelism",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2parallelism: 2 }))\nkey.toString('hex').should.equal('5c12c6873b938cd8467b677d23e525389e3ff7ed62b4ad9e285e1191244f40ca')",
              "err": {},
              "uuid": "978fa7b9-255b-4ca4-b112-b73b53f201f8",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "kdf default",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({}))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "147fd463-3bd7-4e22-822e-765caa20907c",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "kdf invalid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.kdf('password1', 'salt1', 16, { type: 'invalid', params: { } }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d4cf677e-63b0-41d9-965f-ec87fc9d4598",
              "parentUUID": "806627d8-3d4a-4ff8-bfa5-4591d0624459",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d01562a8-b516-481d-9300-f402e8d20c28",
            "7c52b8f5-6db3-407b-9fed-d858294e43a2",
            "9257f63d-665e-4ee2-a5df-a1ee880c0564",
            "34e01122-1006-44a9-9e15-9561d61bca73",
            "3aecd25c-bc42-40f9-9db1-70cc2e745301",
            "6318d635-b2f3-425e-8060-cf2c1c7694c7",
            "d37266d0-bdd7-4c62-9b40-11d49f4a3db4",
            "ed295bfc-4e78-41eb-876c-8dcc9a1cfacd",
            "410ff0da-0f99-421a-a5ff-d8c9ba46e5b4",
            "9d0098d6-35a5-40fe-a662-ae63e420f82d",
            "5c3c9b46-508e-4ccd-8bb4-ff0d6ef8b52b",
            "4eb28da2-34bd-41e0-8ba1-4ba64ffd383e",
            "f2c2a043-5cce-4607-a1f9-057a37aa0a3a",
            "1aa243b1-673d-4c2d-baab-1edac1bb6c4c",
            "3b5d08b7-248f-40f3-b68d-924eb41476e5",
            "04cb49c6-e149-4cae-943f-defee68043c8",
            "470c5f08-f7c7-4b76-a9b9-c07f483be0f2",
            "0c69d045-54c0-43b4-a306-0756829bc08b",
            "0e69bba1-9e39-451a-9f0a-c142f7c3e749",
            "0053944c-1c68-437a-87f6-8e060b337cf7",
            "978fa7b9-255b-4ca4-b112-b73b53f201f8",
            "147fd463-3bd7-4e22-822e-765caa20907c",
            "d4cf677e-63b0-41d9-965f-ec87fc9d4598"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2441,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "907045dd-29f5-4782-aa46-de460a711600",
          "title": "policy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "950634ef-355e-41fd-86f0-1635e4e2b77f",
              "title": "validate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "68e16c59-1482-4f89-8f61-8056898a88f3",
                  "parentUUID": "950634ef-355e-41fd-86f0-1635e4e2b77f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password2' })\n    )\n  )\n).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7590a18b-f45a-42e0-8d7a-96ae6202ddea",
                  "parentUUID": "950634ef-355e-41fd-86f0-1635e4e2b77f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68e16c59-1482-4f89-8f61-8056898a88f3",
                "7590a18b-f45a-42e0-8d7a-96ae6202ddea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f4b3d730-7cf5-4437-a9f5-6eee943fbee1",
              "title": "evaluate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.true",
                  "err": {},
                  "uuid": "118962d2-356f-45f2-bc15-395680ade73c",
                  "parentUUID": "f4b3d730-7cf5-4437-a9f5-6eee943fbee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.false",
                  "err": {},
                  "uuid": "15ec051c-02f8-45b6-b3b6-e68151f33678",
                  "parentUUID": "f4b3d730-7cf5-4437-a9f5-6eee943fbee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "118962d2-356f-45f2-bc15-395680ade73c",
                "15ec051c-02f8-45b6-b3b6-e68151f33678"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 223,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "157e7b13-13a8-4674-8701-87655b1a7635",
              "title": "derive",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "ef209c2c-7178-4e64-bebd-f3b69b5e3d57",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "5b21658f-54a5-4ef5-a306-bfc011065230",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "291b658a-3f04-497f-8ba4-0ce14581ef30",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 615,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "118fed25-f097-458e-af49-05cc33dd6c57",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 351,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "f4220860-ec0f-436c-9753-cee24d137312",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 248,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "ba664715-0277-42ad-9ee4-0115b338b373",
                  "parentUUID": "157e7b13-13a8-4674-8701-87655b1a7635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef209c2c-7178-4e64-bebd-f3b69b5e3d57",
                "5b21658f-54a5-4ef5-a306-bfc011065230",
                "291b658a-3f04-497f-8ba4-0ce14581ef30",
                "118fed25-f097-458e-af49-05cc33dd6c57",
                "f4220860-ec0f-436c-9753-cee24d137312",
                "ba664715-0277-42ad-9ee4-0115b338b373"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1888,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2de8deb3-3491-4ff8-9851-a75d4781c3b3",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n        await mfkdf.setup.factors.password('password2', { id: 'password2' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n])\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0dcd7c94-d28e-45df-80b3-9c5a29f1ca98",
                  "parentUUID": "2de8deb3-3491-4ff8-9851-a75d4781c3b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "92d0faf1-692c-4867-adcc-37de1a944134",
                  "parentUUID": "2de8deb3-3491-4ff8-9851-a75d4781c3b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dcd7c94-d28e-45df-80b3-9c5a29f1ca98",
                "92d0faf1-692c-4867-adcc-37de1a944134"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5baa5533-33dc-4364-9685-d2643f7feeab",
          "title": "reconstitution",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "3cc897a4-6862-4906-9008-905a35ce633e",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nderive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nmfkdf.derive.key(derive2.policy, {\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "568f0ea5-d1f5-4c63-a8c5-e58d49340c8a",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "f803fb04-e478-413a-bb7f-917f20c8b5c5",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactor(await mfkdf.setup.factors.password('password3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "fd1f2715-d75e-49d8-b392-57d31078cdd9",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "370ee91d-9694-4b56-9040-9c81c8b94802",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "ba0e7870-13b8-4f99-956d-e59a8bc82a06",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "104d1ee2-29af-464e-aa4c-cf6b04418b5f",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(['password1'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "08cd2ae9-62df-4c95-b3d4-4fad1058027a",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "eabf64e0-e8af-4461-881f-d817f702b582",
              "parentUUID": "5baa5533-33dc-4364-9685-d2643f7feeab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([12345], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "470001db-5d23-4f82-8355-55f7058e6221",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute(['password4'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8534707e-dbae-4561-8ef7-056f11c693b2",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.reconstitute(['password3'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('diffPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c77c59bf-9c3d-4846-8cb0-ea4dde18fc67",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute('hello', [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8b1517a2-85d8-4bf9-a368-8f3f21f2f574",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], '12345', 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "da4e2e7e-ca06-49c6-b634-04ff0927607e",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], '12345').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fbc407d4-1f96-41b5-8cf8-269bbf978566",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e54f6a50-8b68-43a4-9e5a-cb4a8edae46d",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 12345,\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "00a1c620-3359-4f6d-b2d4-f1c94089a6c6",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: '',\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "8036a288-0745-44cd-a699-580e3788b629",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4d4b56db-33f3-4bf9-aaae-cb83150e3628",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f6a1ebfd-c289-447c-937e-309cdca45f4a",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: 12345,\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ac8bc79b-6375-4f32-89cd-8421d3438b5b",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from(''),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ff70d238-32bc-4d94-b1be-73665a46fc63",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: 12345,\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8dc4e220-af80-41be-b599-0899237e97eb",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: async () => {\n      return {}\n    },\n    output: 12345\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "eb5072d7-a22d-40a7-89bf-6bc550332326",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9512cbb5-01ce-49b4-8a4c-ebc59184788d",
                  "parentUUID": "7036a1f7-d651-455c-958e-4ea3ddecacc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "470001db-5d23-4f82-8355-55f7058e6221",
                "8534707e-dbae-4561-8ef7-056f11c693b2",
                "c77c59bf-9c3d-4846-8cb0-ea4dde18fc67",
                "8b1517a2-85d8-4bf9-a368-8f3f21f2f574",
                "da4e2e7e-ca06-49c6-b634-04ff0927607e",
                "fbc407d4-1f96-41b5-8cf8-269bbf978566",
                "e54f6a50-8b68-43a4-9e5a-cb4a8edae46d",
                "00a1c620-3359-4f6d-b2d4-f1c94089a6c6",
                "8036a288-0745-44cd-a699-580e3788b629",
                "4d4b56db-33f3-4bf9-aaae-cb83150e3628",
                "f6a1ebfd-c289-447c-937e-309cdca45f4a",
                "ac8bc79b-6375-4f32-89cd-8421d3438b5b",
                "ff70d238-32bc-4d94-b1be-73665a46fc63",
                "8dc4e220-af80-41be-b599-0899237e97eb",
                "eb5072d7-a22d-40a7-89bf-6bc550332326",
                "9512cbb5-01ce-49b4-8a4c-ebc59184788d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1704,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "3cc897a4-6862-4906-9008-905a35ce633e",
            "568f0ea5-d1f5-4c63-a8c5-e58d49340c8a",
            "f803fb04-e478-413a-bb7f-917f20c8b5c5",
            "fd1f2715-d75e-49d8-b392-57d31078cdd9",
            "370ee91d-9694-4b56-9040-9c81c8b94802",
            "ba0e7870-13b8-4f99-956d-e59a8bc82a06",
            "104d1ee2-29af-464e-aa4c-cf6b04418b5f",
            "08cd2ae9-62df-4c95-b3d4-4fad1058027a",
            "eabf64e0-e8af-4461-881f-d817f702b582"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2444,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "136bd06f-b61d-45d4-8c67-28bd630481ae",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "8961b6dc-9fe7-4c2e-acdf-2d35ddea91e1",
              "parentUUID": "136bd06f-b61d-45d4-8c67-28bd630481ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "9d96f23d-9b5c-4803-9bd1-395bdf2a6d18",
              "parentUUID": "136bd06f-b61d-45d4-8c67-28bd630481ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "47145099-b6f7-46d2-8d5a-b69e75b02a85",
              "parentUUID": "136bd06f-b61d-45d4-8c67-28bd630481ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8961b6dc-9fe7-4c2e-acdf-2d35ddea91e1",
            "9d96f23d-9b5c-4803-9bd1-395bdf2a6d18",
            "47145099-b6f7-46d2-8d5a-b69e75b02a85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1752432e-8503-4426-8698-125cdc509fb6",
          "title": "secrets",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c420560c-17a6-4649-afa3-bab2c1ae0163",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 1, 5)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1ceb348c-78e8-444c-b382-3240880a1b84",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 2, 3)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5fd94863-cf49-4d18-b89c-c33288ca56de",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "112d71ed-8c0b-43e0-9d9f-ba9a111bdf1b",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 1024)\nshares.should.be.an('array').of.length(1024)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 1020; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[1023] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "00901ebe-db2a-42e0-b98b-388a9cacfc07",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)\nxor(shares[0], shares[1]).toString('hex').should.equal('12345678')",
              "err": {},
              "uuid": "06a0ec96-5f87-4861-b4c9-c6b69a217391",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "7ea7fbe5-8433-4725-8570-05cde1d8dc1c",
              "parentUUID": "1752432e-8503-4426-8698-125cdc509fb6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c420560c-17a6-4649-afa3-bab2c1ae0163",
            "1ceb348c-78e8-444c-b382-3240880a1b84",
            "5fd94863-cf49-4d18-b89c-c33288ca56de",
            "112d71ed-8c0b-43e0-9d9f-ba9a111bdf1b",
            "00901ebe-db2a-42e0-b98b-388a9cacfc07",
            "06a0ec96-5f87-4861-b4c9-c6b69a217391",
            "7ea7fbe5-8433-4725-8570-05cde1d8dc1c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 81,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6c957852-29cf-4fef-9670-f8e04622c21c",
          "title": "secrets/recover",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "9bcecca5-78dd-41d0-94a0-7cd93dbfae99",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "3da6a206-b33a-427c-96c7-75e0ec92cfee",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "9be1fb06-c0cc-40ea-8922-10f985115962",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "4e0a5c16-29cf-47f3-8d17-e02400d18bc3",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "bd525295-9172-4a34-9dd0-824ab28a71d3",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "83b96d35-cc10-40a1-a282-1c5336c9aa55",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "6110b95d-18d2-4ff9-8216-da9de01d9bcd",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "4ffe8a4f-ce50-4567-8bcc-ea2794fddf3c",
              "parentUUID": "6c957852-29cf-4fef-9670-f8e04622c21c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bcecca5-78dd-41d0-94a0-7cd93dbfae99",
            "3da6a206-b33a-427c-96c7-75e0ec92cfee",
            "9be1fb06-c0cc-40ea-8922-10f985115962",
            "4e0a5c16-29cf-47f3-8d17-e02400d18bc3",
            "bd525295-9172-4a34-9dd0-824ab28a71d3",
            "83b96d35-cc10-40a1-a282-1c5336c9aa55",
            "6110b95d-18d2-4ff9-8216-da9de01d9bcd",
            "4ffe8a4f-ce50-4567-8bcc-ea2794fddf3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "77122835-3eb0-478d-9920-93059c368ef7",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "3805decc-9f69-4d0f-a786-bdab830d7c44",
              "parentUUID": "77122835-3eb0-478d-9920-93059c368ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "8624e999-29b3-44ed-a5c9-de42d9ffcf88",
              "parentUUID": "77122835-3eb0-478d-9920-93059c368ef7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "65187ef5-a30f-4457-93f0-8bd276f91932",
              "parentUUID": "77122835-3eb0-478d-9920-93059c368ef7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3805decc-9f69-4d0f-a786-bdab830d7c44",
            "8624e999-29b3-44ed-a5c9-de42d9ffcf88",
            "65187ef5-a30f-4457-93f0-8bd276f91932"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "08c2aa3f-8050-42d9-9638-9fdf7fdd3409",
          "title": "setup/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.password('password', { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "d87b93f4-42f0-4bf4-9901-fe57dfc0fabd",
              "parentUUID": "08c2aa3f-8050-42d9-9638-9fdf7fdd3409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.password('password', { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "3e6afa50-2ca4-404e-a565-7bcdcbc17e9d",
              "parentUUID": "08c2aa3f-8050-42d9-9638-9fdf7fdd3409",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "0f0a5e0c-4bd8-4226-a5c1-875bf5658b2e",
              "parentUUID": "08c2aa3f-8050-42d9-9638-9fdf7fdd3409",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d87b93f4-42f0-4bf4-9901-fe57dfc0fabd",
            "3e6afa50-2ca4-404e-a565-7bcdcbc17e9d",
            "0f0a5e0c-4bd8-4226-a5c1-875bf5658b2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e806f669-d8f3-40ea-b46d-0133fc8dd7a7",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ uuid: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ uuid: 'hello' }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "b2f9d3e2-c7d5-48a8-a261-5006aaa92cfe",
              "parentUUID": "e806f669-d8f3-40ea-b46d-0133fc8dd7a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "f4dca2c5-282d-457b-a1e1-661e8527a3b0",
              "parentUUID": "e806f669-d8f3-40ea-b46d-0133fc8dd7a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({ uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\nfactor.type.should.equal('uuid')\nfactor.data.toString('hex').should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "00d81967-b4e7-43ef-ae09-a585ff500a80",
              "parentUUID": "e806f669-d8f3-40ea-b46d-0133fc8dd7a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "89ff5990-313e-4836-90e3-053f92f8da75",
              "parentUUID": "e806f669-d8f3-40ea-b46d-0133fc8dd7a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2f9d3e2-c7d5-48a8-a261-5006aaa92cfe",
            "f4dca2c5-282d-457b-a1e1-661e8527a3b0",
            "00d81967-b4e7-43ef-ae09-a585ff500a80",
            "89ff5990-313e-4836-90e3-053f92f8da75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f1ad68a5-89ac-41cb-bb87-3d4d45d951c6",
          "title": "setup/kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
          "file": "\\test\\setup\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "55ebfd42-e4c6-4c4f-850c-86f7f8534ae4",
              "title": "pbkdf2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf pbkdf2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})",
                  "err": {},
                  "uuid": "cd5f8b58-e8a1-4cbb-a83b-5d91fe4fa19a",
                  "parentUUID": "55ebfd42-e4c6-4c4f-850c-86f7f8534ae4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "83af2df5-3e8c-4835-801d-708154b27311",
                  "title": "pbkdf2rounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "73780e22-a6d4-46f2-8527-334047f3de18",
                      "parentUUID": "83af2df5-3e8c-4835-801d-708154b27311",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "de566c43-7275-4fe8-9730-0234225f6039",
                      "parentUUID": "83af2df5-3e8c-4835-801d-708154b27311",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha256'\n  }\n})",
                      "err": {},
                      "uuid": "f1af1697-a888-474c-a40c-f2c0fb1b819c",
                      "parentUUID": "83af2df5-3e8c-4835-801d-708154b27311",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "73780e22-a6d4-46f2-8527-334047f3de18",
                    "de566c43-7275-4fe8-9730-0234225f6039",
                    "f1af1697-a888-474c-a40c-f2c0fb1b819c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ace4b09d-ee7e-4f07-a32d-ef093c3361db",
                  "title": "pbkdf2digest",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 0\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "4212ae43-5383-4b0e-ae65-d114f8062e35",
                      "parentUUID": "ace4b09d-ee7e-4f07-a32d-ef093c3361db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 'foo'\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "e37481f6-56bd-4864-9f66-a5c8f2448e83",
                      "parentUUID": "ace4b09d-ee7e-4f07-a32d-ef093c3361db",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2digest: 'sha512'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha512'\n  }\n})",
                      "err": {},
                      "uuid": "d6b10995-969c-4b41-aed2-149b4c6f1746",
                      "parentUUID": "ace4b09d-ee7e-4f07-a32d-ef093c3361db",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4212ae43-5383-4b0e-ae65-d114f8062e35",
                    "e37481f6-56bd-4864-9f66-a5c8f2448e83",
                    "d6b10995-969c-4b41-aed2-149b4c6f1746"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "cd5f8b58-e8a1-4cbb-a83b-5d91fe4fa19a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a15b585c-c551-4ad7-a841-cec496802e3e",
              "title": "bcrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf bcrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt'\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 10\n  }\n})",
                  "err": {},
                  "uuid": "e52784e3-270c-4497-aa01-ec6a7e0d4aa7",
                  "parentUUID": "a15b585c-c551-4ad7-a841-cec496802e3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "7a42b3e4-9da1-468f-9444-04ec374addc0",
                  "title": "bcryptrounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "de23eb76-5247-4352-ac83-2b1e82f14455",
                      "parentUUID": "7a42b3e4-9da1-468f-9444-04ec374addc0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "07ce88c8-7428-4051-9457-0e30896b889d",
                      "parentUUID": "7a42b3e4-9da1-468f-9444-04ec374addc0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt',\n  bcryptrounds: 25\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 25\n  }\n})",
                      "err": {},
                      "uuid": "ea440208-6437-47a8-954f-951fefab3a97",
                      "parentUUID": "7a42b3e4-9da1-468f-9444-04ec374addc0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "de23eb76-5247-4352-ac83-2b1e82f14455",
                    "07ce88c8-7428-4051-9457-0e30896b889d",
                    "ea440208-6437-47a8-954f-951fefab3a97"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "e52784e3-270c-4497-aa01-ec6a7e0d4aa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b46582fe-3303-408c-a214-eba090871f05",
              "title": "scrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf scrypt defaults",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt'\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "9bb1f3e2-a0cc-4ce5-a8c0-21508b3a2dce",
                  "parentUUID": "b46582fe-3303-408c-a214-eba090871f05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "20b1b673-0cdf-43c9-9c98-19aa1761e954",
                  "title": "scryptcost",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "4dc5e6bc-e615-44b7-9ca0-2c61d234a30a",
                      "parentUUID": "20b1b673-0cdf-43c9-9c98-19aa1761e954",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "6d5963b5-0b31-4907-8a0d-8200dcfc1c3b",
                      "parentUUID": "20b1b673-0cdf-43c9-9c98-19aa1761e954",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptcost valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptcost: 12345\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 12345,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "5c16201d-a379-4460-aa63-b752108b4a45",
                      "parentUUID": "20b1b673-0cdf-43c9-9c98-19aa1761e954",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4dc5e6bc-e615-44b7-9ca0-2c61d234a30a",
                    "6d5963b5-0b31-4907-8a0d-8200dcfc1c3b",
                    "5c16201d-a379-4460-aa63-b752108b4a45"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "03d54a57-f7d3-4c32-a113-c4c4803867ea",
                  "title": "scryptblocksize",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "9dcb857a-aef6-44b2-8a3d-7d55de54a61a",
                      "parentUUID": "03d54a57-f7d3-4c32-a113-c4c4803867ea",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "ad005398-25e5-4b53-b063-c411b2ff2f25",
                      "parentUUID": "03d54a57-f7d3-4c32-a113-c4c4803867ea",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptblocksize valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptblocksize: 24\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 24,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "a490b784-7b93-4d95-af0b-360e0eb983a9",
                      "parentUUID": "03d54a57-f7d3-4c32-a113-c4c4803867ea",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9dcb857a-aef6-44b2-8a3d-7d55de54a61a",
                    "ad005398-25e5-4b53-b063-c411b2ff2f25",
                    "a490b784-7b93-4d95-af0b-360e0eb983a9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ba2eacb1-996e-4093-bb49-f4401c0c6738",
                  "title": "scryptparallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "543e800f-4871-42f4-b9f7-97faf7adea14",
                      "parentUUID": "ba2eacb1-996e-4093-bb49-f4401c0c6738",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "c3a9e44d-d1bf-4b67-bf56-635c17da03d8",
                      "parentUUID": "ba2eacb1-996e-4093-bb49-f4401c0c6738",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptparallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptparallelism: 2\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "81e059b9-a3da-4c1f-a39b-b0c26c43eb59",
                      "parentUUID": "ba2eacb1-996e-4093-bb49-f4401c0c6738",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "543e800f-4871-42f4-b9f7-97faf7adea14",
                    "c3a9e44d-d1bf-4b67-bf56-635c17da03d8",
                    "81e059b9-a3da-4c1f-a39b-b0c26c43eb59"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "9bb1f3e2-a0cc-4ce5-a8c0-21508b3a2dce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "55a372c6-8519-464b-832c-10bd25ffc226",
              "title": "argon2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf argon2 defaults",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "756a8c83-a493-4b7a-91d7-5aa7b7878b8d",
                  "parentUUID": "55a372c6-8519-464b-832c-10bd25ffc226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/type",
                  "fullTitle": "setup/kdf argon2 kdf/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 123\n  })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "76bf172b-afd4-4a99-afe9-dd741220d353",
                  "parentUUID": "55a372c6-8519-464b-832c-10bd25ffc226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/range",
                  "fullTitle": "setup/kdf argon2 kdf/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'foo'\n  })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "608a8ac7-2406-408d-b5af-2f070a3c949a",
                  "parentUUID": "55a372c6-8519-464b-832c-10bd25ffc226",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a500562d-6aa4-4716-8326-8a3a0a04fc1d",
                  "title": "argon2time",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "3a1c76d4-42b7-452a-b350-30716bed4cb9",
                      "parentUUID": "a500562d-6aa4-4716-8326-8a3a0a04fc1d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/range",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "012060ef-c17a-46a9-9a21-748d0668f6d9",
                      "parentUUID": "a500562d-6aa4-4716-8326-8a3a0a04fc1d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2time valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2d',\n  argon2time: 10\n}).should.deep.equal({\n  type: 'argon2d',\n  params: {\n    rounds: 10,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "38e0cc1f-03de-47d7-89eb-46306b09fb04",
                      "parentUUID": "a500562d-6aa4-4716-8326-8a3a0a04fc1d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3a1c76d4-42b7-452a-b350-30716bed4cb9",
                    "012060ef-c17a-46a9-9a21-748d0668f6d9",
                    "38e0cc1f-03de-47d7-89eb-46306b09fb04"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ab08d03d-9f2b-4820-8a66-58c3e678d391",
                  "title": "argon2mem",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "9adde48f-b2d2-46cf-b85f-2140ac77e2ca",
                      "parentUUID": "ab08d03d-9f2b-4820-8a66-58c3e678d391",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "2166ec1a-702d-4a3f-976a-a630d15de88d",
                      "parentUUID": "ab08d03d-9f2b-4820-8a66-58c3e678d391",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2mem valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2i',\n  argon2mem: 12345\n}).should.deep.equal({\n  type: 'argon2i',\n  params: {\n    rounds: 2,\n    memory: 12345,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "398a7961-7edb-45de-84cb-8c7370c1c889",
                      "parentUUID": "ab08d03d-9f2b-4820-8a66-58c3e678d391",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9adde48f-b2d2-46cf-b85f-2140ac77e2ca",
                    "2166ec1a-702d-4a3f-976a-a630d15de88d",
                    "398a7961-7edb-45de-84cb-8c7370c1c889"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "cabe17f6-e58a-44f6-8533-7025096e7078",
                  "title": "argon2parallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "d66fc2fe-c720-4344-9405-e5d82c2645e7",
                      "parentUUID": "cabe17f6-e58a-44f6-8533-7025096e7078",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "1c37f053-2b0e-401f-99d3-ddad6016211f",
                      "parentUUID": "cabe17f6-e58a-44f6-8533-7025096e7078",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2parallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2id',\n  argon2parallelism: 2\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "02f7e927-a5ba-4711-ac0b-19f67250cdcd",
                      "parentUUID": "cabe17f6-e58a-44f6-8533-7025096e7078",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d66fc2fe-c720-4344-9405-e5d82c2645e7",
                    "1c37f053-2b0e-401f-99d3-ddad6016211f",
                    "02f7e927-a5ba-4711-ac0b-19f67250cdcd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "756a8c83-a493-4b7a-91d7-5aa7b7878b8d",
                "76bf172b-afd4-4a99-afe9-dd741220d353",
                "608a8ac7-2406-408d-b5af-2f070a3c949a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e4ddd8c3-0a21-4dc1-81e0-110bbcd0ecea",
          "title": "setup/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "2f9c3fe4-2803-4d76-a9eb-0c03ad91915e",
              "parentUUID": "e4ddd8c3-0a21-4dc1-81e0-110bbcd0ecea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "977f250b-def7-4bd4-b291-3c686dbf16c5",
              "title": "id",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "fc05566e-06b4-4e80-802d-0c6165f9c3ea",
                  "parentUUID": "977f250b-def7-4bd4-b291-3c686dbf16c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 'hello-world' })\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "03b4fda8-acc5-4ca4-ba3a-b3f4d6f6944c",
                  "parentUUID": "977f250b-def7-4bd4-b291-3c686dbf16c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bba627c0-865d-4293-a7c7-586fca3e510a",
                  "parentUUID": "977f250b-def7-4bd4-b291-3c686dbf16c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6a4203e6-cc77-4c53-9b83-7bf58d737b98",
                  "parentUUID": "977f250b-def7-4bd4-b291-3c686dbf16c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc05566e-06b4-4e80-802d-0c6165f9c3ea",
                "03b4fda8-acc5-4ca4-ba3a-b3f4d6f6944c",
                "bba627c0-865d-4293-a7c7-586fca3e510a",
                "6a4203e6-cc77-4c53-9b83-7bf58d737b98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "23f6dfbe-4524-4ba4-8218-a5eb1157f2d9",
              "title": "size",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key size default",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.size.should.equal(32)",
                  "err": {},
                  "uuid": "8a07d31b-9bd1-4beb-aec3-ecb9139cea8f",
                  "parentUUID": "23f6dfbe-4524-4ba4-8218-a5eb1157f2d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key size valid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 64 })\npolicy.size.should.equal(64)",
                  "err": {},
                  "uuid": "601eb2a3-08f4-4423-857e-84b52e17930e",
                  "parentUUID": "23f6dfbe-4524-4ba4-8218-a5eb1157f2d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key size invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2953aa8d-f772-4a72-8536-57d45f38a570",
                  "parentUUID": "23f6dfbe-4524-4ba4-8218-a5eb1157f2d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key size invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 0 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "4ca44ea7-cba7-4d03-83bb-7fbe7a56bed5",
                  "parentUUID": "23f6dfbe-4524-4ba4-8218-a5eb1157f2d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a07d31b-9bd1-4beb-aec3-ecb9139cea8f",
                "601eb2a3-08f4-4423-857e-84b52e17930e",
                "2953aa8d-f772-4a72-8536-57d45f38a570",
                "4ca44ea7-cba7-4d03-83bb-7fbe7a56bed5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 214,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8cb41173-570f-4ecf-bbec-933610c21d7a",
              "title": "threshold",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "64e6c29c-75a9-42a9-8dec-3493d7efd8bd",
                  "parentUUID": "8cb41173-570f-4ecf-bbec-933610c21d7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n], { threshold: 1 })\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "94e07fd9-efd3-4a8c-9179-82db6f4dc55a",
                  "parentUUID": "8cb41173-570f-4ecf-bbec-933610c21d7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "57e1d758-c37a-4b16-a128-35d54e1326fd",
                  "parentUUID": "8cb41173-570f-4ecf-bbec-933610c21d7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 0 }).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 2 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cc82ede0-0518-49df-8aee-2d3930eed74f",
                  "parentUUID": "8cb41173-570f-4ecf-bbec-933610c21d7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64e6c29c-75a9-42a9-8dec-3493d7efd8bd",
                "94e07fd9-efd3-4a8c-9179-82db6f4dc55a",
                "57e1d758-c37a-4b16-a128-35d54e1326fd",
                "cc82ede0-0518-49df-8aee-2d3930eed74f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ef4008fd-baff-40ba-a8b0-5b474a682318",
              "title": "salt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 48 })\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(48)",
                  "err": {},
                  "uuid": "7aeb5f62-3d5b-4fc8-ae12-55d158337580",
                  "parentUUID": "ef4008fd-baff-40ba-a8b0-5b474a682318",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: Buffer.from('12345678', 'base64') })\npolicy.salt.should.equal('12345678')",
                  "err": {},
                  "uuid": "bd1198d5-9894-4625-9094-408b00ff499c",
                  "parentUUID": "ef4008fd-baff-40ba-a8b0-5b474a682318",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e338c08f-f0b0-47cf-9340-3f79969ad171",
                  "parentUUID": "ef4008fd-baff-40ba-a8b0-5b474a682318",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7aeb5f62-3d5b-4fc8-ae12-55d158337580",
                "bd1198d5-9894-4625-9094-408b00ff499c",
                "e338c08f-f0b0-47cf-9340-3f79969ad171"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 208,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "28f9dcab-817d-4ade-b86b-ab59dd2637ba",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "dc295fb0-20c3-460c-9692-9678f43d6878",
                  "parentUUID": "28f9dcab-817d-4ade-b86b-ab59dd2637ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password1' })\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c8d1f758-de20-4505-b87b-ec3a2bbeab5f",
                  "parentUUID": "28f9dcab-817d-4ade-b86b-ab59dd2637ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 12345,\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: 12345,\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: 12345\n  }\n]).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8cbb470a-8d91-4d56-99cb-50a0f4f582a3",
                  "parentUUID": "28f9dcab-817d-4ade-b86b-ab59dd2637ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: '',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "cc3814ca-0534-489a-b505-0bf17e199ac5",
                  "parentUUID": "28f9dcab-817d-4ade-b86b-ab59dd2637ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc295fb0-20c3-460c-9692-9678f43d6878",
                "c8d1f758-de20-4505-b87b-ec3a2bbeab5f",
                "8cbb470a-8d91-4d56-99cb-50a0f4f582a3",
                "cc3814ca-0534-489a-b505-0bf17e199ac5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "2f9c3fe4-2803-4d76-a9eb-0c03ad91915e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}