{
  "stats": {
    "suites": 77,
    "tests": 314,
    "passes": 314,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-29T19:08:48.146Z",
    "end": "2022-04-29T19:10:23.699Z",
    "duration": 95553,
    "testsRegistered": 314,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "37c9d6b0-49e0-4e05-ae43-c5edac710033",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dd8ee6b7-e319-428e-8c63-926866a22f8a",
          "title": "asymmetric",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
          "file": "\\test\\crypto\\asymmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08a97c75-7f93-47b0-9f9d-9d2d338f823d",
              "title": "encryption",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric encryption rsa1024",
                  "timedOut": false,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa1024')\nconst pt = await setup.decrypt(ct, 'rsa1024')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "29fb4afa-1563-4a45-9d94-28e48eb21f5c",
                  "parentUUID": "08a97c75-7f93-47b0-9f9d-9d2d338f823d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric encryption rsa2048",
                  "timedOut": false,
                  "duration": 1371,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa2048')\nconst pt = await setup.decrypt(ct, 'rsa2048')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "b67fe7e0-6838-4270-befb-b8968f1f58b4",
                  "parentUUID": "08a97c75-7f93-47b0-9f9d-9d2d338f823d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29fb4afa-1563-4a45-9d94-28e48eb21f5c",
                "b67fe7e0-6838-4270-befb-b8968f1f58b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1622,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
              "title": "signatures",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric signatures rsa1024",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa1024')\nconst validity = await setup.verify('hello world', signature, 'rsa1024')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "4a63da07-41ab-4502-9f85-8a65fbaf260d",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric signatures rsa2048",
                  "timedOut": false,
                  "duration": 910,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa2048')\nconst validity = await setup.verify('hello world', signature, 'rsa2048')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "29cb5e3a-0a74-4bc0-800b-c4b368f85368",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa3072",
                  "fullTitle": "asymmetric signatures rsa3072",
                  "timedOut": false,
                  "duration": 24781,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa3072')\nconst validity = await setup.verify('hello world', signature, 'rsa3072')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "08b0c047-dd06-4705-8042-34b10f59509e",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "defaults",
                  "fullTitle": "asymmetric signatures defaults",
                  "timedOut": false,
                  "duration": 9286,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world')\nconst validity = await setup.verify('hello world', signature)\nvalidity.should.be.true\nawait setup.getAsymmetricKeyPair()",
                  "err": {},
                  "uuid": "cdb8c257-6b78-4661-9f92-412161f47a71",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ed25519",
                  "fullTitle": "asymmetric signatures ed25519",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nawait setup.getAsymmetricKeyPair('ed25519')",
                  "err": {},
                  "uuid": "ae8fb660-2cc2-4e9f-b654-20f0bb822561",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unknown",
                  "fullTitle": "asymmetric signatures unknown",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.getAsymmetricKeyPair('unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "66fb3e7e-0d80-4c7f-8358-4bd894629d0d",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "errors",
                  "fullTitle": "asymmetric signatures errors",
                  "timedOut": false,
                  "duration": 5265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.sign(12345, 'rsa1024').should.be.rejectedWith(TypeError)\nconst signature = await setup.sign('hello world')\nsetup.verify(12345, signature).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "524eeb8e-670c-4ab5-a75e-c18e77898f40",
                  "parentUUID": "a7c6b6bd-8697-4837-a6c7-5fb8991e0257",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a63da07-41ab-4502-9f85-8a65fbaf260d",
                "29cb5e3a-0a74-4bc0-800b-c4b368f85368",
                "08b0c047-dd06-4705-8042-34b10f59509e",
                "cdb8c257-6b78-4661-9f92-412161f47a71",
                "ae8fb660-2cc2-4e9f-b654-20f0bb822561",
                "66fb3e7e-0d80-4c7f-8358-4bd894629d0d",
                "524eeb8e-670c-4ab5-a75e-c18e77898f40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40679,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
          "title": "encrypt",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "defaults",
              "fullTitle": "encrypt defaults",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext)\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "fe22b859-d713-47c3-ae71-0e4cc5c34bad",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-CBC",
              "fullTitle": "encrypt AES256-CBC",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "b47bd5b8-7b29-47b6-a26b-65727f100f29",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-CBC",
              "fullTitle": "encrypt AES192-CBC",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "c15184ae-2e09-4e91-a4ac-5c3b9eb7d9c5",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-CBC",
              "fullTitle": "encrypt AES128-CBC",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "2f02927c-b354-4060-9e68-a088f3609d48",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-CBC",
              "fullTitle": "encrypt 3DES-CBC",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "0d083e93-9472-4c7b-bac4-18069985255c",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-CBC",
              "fullTitle": "encrypt DES-CBC",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "726c67ea-3c64-4d8b-b5b6-7c0f4316b2b9",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-ECB",
              "fullTitle": "encrypt AES256-ECB",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "a67ca5ec-8dfd-493a-beb1-178fe9febe26",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-ECB",
              "fullTitle": "encrypt AES192-ECB",
              "timedOut": false,
              "duration": 231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "62189cd5-7ae4-49a4-9263-14eb6caaca1e",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-ECB",
              "fullTitle": "encrypt AES128-ECB",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "f7ee3e4b-977e-4142-9037-cca71b082413",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-ECB",
              "fullTitle": "encrypt 3DES-ECB",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "478ef699-8310-45b7-9b13-b7e52d81f36f",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-ECB",
              "fullTitle": "encrypt DES-ECB",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "4f0ec0d4-d974-4fce-92f3-7e9b27be81be",
              "parentUUID": "dd3a95c7-81fd-4da8-a826-7a7d533c1072",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7dcde1eb-ca47-4919-b4fd-171685f17bde",
              "title": "utils",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSubkey(32, 'AES256', 'sha256')\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey(32, '', 'sha512')\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "5bfde7ef-ad46-4061-97de-02df4e53807b",
                  "parentUUID": "7dcde1eb-ca47-4919-b4fd-171685f17bde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "symmetric key",
                  "fullTitle": "encrypt utils symmetric key",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSymmetricKey()\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))",
                  "err": {},
                  "uuid": "e428f374-433b-43cf-a790-b6c03ea3ddcb",
                  "parentUUID": "7dcde1eb-ca47-4919-b4fd-171685f17bde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bfde7ef-ad46-4061-97de-02df4e53807b",
                "e428f374-433b-43cf-a790-b6c03ea3ddcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "679525fb-e18a-4b75-a434-ab4ed20f12a4",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid key",
                  "fullTitle": "encrypt errors invalid key",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt('hello world', 'unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "af96774e-8358-48e2-ba74-98e2c46801da",
                  "parentUUID": "679525fb-e18a-4b75-a434-ab4ed20f12a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid message",
                  "fullTitle": "encrypt errors invalid message",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "12315468-af86-4d67-b204-0602c0bd0f5a",
                  "parentUUID": "679525fb-e18a-4b75-a434-ab4ed20f12a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid ciphertext",
                  "fullTitle": "encrypt errors invalid ciphertext",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.decrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7ec7e2c6-8e33-4acd-95b9-1af4a453e33c",
                  "parentUUID": "679525fb-e18a-4b75-a434-ab4ed20f12a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af96774e-8358-48e2-ba74-98e2c46801da",
                "12315468-af86-4d67-b204-0602c0bd0f5a",
                "7ec7e2c6-8e33-4acd-95b9-1af4a453e33c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 325,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "fe22b859-d713-47c3-ae71-0e4cc5c34bad",
            "b47bd5b8-7b29-47b6-a26b-65727f100f29",
            "c15184ae-2e09-4e91-a4ac-5c3b9eb7d9c5",
            "2f02927c-b354-4060-9e68-a088f3609d48",
            "0d083e93-9472-4c7b-bac4-18069985255c",
            "726c67ea-3c64-4d8b-b5b6-7c0f4316b2b9",
            "a67ca5ec-8dfd-493a-beb1-178fe9febe26",
            "62189cd5-7ae4-49a4-9263-14eb6caaca1e",
            "f7ee3e4b-977e-4142-9037-cca71b082413",
            "478ef699-8310-45b7-9b13-b7e52d81f36f",
            "4f0ec0d4-d974-4fce-92f3-7e9b27be81be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2507,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3fdda44a-aea4-438e-be16-b1602a0c42cd",
          "title": "derive/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "ffa09c55-fadc-4510-92b1-8834daf8a78c",
              "parentUUID": "3fdda44a-aea4-438e-be16-b1602a0c42cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "1eed7aae-54c2-41dc-a37d-22e0d6c8a74f",
              "parentUUID": "3fdda44a-aea4-438e-be16-b1602a0c42cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffa09c55-fadc-4510-92b1-8834daf8a78c",
            "1eed7aae-54c2-41dc-a37d-22e0d6c8a74f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "19cf0333-34c0-491f-baa0-c2af23a4c49c",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "6ca0aeae-d4d3-4946-8318-9d03308375df",
              "parentUUID": "19cf0333-34c0-491f-baa0-c2af23a4c49c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "50aa26c5-81b3-4804-adce-a0f7c86ef127",
              "parentUUID": "19cf0333-34c0-491f-baa0-c2af23a4c49c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ca0aeae-d4d3-4946-8318-9d03308375df",
            "50aa26c5-81b3-4804-adce-a0f7c86ef127"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "17bb7bc3-70fa-44e3-b045-c0c6df7d0c7e",
          "title": "derive/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 579,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "df6fdd8d-d4c9-4d52-b6ee-04f58202e861",
              "parentUUID": "17bb7bc3-70fa-44e3-b045-c0c6df7d0c7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('wrongpassword2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('wrongpassword2'),\n  password3: mfkdf.derive.factors.password('wrongpassword3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password2')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "af4d7d2e-5305-4596-87b9-6b9a616a2012",
              "parentUUID": "17bb7bc3-70fa-44e3-b045-c0c6df7d0c7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nmfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n}).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "7ee42adc-6c9f-452c-b1c7-3686d73d1498",
              "parentUUID": "17bb7bc3-70fa-44e3-b045-c0c6df7d0c7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e7de3c69-bf33-4908-b2e4-acc1861322eb",
              "title": "shares",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 441,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "1e0d4581-6159-4dec-bff0-af21a224f88d",
                  "parentUUID": "e7de3c69-bf33-4908-b2e4-acc1861322eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e0d4581-6159-4dec-bff0-af21a224f88d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "97eddcf9-b5cf-4568-9e05-d4e227591aac",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 119,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "545da4e1-909c-4ba5-b6d4-69b847687b9e",
                  "parentUUID": "97eddcf9-b5cf-4568-9e05-d4e227591aac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1a0e04b6-efd2-4c5b-9d88-30805e6264bc",
                  "parentUUID": "97eddcf9-b5cf-4568-9e05-d4e227591aac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "545da4e1-909c-4ba5-b6d4-69b847687b9e",
                "1a0e04b6-efd2-4c5b-9d88-30805e6264bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 234,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "df6fdd8d-d4c9-4d52-b6ee-04f58202e861",
            "af4d7d2e-5305-4596-87b9-6b9a616a2012",
            "7ee42adc-6c9f-452c-b1c7-3686d73d1498"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1262,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3bc632b0-8629-41c5-b213-511b453b4de6",
          "title": "examples",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "kdf",
              "fullTitle": "examples kdf",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup kdf configuration\nconst config = await mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000,\n  pbkdf2digest: 'sha256'\n}) // -> { type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } }\n// derive key\nconst key = await mfkdf.kdf('password', 'salt', 8, config)\nkey.toString('hex') // -> 0394a2ede332c9a1\nconfig.should.deep.equal({ type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } })\nkey.toString('hex').should.equal('0394a2ede332c9a1')",
              "err": {},
              "uuid": "15cace7e-946e-4912-834a-1ab43bddee04",
              "parentUUID": "3bc632b0-8629-41c5-b213-511b453b4de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "0827ebdb-6763-4d0b-afb4-1d3b7791d788",
              "parentUUID": "3bc632b0-8629-41c5-b213-511b453b4de6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "2be8cf09-133d-4c96-b99b-c63ca1ccd1da",
              "parentUUID": "3bc632b0-8629-41c5-b213-511b453b4de6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ed0e69f2-9960-4005-b088-2e621db222e7",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 224,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "fdcbd368-f698-4556-8417-cf55f70c4b5a",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n], { size: 8 })\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response = crypto.createHmac('sha1', secret).update(challenge).digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "48cad7d7-107c-47b8-a954-5ffc2c927337",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 1223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n], { size: 8 })\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "465b5421-f09d-45d9-8642-e5572838b6bd",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 225,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') })\n], { size: 8 })\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "5525d97b-6075-4fbc-8323-ac915296814a",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 8 })\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "bec7a663-0b28-4a57-85ea-a5f7399a9931",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n], { size: 8 })\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c643cedf-97c0-4108-875b-f16a2ab9df0d",
                  "parentUUID": "ed0e69f2-9960-4005-b088-2e621db222e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdcbd368-f698-4556-8417-cf55f70c4b5a",
                "48cad7d7-107c-47b8-a954-5ffc2c927337",
                "465b5421-f09d-45d9-8642-e5572838b6bd",
                "5525d97b-6075-4fbc-8323-ac915296814a",
                "bec7a663-0b28-4a57-85ea-a5f7399a9931",
                "c643cedf-97c0-4108-875b-f16a2ab9df0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2321,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "83fbb01b-f67b-44e6-ae3b-56cc7be0cb7e",
              "title": "secrets",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(Buffer.from('hello world'), 2, 3) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "b069656d-b5b5-4ed3-9a55-5f4e082ac0ed",
                  "parentUUID": "83fbb01b-f67b-44e6-ae3b-56cc7be0cb7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b069656d-b5b5-4ed3-9a55-5f4e082ac0ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
              "title": "policy",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "db6dd88a-0126-4d1a-9d2c-ce22463ca6a4",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "d61c803f-6d34-4003-8c95-c57de9b4e33d",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, ['passwordA', 'passwordC']) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, ['passwordB', 'passwordC']) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "50e6c7e7-ad0a-46be-a538-899355d2a5e3",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  ), { size: 8 }\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "f85dff06-ee9a-4365-9e0b-f852b9be5d47",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "83fca8ea-4903-44bb-96d0-64b4b42186ff",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "3904917f-b2fc-48f4-8d19-37f2e25548da",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "b9161fac-ef4a-4a06-acef-2bc0423eabe5",
                  "parentUUID": "046fc3eb-e026-49ba-aea5-52c3ca25b0cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db6dd88a-0126-4d1a-9d2c-ce22463ca6a4",
                "d61c803f-6d34-4003-8c95-c57de9b4e33d",
                "50e6c7e7-ad0a-46be-a538-899355d2a5e3",
                "f85dff06-ee9a-4365-9e0b-f852b9be5d47",
                "83fca8ea-4903-44bb-96d0-64b4b42186ff",
                "3904917f-b2fc-48f4-8d19-37f2e25548da",
                "b9161fac-ef4a-4a06-acef-2bc0423eabe5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
              "title": "reconstitution",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "30775b85-c11a-4dfb-8dd0-c00a95925c5a",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "d8ea8f1b-3884-4f14-ac84-c1785a1685c1",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "f1f32fbb-ca6a-4b59-a2ac-7b10726719d5",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "cc8849ae-7353-4eb7-9472-4436ccd06b4a",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "9504c3f9-b6a4-4f5f-8547-ded6f9d14113",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3e84fbd6-7ae7-4b81-b3ec-98fb157d843f",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ac28cb53-e0fa-49eb-a397-87a4c1dcd62e",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "14bf643a-0037-4aca-bcab-886d6ca73243",
                  "parentUUID": "b83ecfdf-e9a3-43e5-9c30-01ea58255d8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30775b85-c11a-4dfb-8dd0-c00a95925c5a",
                "d8ea8f1b-3884-4f14-ac84-c1785a1685c1",
                "f1f32fbb-ca6a-4b59-a2ac-7b10726719d5",
                "cc8849ae-7353-4eb7-9472-4436ccd06b4a",
                "9504c3f9-b6a4-4f5f-8547-ded6f9d14113",
                "3e84fbd6-7ae7-4b81-b3ec-98fb157d843f",
                "ac28cb53-e0fa-49eb-a397-87a4c1dcd62e",
                "14bf643a-0037-4aca-bcab-886d6ca73243"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1723,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d8dc5581-a649-410b-8428-083a52b5cf18",
              "title": "persistence",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 211,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "4f061fe9-eed3-4e08-90fa-ba1cde6b52ec",
                  "parentUUID": "d8dc5581-a649-410b-8428-083a52b5cf18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f061fe9-eed3-4e08-90fa-ba1cde6b52ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "e94ae8e8-1821-4184-a0a1-b4a5fc949418",
              "title": "envelope",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add/get secret",
                  "fullTitle": "examples envelope add/get secret",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "1f2b3016-6792-4271-abd6-9af9b30eb955",
                  "parentUUID": "e94ae8e8-1821-4184-a0a1-b4a5fc949418",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/check/remove secret",
                  "fullTitle": "examples envelope add/check/remove secret",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// check secret\nconst check1 = derived.hasEnvelopedSecret('mySecret') // -> true\n// remove secret\nderived.removeEnvelopedSecret('mySecret')\n// check secret\nconst check2 = derived.hasEnvelopedSecret('mySecret') // -> false\ncheck1.should.be.true\ncheck2.should.be.false",
                  "err": {},
                  "uuid": "8623e35c-ce5e-49cb-a836-3ee2e3a2cf64",
                  "parentUUID": "e94ae8e8-1821-4184-a0a1-b4a5fc949418",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/get key",
                  "fullTitle": "examples envelope add/get key",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
                  "err": {},
                  "uuid": "25c247ac-3c7a-49d0-96b5-05e8c30e4b90",
                  "parentUUID": "e94ae8e8-1821-4184-a0a1-b4a5fc949418",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f2b3016-6792-4271-abd6-9af9b30eb955",
                "8623e35c-ce5e-49cb-a836-3ee2e3a2cf64",
                "25c247ac-3c7a-49d0-96b5-05e8c30e4b90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 642,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "729013e2-edf4-452c-95f6-cfd63126d498",
              "title": "crypto",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte sub-key for \"eth\" using hkdf/sha256\nconst subkey = await key.getSubkey(16, 'eth', 'sha256')\nsubkey.toString('hex') // -> 54ad9e5acbc1c33b08a15dd79126e9c9",
                  "err": {},
                  "uuid": "468a0568-1244-4b75-9f3c-b2640a42788d",
                  "parentUUID": "729013e2-edf4-452c-95f6-cfd63126d498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getSymmetricKey",
                  "fullTitle": "examples crypto getSymmetricKey",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte AES128 sub-key\nconst subkey = await key.getSymmetricKey('aes128')\nsubkey.toString('hex') // -> c985454e008e5ecc695e865d339cb2be",
                  "err": {},
                  "uuid": "541d2859-51f7-411c-b771-5609103df841",
                  "parentUUID": "729013e2-edf4-452c-95f6-cfd63126d498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getAsymmetricKeyPair",
                  "fullTitle": "examples crypto getAsymmetricKeyPair",
                  "timedOut": false,
                  "duration": 228,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte RSA1024 sub-key\nconst subkey = await key.getAsymmetricKeyPair('rsa1024') // -> { privateKey: Uint8Array, publicKey: Uint8Array }\nsubkey.should.be.a('object')",
                  "err": {},
                  "uuid": "97cba834-c5f9-4420-89a0-fd4a9638b85b",
                  "parentUUID": "729013e2-edf4-452c-95f6-cfd63126d498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sign/verify",
                  "fullTitle": "examples crypto sign/verify",
                  "timedOut": false,
                  "duration": 277,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// sign message using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature using RSA-1024\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "f3ef94ae-ade4-445d-a372-f65b02bf4993",
                  "parentUUID": "729013e2-edf4-452c-95f6-cfd63126d498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "encrypt/decrypt",
                  "fullTitle": "examples crypto encrypt/decrypt",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// encrypt message using 3DES\nconst encrypted = await key.encrypt('hello world', '3des')\n// decrypt message using 3DES\nconst decrypted = await key.decrypt(encrypted, '3des')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "a4888fc8-b062-4efe-9d40-8841e200bbee",
                  "parentUUID": "729013e2-edf4-452c-95f6-cfd63126d498",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "468a0568-1244-4b75-9f3c-b2640a42788d",
                "541d2859-51f7-411c-b771-5609103df841",
                "97cba834-c5f9-4420-89a0-fd4a9638b85b",
                "f3ef94ae-ade4-445d-a372-f65b02bf4993",
                "a4888fc8-b062-4efe-9d40-8841e200bbee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 816,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7ada797a-1a28-4acd-a496-f3561191e143",
              "title": "auth",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "60887153-eeeb-4989-800f-625069fbf46a",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 458,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "9e2897ab-96fc-427c-b5cc-18602ef310bd",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "fc4887d3-b91b-442b-b535-20845108427a",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "a41500cd-2f79-4d5b-8627-51ff5031980f",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "687eb1ba-5594-47bc-9e34-f1899c370697",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "aac5627b-d217-44d7-b999-e3a1b3adeff9",
                  "parentUUID": "7ada797a-1a28-4acd-a496-f3561191e143",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60887153-eeeb-4989-800f-625069fbf46a",
                "9e2897ab-96fc-427c-b5cc-18602ef310bd",
                "fc4887d3-b91b-442b-b535-20845108427a",
                "a41500cd-2f79-4d5b-8627-51ff5031980f",
                "687eb1ba-5594-47bc-9e34-f1899c370697",
                "aac5627b-d217-44d7-b999-e3a1b3adeff9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "15cace7e-946e-4912-834a-1ab43bddee04",
            "0827ebdb-6763-4d0b-afb4-1d3b7791d788",
            "2be8cf09-133d-4c96-b99b-c63ca1ccd1da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5f5b99c4-d13c-42f1-81f4-20b825a455c4",
          "title": "site",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\site.js",
          "file": "\\test\\examples\\site.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Go beyond passwords",
              "fullTitle": "site Go beyond passwords",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify((\n  await mfkdf.setup.key([\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n    await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n  ], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n).policy)\nconst derivedKey = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  password: mfkdf.derive.factors.password('Tr0ub4dour'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  recovery: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderivedKey.should.be.a('object')",
              "err": {},
              "uuid": "aa9be9a2-4972-4a7b-8a9e-5e62b1eef29f",
              "parentUUID": "5f5b99c4-d13c-42f1-81f4-20b825a455c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Increased key entropy",
              "fullTitle": "site Increased key entropy",
              "timedOut": false,
              "duration": 210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Math.floor((await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n])).entropyBits.real).should.equal(16)\nMath.floor((await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.hmacsha1()\n])).entropyBits.real).should.equal(196)",
              "err": {},
              "uuid": "1265c568-9554-4d4e-bed9-27d93470a850",
              "parentUUID": "5f5b99c4-d13c-42f1-81f4-20b825a455c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enforce advanced policies",
              "fullTitle": "site Enforce advanced policies",
              "timedOut": false,
              "duration": 728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const policyBasedKey = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode' }),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('Tr0ub4dour'),\n      await mfkdf.setup.factors.totp()\n    )\n  )\n)\npolicyBasedKey.should.be.a('object')",
              "err": {},
              "uuid": "b00b1c76-34a3-4c95-95c5-77091fa209be",
              "parentUUID": "5f5b99c4-d13c-42f1-81f4-20b825a455c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Self-service factor recovery",
              "fullTitle": "site Self-service factor recovery",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keyPolicy = JSON.stringify((\n  await mfkdf.setup.key([\n    await mfkdf.setup.factors.password('password'),\n    await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n    await mfkdf.setup.factors.uuid({ id: 'recoveryCode', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n  ], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n).policy)\nconst key = await mfkdf.derive.key(JSON.parse(keyPolicy), {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  recoveryCode: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nawait key.recoverFactor(\n  await mfkdf.setup.factors.password('myNewPassword', { id: 'password' })\n) // modify key to use new password factor",
              "err": {},
              "uuid": "14a7acf7-b82f-4ee0-9e0d-b73305c6a8df",
              "parentUUID": "5f5b99c4-d13c-42f1-81f4-20b825a455c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa9be9a2-4972-4a7b-8a9e-5e62b1eef29f",
            "1265c568-9554-4d4e-bed9-27d93470a850",
            "b00b1c76-34a3-4c95-95c5-77091fa209be",
            "14a7acf7-b82f-4ee0-9e0d-b73305c6a8df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 959,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "44450069-93c4-4e58-827d-7f3eec59b263",
          "title": "tutorials",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Auth",
              "fullTitle": "tutorials Auth",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "32be4205-e23b-45d3-873e-df2350e89047",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloepd Key",
              "fullTitle": "tutorials Enveloepd Key",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
              "err": {},
              "uuid": "4ba8cf63-62a5-4ffa-89b1-8109f4693478",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloped Secret",
              "fullTitle": "tutorials Enveloped Secret",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
              "err": {},
              "uuid": "c81fccf8-9a2e-4b43-ba6e-53d7ae55d238",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "b61dd077-b478-4c0b-9f05-0a28996aa248",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signing & Verification",
              "fullTitle": "tutorials Signing & Verification",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// sign message with derived key using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
              "err": {},
              "uuid": "13546116-392e-4673-af0d-6ec63eeabe3e",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Encryption & Decryption",
              "fullTitle": "tutorials Encryption & Decryption",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// encrypt secret with derived key using AES-256\nconst encrypted = await key.encrypt('hello world', 'aes256')\n// ... later, decrypt secret with derived key\nconst decrypted = await key.decrypt(encrypted, 'aes256')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
              "err": {},
              "uuid": "e6ee4c7a-1753-42f1-8bac-fbd32deb7d79",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// reconstitute key to change password\nawait setup.recoverFactor(await mfkdf.setup.factors.password('newPassword'))\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771",
              "err": {},
              "uuid": "ad55aed1-983d-41df-aa31-65bab5eb759f",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\nsetup.key.toString('hex') // -> 01d0c7236adf2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "4148b11b-4fa3-4150-8d10-a08609f86cfb",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "0c32f6db-f595-412d-8f3d-556323998dd6",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16, threshold: 2 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "e7516536-03c0-4e64-aceb-6a254017e09e",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n], { size: 32 })\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n], { size: 32 })\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n], { size: 32 })\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32 })\nconst threshold = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32, threshold: 2 })\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "d0be41b3-7373-431a-bf03-28f5e0309df9",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "1f7c2950-22a7-4484-a825-c5906aa3d6e3",
              "parentUUID": "44450069-93c4-4e58-827d-7f3eec59b263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32be4205-e23b-45d3-873e-df2350e89047",
            "4ba8cf63-62a5-4ffa-89b1-8109f4693478",
            "c81fccf8-9a2e-4b43-ba6e-53d7ae55d238",
            "b61dd077-b478-4c0b-9f05-0a28996aa248",
            "13546116-392e-4673-af0d-6ec63eeabe3e",
            "e6ee4c7a-1753-42f1-8bac-fbd32deb7d79",
            "ad55aed1-983d-41df-aa31-65bab5eb759f",
            "4148b11b-4fa3-4150-8d10-a08609f86cfb",
            "0c32f6db-f595-412d-8f3d-556323998dd6",
            "e7516536-03c0-4e64-aceb-6a254017e09e",
            "d0be41b3-7373-431a-bf03-28f5e0309df9",
            "1f7c2950-22a7-4484-a825-c5906aa3d6e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2789,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c91e259d-4552-47e5-b8c1-e46bd78d440e",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key)\n  .update(challenge)\n  .digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "f450c02a-8b63-49df-bdc2-6cb5a3e80cd5",
              "parentUUID": "c91e259d-4552-47e5-b8c1-e46bd78d440e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response1 = crypto.createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(derive1.policy.factors[0].params.challenge, 'hex')\nconst response2 = crypto.createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "b9afee67-92da-4ae7-8892-3377e6d941a3",
              "parentUUID": "c91e259d-4552-47e5-b8c1-e46bd78d440e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = '{\"$schema\":\"https://mfkdf.com/schema/v1.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"kdf\":{\"type\":\"argon2id\",\"params\":{\"rounds\":2,\"memory\":24576,\"parallelism\":1}},\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"f8d33204be0436f2629d5173e9bd3fc1953cf982\"}}]}'\nconst derive = await mfkdf.derive.key(JSON.parse(setup), {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex'))\n})\nderive.key.toString('hex').should.equal('ca76d2b456be4e40ba6ef65a68fbfc71bf27a0ca3e0fa4481a2ddf29fb6b65d9')",
              "err": {},
              "uuid": "948c0b04-a622-48ea-9bc9-81fe1a64f633",
              "parentUUID": "c91e259d-4552-47e5-b8c1-e46bd78d440e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5e62fa23-f8be-4e3c-9450-da5e21162273",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d3ff5f80-d2d2-475d-8b41-6c250b39bbad",
                  "parentUUID": "5e62fa23-f8be-4e3c-9450-da5e21162273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "30997135-7762-4c13-b387-84c44820fb64",
                  "parentUUID": "5e62fa23-f8be-4e3c-9450-da5e21162273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8e3e49f8-7748-41c3-b154-cc28d74d6f8b",
                  "parentUUID": "5e62fa23-f8be-4e3c-9450-da5e21162273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: Buffer.from('12345') }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "36bc7870-6cfc-4f62-98d9-5c53792a5797",
                  "parentUUID": "5e62fa23-f8be-4e3c-9450-da5e21162273",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "a13d7cbb-830b-4cbb-a393-97574a8f945b",
                  "parentUUID": "5e62fa23-f8be-4e3c-9450-da5e21162273",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3ff5f80-d2d2-475d-8b41-6c250b39bbad",
                "30997135-7762-4c13-b387-84c44820fb64",
                "8e3e49f8-7748-41c3-b154-cc28d74d6f8b",
                "36bc7870-6cfc-4f62-98d9-5c53792a5797",
                "a13d7cbb-830b-4cbb-a393-97574a8f945b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "f450c02a-8b63-49df-bdc2-6cb5a3e80cd5",
            "b9afee67-92da-4ae7-8892-3377e6d941a3",
            "948c0b04-a622-48ea-9bc9-81fe1a64f633"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 435,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d5db33f2-21b9-4a13-aa89-58fc5ee4c543",
          "title": "factors/hotp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('hello world')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(891649)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(795484)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "90a2eb6b-95de-44de-85fa-923a8d9825e8",
              "parentUUID": "d5db33f2-21b9-4a13-aa89-58fc5ee4c543",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp()\n])",
              "err": {},
              "uuid": "cbce6fca-45c6-4020-9b66-af8193a37f4f",
              "parentUUID": "d5db33f2-21b9-4a13-aa89-58fc5ee4c543",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "155b381d-166b-4741-9f51-173ef98d994e",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "aebd7bc1-bc54-49a0-9c9f-86bb5429cd44",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "5ad4ff57-9751-4cce-9dbd-0f37f7c271c8",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e1989c1f-abde-4073-b8d9-70c3d6a8b6fd",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "cb8c1813-f81a-472a-b11d-e02e403a5f71",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f692b7e5-52c3-40df-9e10-d5cc702351c5",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5f532a87-e27a-444e-a70b-ec3ba0e2a5e7",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "227aa376-e147-4b97-bd23-2be46dc9a495",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9cbcd802-1f08-434e-8a2b-01245f2bf49c",
                  "parentUUID": "155b381d-166b-4741-9f51-173ef98d994e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aebd7bc1-bc54-49a0-9c9f-86bb5429cd44",
                "5ad4ff57-9751-4cce-9dbd-0f37f7c271c8",
                "e1989c1f-abde-4073-b8d9-70c3d6a8b6fd",
                "cb8c1813-f81a-472a-b11d-e02e403a5f71",
                "f692b7e5-52c3-40df-9e10-d5cc702351c5",
                "5f532a87-e27a-444e-a70b-ec3ba0e2a5e7",
                "227aa376-e147-4b97-bd23-2be46dc9a495",
                "9cbcd802-1f08-434e-8a2b-01245f2bf49c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "90a2eb6b-95de-44de-85fa-923a8d9825e8",
            "cbce6fca-45c6-4020-9b66-af8193a37f4f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "573887da-e960-496a-baac-f960811ef7ee",
          "title": "persistence",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "dd6219d6-6004-4d48-a697-2080bbfcbb01",
              "parentUUID": "573887da-e960-496a-baac-f960811ef7ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "afa4e967-4e82-46c1-a53e-6218b99de554",
              "parentUUID": "573887da-e960-496a-baac-f960811ef7ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd6219d6-6004-4d48-a697-2080bbfcbb01",
            "afa4e967-4e82-46c1-a53e-6218b99de554"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6c296441-0631-4816-b54a-5c61ef8230b2",
          "title": "factors/stack",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "4f7c6c99-18ca-4fa6-a6b2-ae5647c9db4e",
              "parentUUID": "6c296441-0631-4816-b54a-5c61ef8230b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "d0b38127-0f70-478b-9bd9-e0371db9e6ae",
              "parentUUID": "6c296441-0631-4816-b54a-5c61ef8230b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ], { id: 'stack1' }),\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ], { id: 'stack2' })\n], { threshold: 1 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "31620fc7-19cd-4a60-97e5-235c1acf4aee",
              "parentUUID": "6c296441-0631-4816-b54a-5c61ef8230b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f7c6c99-18ca-4fa6-a6b2-ae5647c9db4e",
            "d0b38127-0f70-478b-9bd9-e0371db9e6ae",
            "31620fc7-19cd-4a60-97e5-235c1acf4aee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 348,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b7e97ef5-de59-4f7e-af8c-88143aa4f566",
          "title": "factors/totp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 1120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])\nconst code = parseInt(speakeasy.totp({\n  secret: setup.outputs.totp.secret.toString('hex'),\n  encoding: 'hex',\n  step: setup.outputs.totp.period,\n  algorithm: setup.outputs.totp.algorithm,\n  digits: setup.outputs.totp.digits\n}))\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "44339da8-32f6-44e1-9ca1-dedc1632ad64",
              "parentUUID": "b7e97ef5-de59-4f7e-af8c-88143aa4f566",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 1095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(99922, { time: 1650430991083 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(398884, { time: 1650431018392 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "561ddd04-3e0a-4b20-97e9-fe028a4e4256",
              "parentUUID": "b7e97ef5-de59-4f7e-af8c-88143aa4f566",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])",
              "err": {},
              "uuid": "2ef52eba-fb0a-4de1-8887-5527469906ce",
              "parentUUID": "b7e97ef5-de59-4f7e-af8c-88143aa4f566",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d27085cb-924f-4a25-a796-9475e3a19e57",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "f51baa36-fccd-4417-9b05-3b64301396a8",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 751,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nmfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1750430943604 })\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "27ce5fb8-1d38-489e-b3e9-fa8f958b64ae",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "87292d00-b8e7-4d8b-81ec-71f2d9b7d76b",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "b8055af2-015e-4801-89b7-aa95d15966e3",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2cd5bbc6-5668-4022-8f5c-aef11a4bc30e",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7732b2df-0aa6-4293-bedd-3ebe564cede7",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "c42687c8-0cd1-4fc7-bbfb-fc0291d65689",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fa14ed94-7ec0-4883-9677-c6f97a32da38",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "aa68da71-4eb5-4045-889f-ed130d905a4c",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "39890d9d-405e-4340-9d85-2e681fe771ff",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2daaf976-a05b-4e69-8048-b18fee29cd44",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "1ee36176-c689-4cb2-b7ae-001c39bbc2d4",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "478072c7-9926-4e1d-b542-32dc65869421",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f06ecb54-bc41-4b2f-85c1-c2f27efe8ea3",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ff6c895c-3f6e-46dc-bb92-8bfabed2f27e",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "55038f58-494a-4b74-a600-e0dda449acfa",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "53430b5c-77a5-4c4a-b126-84cde400a216",
                  "parentUUID": "d27085cb-924f-4a25-a796-9475e3a19e57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f51baa36-fccd-4417-9b05-3b64301396a8",
                "27ce5fb8-1d38-489e-b3e9-fa8f958b64ae",
                "87292d00-b8e7-4d8b-81ec-71f2d9b7d76b",
                "b8055af2-015e-4801-89b7-aa95d15966e3",
                "2cd5bbc6-5668-4022-8f5c-aef11a4bc30e",
                "7732b2df-0aa6-4293-bedd-3ebe564cede7",
                "c42687c8-0cd1-4fc7-bbfb-fc0291d65689",
                "fa14ed94-7ec0-4883-9677-c6f97a32da38",
                "aa68da71-4eb5-4045-889f-ed130d905a4c",
                "39890d9d-405e-4340-9d85-2e681fe771ff",
                "2daaf976-a05b-4e69-8048-b18fee29cd44",
                "1ee36176-c689-4cb2-b7ae-001c39bbc2d4",
                "478072c7-9926-4e1d-b542-32dc65869421",
                "f06ecb54-bc41-4b2f-85c1-c2f27efe8ea3",
                "ff6c895c-3f6e-46dc-bb92-8bfabed2f27e",
                "55038f58-494a-4b74-a600-e0dda449acfa",
                "53430b5c-77a5-4c4a-b126-84cde400a216"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 753,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "44339da8-32f6-44e1-9ca1-dedc1632ad64",
            "561ddd04-3e0a-4b20-97e9-fe028a4e4256",
            "2ef52eba-fb0a-4de1-8887-5527469906ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2949,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3310fff5-b72f-4e55-ac44-f5b394e4b508",
          "title": "factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 550,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "01cb8998-9bcf-4179-9735-788506b73f6b",
              "parentUUID": "3310fff5-b72f-4e55-ac44-f5b394e4b508",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "446de15e-9e97-4a62-8cab-9d620bf024e2",
              "parentUUID": "3310fff5-b72f-4e55-ac44-f5b394e4b508",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "01cb8998-9bcf-4179-9735-788506b73f6b",
            "446de15e-9e97-4a62-8cab-9d620bf024e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1092,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "acea72ad-a223-4dbb-bfcf-e9efc5cf22f0",
          "title": "authentication",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
          "file": "\\test\\features\\authentication.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getKey/auth",
              "fullTitle": "authentication getKey/auth",
              "timedOut": false,
              "duration": 12873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nlet authKey\nlet encKey\nauthKey = await key.getSymmetricKey('des', true)\nencKey = await key.getSymmetricKey('des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('3des', true)\nencKey = await key.getSymmetricKey('3des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes128', true)\nencKey = await key.getSymmetricKey('aes128', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes192', true)\nencKey = await key.getSymmetricKey('aes192', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes256', true)\nencKey = await key.getSymmetricKey('aes256', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('ed25519', true)\nencKey = await key.getAsymmetricKeyPair('ed25519', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa1024', true)\nencKey = await key.getAsymmetricKeyPair('rsa1024', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa2048', true)\nencKey = await key.getAsymmetricKeyPair('rsa2048', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa3072', true)\nencKey = await key.getAsymmetricKeyPair('rsa3072', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))",
              "err": {},
              "uuid": "b261d22f-ead2-46b6-8017-3b957d8b003b",
              "parentUUID": "acea72ad-a223-4dbb-bfcf-e9efc5cf22f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8c1a5250-e658-441a-901d-51d076a256e5",
              "title": "valid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "145b5819-c9de-4a2d-8a47-30e37a782ad6",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "cf0bdb6b-46d6-4895-a7e1-a58c04c0ebae",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "80ab41a2-4cf0-4ff6-bcc0-1b61997435c7",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "ee2966e8-f773-40ff-8330-b076e230bcf2",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "5573134a-a0d3-44f3-a02f-373799c1d1c5",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "940e2bcf-ef44-4116-a92c-025e5aa8a20d",
                  "parentUUID": "8c1a5250-e658-441a-901d-51d076a256e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "145b5819-c9de-4a2d-8a47-30e37a782ad6",
                "cf0bdb6b-46d6-4895-a7e1-a58c04c0ebae",
                "80ab41a2-4cf0-4ff6-bcc0-1b61997435c7",
                "ee2966e8-f773-40ff-8330-b076e230bcf2",
                "5573134a-a0d3-44f3-a02f-373799c1d1c5",
                "940e2bcf-ef44-4116-a92c-025e5aa8a20d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 895,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "cb0c40f3-cdb8-4089-9dd9-ed72afec3bd9",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 329,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "bfdf85a5-3aba-41f9-9c84-75517f8acc4e",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "3f60e2a4-eb79-40dd-bf85-f053cdbb5ee4",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 209,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "f5db2c97-6020-4fa1-b1cd-e8ecfba3e899",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "37239c02-1dd6-4b37-9b91-61834c927ef2",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "c27ac00d-3cb8-4242-bb53-7ac30e461e58",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric/window",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "99a474b1-30ef-4b78-bbae-53b28e6236d2",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric/window",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "5054bd43-6701-4a6e-81ea-040081edfa2d",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF/window",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "5e3ca8dd-ab71-4439-ae10-9f44ab36c36b",
                  "parentUUID": "df20e7a2-8016-4de6-b3c5-8617ce08aa5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb0c40f3-cdb8-4089-9dd9-ed72afec3bd9",
                "bfdf85a5-3aba-41f9-9c84-75517f8acc4e",
                "3f60e2a4-eb79-40dd-bf85-f053cdbb5ee4",
                "f5db2c97-6020-4fa1-b1cd-e8ecfba3e899",
                "37239c02-1dd6-4b37-9b91-61834c927ef2",
                "c27ac00d-3cb8-4242-bb53-7ac30e461e58",
                "99a474b1-30ef-4b78-bbae-53b28e6236d2",
                "5054bd43-6701-4a6e-81ea-040081edfa2d",
                "5e3ca8dd-ab71-4439-ae10-9f44ab36c36b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1989,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "b261d22f-ead2-46b6-8017-3b957d8b003b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12873,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
          "title": "entropy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "ba0272cb-b7f7-410b-9dc0-59e5d4725d10",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "bed31747-c92f-454e-b70e-43ed981aff93",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "342e0464-fe4b-4f8d-981c-185c24beee78",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "a86f24c9-709e-4409-b1ea-be46c5cecf44",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "37366e12-4dec-4921-bd90-a95a44b10ff6",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "9887e33e-0327-4f1a-8d92-cc35601ae629",
              "parentUUID": "571bb42c-5797-44b4-8b3e-133bb1b3aeae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba0272cb-b7f7-410b-9dc0-59e5d4725d10",
            "bed31747-c92f-454e-b70e-43ed981aff93",
            "342e0464-fe4b-4f8d-981c-185c24beee78",
            "a86f24c9-709e-4409-b1ea-be46c5cecf44",
            "37366e12-4dec-4921-bd90-a95a44b10ff6",
            "9887e33e-0327-4f1a-8d92-cc35601ae629"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1950,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5cbec5b8-bd6e-45b0-9033-fdb85a9dc11b",
          "title": "enveloping",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
          "file": "\\test\\features\\envelope.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "secrets",
              "fullTitle": "enveloping secrets",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nawait setup.addEnvelopedSecret('key2', input)\nawait setup.addEnvelopedSecret('key3', input)\nawait setup.removeEnvelopedSecret('key2')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst output = await derive.getEnvelopedSecret('key')\noutput.toString('hex').should.equal(input.toString('hex'))",
              "err": {},
              "uuid": "20718c7c-03d6-4db4-a0af-d57772b63935",
              "parentUUID": "5cbec5b8-bd6e-45b0-9033-fdb85a9dc11b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys",
              "fullTitle": "enveloping keys",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nawait setup.addEnvelopedKey('key1')\nawait setup.addEnvelopedKey('key2', 'rsa1024')\nawait setup.addEnvelopedKey('key3', 'rsa2048')\nawait setup.addEnvelopedKey('key4', 'ed25519')\nconst key11 = await setup.getEnvelopedKey('key1')\nconst key12 = await setup.getEnvelopedKey('key2')\nconst key13 = await setup.getEnvelopedKey('key3')\nconst key14 = await setup.getEnvelopedKey('key4')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst key21 = await derive.getEnvelopedKey('key1')\nconst key22 = await derive.getEnvelopedKey('key2')\nconst key23 = await derive.getEnvelopedKey('key3')\nconst key24 = await derive.getEnvelopedKey('key4')\nkey11.export({ format: 'jwk' }).should.deep.equal(key21.export({ format: 'jwk' }))\nkey12.export({ format: 'jwk' }).should.deep.equal(key22.export({ format: 'jwk' }))\nkey13.export({ format: 'jwk' }).should.deep.equal(key23.export({ format: 'jwk' }))\nkey14.export({ format: 'jwk' }).should.deep.equal(key24.export({ format: 'jwk' }))",
              "err": {},
              "uuid": "148fb7d4-a5e7-4ac3-8d10-f35a45c78fb4",
              "parentUUID": "5cbec5b8-bd6e-45b0-9033-fdb85a9dc11b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bd746973-a75d-401d-ade4-f6c854f70f8c",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
              "file": "\\test\\features\\envelope.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "8903efbb-112b-4308-acae-44fc14976efd",
                  "title": "addEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret(12345, input).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "1b9f44d6-f37d-4f70-9a11-8e7f55db8300",
                      "parentUUID": "8903efbb-112b-4308-acae-44fc14976efd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "value/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret value/type",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedSecret('id', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "7c555915-7629-4076-9390-3fbb88d5e13b",
                      "parentUUID": "8903efbb-112b-4308-acae-44fc14976efd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret type/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret('id', input, 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "a86374f6-c0a8-4e6d-a71c-471d1a12e75e",
                      "parentUUID": "8903efbb-112b-4308-acae-44fc14976efd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/unique",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/unique",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nsetup.addEnvelopedSecret('key', input).should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "13cd8215-686b-42d0-a685-efd6ba93610a",
                      "parentUUID": "8903efbb-112b-4308-acae-44fc14976efd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1b9f44d6-f37d-4f70-9a11-8e7f55db8300",
                    "7c555915-7629-4076-9390-3fbb88d5e13b",
                    "a86374f6-c0a8-4e6d-a71c-471d1a12e75e",
                    "13cd8215-686b-42d0-a685-efd6ba93610a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 430,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3a32f6bc-96e4-4e85-94bc-b70a430237a0",
                  "title": "removeEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "7bc432e4-285b-4770-afc2-fe87e519301b",
                      "parentUUID": "3a32f6bc-96e4-4e85-94bc-b70a430237a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret('12345')\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "2836146b-295c-4520-9d11-d5c7b9ce0529",
                      "parentUUID": "3a32f6bc-96e4-4e85-94bc-b70a430237a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7bc432e4-285b-4770-afc2-fe87e519301b",
                    "2836146b-295c-4520-9d11-d5c7b9ce0529"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 213,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "dbcbe700-c5ef-4bd6-80c0-400a86998a49",
                  "title": "addEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "1bbc2a8b-2b00-408b-91de-55e518fbd4e2",
                      "parentUUID": "dbcbe700-c5ef-4bd6-80c0-400a86998a49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedKey type/type",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "1537eef9-b6c7-4048-9057-0112d0880278",
                      "parentUUID": "dbcbe700-c5ef-4bd6-80c0-400a86998a49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/range",
                      "fullTitle": "enveloping errors addEnvelopedKey type/range",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', '12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "29a69736-cb02-4a3a-aa1c-3b24b3df87db",
                      "parentUUID": "dbcbe700-c5ef-4bd6-80c0-400a86998a49",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1bbc2a8b-2b00-408b-91de-55e518fbd4e2",
                    "1537eef9-b6c7-4048-9057-0112d0880278",
                    "29a69736-cb02-4a3a-aa1c-3b24b3df87db"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 322,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b6ca9365-80eb-45aa-bf9f-bde9b638574d",
                  "title": "getEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "7d92ac10-b473-49dc-b793-f51b54e7fd68",
                      "parentUUID": "b6ca9365-80eb-45aa-bf9f-bde9b638574d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret('12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "8682aa51-3771-4093-90fd-a58ee17d53c0",
                      "parentUUID": "b6ca9365-80eb-45aa-bf9f-bde9b638574d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7d92ac10-b473-49dc-b793-f51b54e7fd68",
                    "8682aa51-3771-4093-90fd-a58ee17d53c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 216,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e7d9d0f1-5c00-490b-8ce0-fbef751ac91e",
                  "title": "getEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 106,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "5aeda4c5-11f2-4369-8cf9-ca327cc5f736",
                      "parentUUID": "e7d9d0f1-5c00-490b-8ce0-fbef751ac91e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5aeda4c5-11f2-4369-8cf9-ca327cc5f736"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 106,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9393f623-e0ba-4c44-ba1c-db091501ea67",
                  "title": "hasEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors hasEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.hasEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "2ace3454-237b-4d9c-b7df-28b5ada6feae",
                      "parentUUID": "9393f623-e0ba-4c44-ba1c-db091501ea67",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2ace3454-237b-4d9c-b7df-28b5ada6feae"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 108,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "20718c7c-03d6-4db4-a0af-d57772b63935",
            "148fb7d4-a5e7-4ac3-8d10-f35a45c78fb4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "414304be-ee79-475e-815d-57da04e7c869",
          "title": "kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\kdf.js",
          "file": "\\test\\features\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "types",
              "fullTitle": "kdf types",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pbkdf2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst bcrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst scrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nconst argon2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nBuffer.isBuffer(pbkdf2).should.be.true\nBuffer.isBuffer(bcrypt).should.be.true\nBuffer.isBuffer(scrypt).should.be.true\nBuffer.isBuffer(argon2).should.be.true",
              "err": {},
              "uuid": "dead1f3c-7802-4359-a5ae-cb313b34a594",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha1",
              "fullTitle": "kdf pbkdf2/sha1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 16, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 25555,\n    digest: 'sha1'\n  }\n})\nBuffer.isBuffer(key).should.be.true\nkey.toString('hex').should.equal('8ee4a527b20aa8feeb78d70447d84e20')",
              "err": {},
              "uuid": "1a1b04bc-16a8-47bd-98ae-7cef9ea2a4f8",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha512",
              "fullTitle": "kdf pbkdf2/sha512",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secret', 'salt', 64, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha512'\n  }\n})\nkey.toString('hex').should.equal('3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae')",
              "err": {},
              "uuid": "6d4dbbe6-ecb7-48e0-96b8-cf7938dbc51a",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/default",
              "fullTitle": "kdf pbkdf2/default",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('test', '', 32, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst key2 = await mfkdf.kdf('test', '', 32, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "aa8de8a8-63b5-4f20-b4f7-1994f0f769fc",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/same",
              "fullTitle": "kdf bcrypt/same",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "7915861e-02da-47b1-abbb-a5912262557c",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/inputdiff",
              "fullTitle": "kdf bcrypt/inputdiff",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password2', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "0660b000-2fe3-4bf3-9b51-94cab6696079",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/saltdiff",
              "fullTitle": "kdf bcrypt/saltdiff",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "d25983b3-d45d-4d98-9d2e-048c58d5331b",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/rounddiff",
              "fullTitle": "kdf bcrypt/rounddiff",
              "timedOut": false,
              "duration": 172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, { type: 'bcrypt', params: { rounds: 10 } })\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, { type: 'bcrypt', params: { rounds: 11 } })\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "f21c9fd8-069b-4585-b26f-66fb2a9dcc65",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/length",
              "fullTitle": "kdf bcrypt/length",
              "timedOut": false,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key16 = await mfkdf.kdf('password', 'salt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key16).should.equal(16)\nconst key32 = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key32).should.equal(32)\nconst key64 = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key64).should.equal(64)",
              "err": {},
              "uuid": "61523c8e-86ff-49eb-9ab7-632be331a8a0",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/known",
              "fullTitle": "kdf bcrypt/known",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey.toString('hex').should.equal('cb36d3d02d502acdf10dfc2d022bf3c024f16a368ba2df4456fbf97291f64334')",
              "err": {},
              "uuid": "250e81d9-d34e-41fc-a627-46c58ce3d6e7",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/fast",
              "fullTitle": "kdf scrypt/fast",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 16384, scryptblocksize: 8, scryptparallelism: 1 }))\nkey.toString('hex').should.equal('745731af4484f323968969eda289aeee005b5903ac561e64a5aca121797bf7734ef9fd58422e2e22183bcacba9ec87ba0c83b7a2e788f03ce0da06463433cda6')",
              "err": {},
              "uuid": "b549b191-e6c0-4c75-b5c3-e982c7a802da",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/defaults",
              "fullTitle": "kdf scrypt/defaults",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nkey.toString('hex').should.equal('9009fca57ef2b8c342bdad6b9247e4a1b5bd85628152116513ad44e93cf1b0e2')",
              "err": {},
              "uuid": "1d7aaa28-5a6f-44ea-a9ca-23f2386f3e2e",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/N",
              "fullTitle": "kdf scrypt/N",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024 }))\nkey.toString('hex').should.equal('ceb6a6bf4f4afeb3d1806714474d4f00ca97c2ad76a641269192d11444e13a6b')",
              "err": {},
              "uuid": "0de0974f-d90b-42fc-82ec-ab86787dda85",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/R",
              "fullTitle": "kdf scrypt/R",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptblocksize: 16 }))\nkey.toString('hex').should.equal('a63de1de715f95bebd9f6d58d78ff11028a8412c1fcf71673544373c67095836')",
              "err": {},
              "uuid": "0cea1aba-9207-4ea4-a75f-4a1d8c740b06",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/P",
              "fullTitle": "kdf scrypt/P",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptparallelism: 2 }))\nkey.toString('hex').should.equal('ef224277727457992dc05983b1fd1208bae35b100c853ba4bb11f1ba7ca4c436')",
              "err": {},
              "uuid": "d1b6aaac-de1e-458c-851c-f2f3523dba66",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2i",
              "fullTitle": "kdf argon2i",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2i' }))\nkey.toString('hex').should.equal('7357892df510f136a0688ceab37bbaf7ba695de590065072717fa6728961c92a')",
              "err": {},
              "uuid": "0c18b743-e7d2-400d-b41c-78c39992cafd",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2d",
              "fullTitle": "kdf argon2d",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2d' }))\nkey.toString('hex').should.equal('423b0dcc7bbfe16fa8ee7a2e2ebd8891873d726f9dfe70890a7197a5503a2848')",
              "err": {},
              "uuid": "f8d3380a-835d-42ec-8a7e-769dd1c73679",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id",
              "fullTitle": "kdf argon2id",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "76243ee7-2ba1-477b-984e-079bd29b496b",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/mem",
              "fullTitle": "kdf argon2id/mem",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2mem: 16384 }))\nkey.toString('hex').should.equal('e043f979311b14ff8378b785469974e899a08f05509323a04b2ca29ef63ff3af')",
              "err": {},
              "uuid": "7e529846-6922-46ef-8e61-a8d17f181549",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/time",
              "fullTitle": "kdf argon2id/time",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2time: 1 }))\nkey.toString('hex').should.equal('bf6b1773bdae362ecea04b889079b6628d1f35d96a2be9f2a5481c2d1236e8d7')",
              "err": {},
              "uuid": "6f3082dc-ea1a-4c6f-b230-08367134add2",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/parallelism",
              "fullTitle": "kdf argon2id/parallelism",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2parallelism: 2 }))\nkey.toString('hex').should.equal('5c12c6873b938cd8467b677d23e525389e3ff7ed62b4ad9e285e1191244f40ca')",
              "err": {},
              "uuid": "d8f3b2c4-0ef2-4357-92ce-99901a143f76",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "kdf default",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({}))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "25e88844-f9f6-42e1-8889-4047b95fb3fd",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "kdf invalid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.kdf('password1', 'salt1', 16, { type: 'invalid', params: { } }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "bac528d6-3120-4f50-9f41-5390bf966f2e",
              "parentUUID": "414304be-ee79-475e-815d-57da04e7c869",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dead1f3c-7802-4359-a5ae-cb313b34a594",
            "1a1b04bc-16a8-47bd-98ae-7cef9ea2a4f8",
            "6d4dbbe6-ecb7-48e0-96b8-cf7938dbc51a",
            "aa8de8a8-63b5-4f20-b4f7-1994f0f769fc",
            "7915861e-02da-47b1-abbb-a5912262557c",
            "0660b000-2fe3-4bf3-9b51-94cab6696079",
            "d25983b3-d45d-4d98-9d2e-048c58d5331b",
            "f21c9fd8-069b-4585-b26f-66fb2a9dcc65",
            "61523c8e-86ff-49eb-9ab7-632be331a8a0",
            "250e81d9-d34e-41fc-a627-46c58ce3d6e7",
            "b549b191-e6c0-4c75-b5c3-e982c7a802da",
            "1d7aaa28-5a6f-44ea-a9ca-23f2386f3e2e",
            "0de0974f-d90b-42fc-82ec-ab86787dda85",
            "0cea1aba-9207-4ea4-a75f-4a1d8c740b06",
            "d1b6aaac-de1e-458c-851c-f2f3523dba66",
            "0c18b743-e7d2-400d-b41c-78c39992cafd",
            "f8d3380a-835d-42ec-8a7e-769dd1c73679",
            "76243ee7-2ba1-477b-984e-079bd29b496b",
            "7e529846-6922-46ef-8e61-a8d17f181549",
            "6f3082dc-ea1a-4c6f-b230-08367134add2",
            "d8f3b2c4-0ef2-4357-92ce-99901a143f76",
            "25e88844-f9f6-42e1-8889-4047b95fb3fd",
            "bac528d6-3120-4f50-9f41-5390bf966f2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2390,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c304b091-1486-43bd-a884-eac5ff56da58",
          "title": "policy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "68031003-6440-40bf-b548-a72d1da8ba02",
              "title": "validate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "8a0e1be6-d64c-4694-b1a8-c9064ef31c95",
                  "parentUUID": "68031003-6440-40bf-b548-a72d1da8ba02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password2' })\n    )\n  )\n).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "06b16776-b06e-485d-a1ef-95d82a55a704",
                  "parentUUID": "68031003-6440-40bf-b548-a72d1da8ba02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a0e1be6-d64c-4694-b1a8-c9064ef31c95",
                "06b16776-b06e-485d-a1ef-95d82a55a704"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 213,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "dff9a266-8846-4cb0-9e84-2ec65c77ca52",
              "title": "evaluate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.true",
                  "err": {},
                  "uuid": "251bcce6-6ae8-4ad9-81d5-5db138743766",
                  "parentUUID": "dff9a266-8846-4cb0-9e84-2ec65c77ca52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.false",
                  "err": {},
                  "uuid": "edecbc0f-7c3f-4eae-b4fe-16a0eecc8b01",
                  "parentUUID": "dff9a266-8846-4cb0-9e84-2ec65c77ca52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "251bcce6-6ae8-4ad9-81d5-5db138743766",
                "edecbc0f-7c3f-4eae-b4fe-16a0eecc8b01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 216,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6dffa89c-ec49-44c5-8749-8896306041bd",
              "title": "derive",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "0c03f34f-d6b4-41c1-a2d8-afea749a506b",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 222,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "edc4b30d-dfde-4e27-897e-de4f1042f379",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 223,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "6e006fd0-a16b-4711-a458-3f72165e95d3",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 612,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "81966566-bcfb-4f64-a6a8-529a330091ee",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "2f0982c7-45e8-439e-abc6-b453dfbdccd9",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 242,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b79069a9-af50-49ae-9073-724c14635852",
                  "parentUUID": "6dffa89c-ec49-44c5-8749-8896306041bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c03f34f-d6b4-41c1-a2d8-afea749a506b",
                "edc4b30d-dfde-4e27-897e-de4f1042f379",
                "6e006fd0-a16b-4711-a458-3f72165e95d3",
                "81966566-bcfb-4f64-a6a8-529a330091ee",
                "2f0982c7-45e8-439e-abc6-b453dfbdccd9",
                "b79069a9-af50-49ae-9073-724c14635852"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1870,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3d143289-27ed-46f1-8eda-a1ea3bed769d",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n        await mfkdf.setup.factors.password('password2', { id: 'password2' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n])\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "abf93562-8283-4dc8-ac67-c888bbb8fcf3",
                  "parentUUID": "3d143289-27ed-46f1-8eda-a1ea3bed769d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "89259ed6-2895-4c3e-a4d0-fe753df804f3",
                  "parentUUID": "3d143289-27ed-46f1-8eda-a1ea3bed769d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abf93562-8283-4dc8-ac67-c888bbb8fcf3",
                "89259ed6-2895-4c3e-a4d0-fe753df804f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 216,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ed149305-706c-40f4-86a5-12f602967e92",
          "title": "reconstitution",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "a341e83a-79e8-4fd6-bd52-f581a80c177b",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nderive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nmfkdf.derive.key(derive2.policy, {\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "72b50404-7a57-4c90-9d5b-c1d9821672bf",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "82b05785-c712-44ec-8045-e2029de4700d",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactor(await mfkdf.setup.factors.password('password3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "0c366dec-3c10-4c21-beb9-7fb045b5e80a",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "09c69366-0203-46ba-98a9-44f6ee88b1bc",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "dd9d5c21-8d4d-4550-ad1b-989120fc3c80",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "7af80922-9cd7-4977-9fa5-a501c44e9ccf",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(['password1'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "783ec587-ef58-4733-a4b0-a89c116a4e2d",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "eb587960-40fd-49e6-bf47-6efd1246e219",
              "parentUUID": "ed149305-706c-40f4-86a5-12f602967e92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([12345], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "fdcae8cc-888f-47d3-b7e0-54faf36bff2c",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute(['password4'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e9948ebd-d4b5-454f-8afd-f8dbb66b514c",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.reconstitute(['password3'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('diffPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "76d9fd65-aaae-473f-b82d-0364e27206b3",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute('hello', [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "29f7cd48-2fde-4916-839b-0e8c3bedb424",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], '12345', 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "009b59a0-abba-4028-8d02-b7b30c378539",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], '12345').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e575207c-bdfc-45e7-a5ea-d38ae8204c72",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2345ebd7-63ce-427c-8fad-f07012201780",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 12345,\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3db0e07c-e965-4f7a-bb6f-147982b8a64e",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: '',\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c9ea46f9-f9f5-4868-b565-8d7c4cf81069",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "26928c1c-5b34-4fe0-ba55-eb3dabbd8025",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "394a64e6-711f-4eb8-93cc-0fe0659cf551",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: 12345,\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "77afeba1-5146-464b-bfbe-21c419cbe935",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from(''),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "afbd7511-0494-4437-b664-68524d6c0a4d",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: 12345,\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "495c7134-d00c-40c8-a193-e6a0d97e06d1",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: async () => {\n      return {}\n    },\n    output: 12345\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "82173ef9-7db3-4e02-aa69-3a5eecd3b323",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "822d678e-517d-41f0-ba70-b2fd0bcfb0fd",
                  "parentUUID": "c2968fc9-d40e-4e53-8008-b4e0e4b21d7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdcae8cc-888f-47d3-b7e0-54faf36bff2c",
                "e9948ebd-d4b5-454f-8afd-f8dbb66b514c",
                "76d9fd65-aaae-473f-b82d-0364e27206b3",
                "29f7cd48-2fde-4916-839b-0e8c3bedb424",
                "009b59a0-abba-4028-8d02-b7b30c378539",
                "e575207c-bdfc-45e7-a5ea-d38ae8204c72",
                "2345ebd7-63ce-427c-8fad-f07012201780",
                "3db0e07c-e965-4f7a-bb6f-147982b8a64e",
                "c9ea46f9-f9f5-4868-b565-8d7c4cf81069",
                "26928c1c-5b34-4fe0-ba55-eb3dabbd8025",
                "394a64e6-711f-4eb8-93cc-0fe0659cf551",
                "77afeba1-5146-464b-bfbe-21c419cbe935",
                "afbd7511-0494-4437-b664-68524d6c0a4d",
                "495c7134-d00c-40c8-a193-e6a0d97e06d1",
                "82173ef9-7db3-4e02-aa69-3a5eecd3b323",
                "822d678e-517d-41f0-ba70-b2fd0bcfb0fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1691,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "a341e83a-79e8-4fd6-bd52-f581a80c177b",
            "72b50404-7a57-4c90-9d5b-c1d9821672bf",
            "82b05785-c712-44ec-8045-e2029de4700d",
            "0c366dec-3c10-4c21-beb9-7fb045b5e80a",
            "09c69366-0203-46ba-98a9-44f6ee88b1bc",
            "dd9d5c21-8d4d-4550-ad1b-989120fc3c80",
            "7af80922-9cd7-4977-9fa5-a501c44e9ccf",
            "783ec587-ef58-4733-a4b0-a89c116a4e2d",
            "eb587960-40fd-49e6-bf47-6efd1246e219"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7890060d-0a04-477e-b40a-0048b7bcc9c2",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "47c68465-134e-4931-8a84-ca734542c6a8",
              "parentUUID": "7890060d-0a04-477e-b40a-0048b7bcc9c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "c97aff7e-4195-4e43-b4f8-ce01c1fec516",
              "parentUUID": "7890060d-0a04-477e-b40a-0048b7bcc9c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "dbac2d2d-9c47-498d-bfa7-e60032515098",
              "parentUUID": "7890060d-0a04-477e-b40a-0048b7bcc9c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47c68465-134e-4931-8a84-ca734542c6a8",
            "c97aff7e-4195-4e43-b4f8-ce01c1fec516",
            "dbac2d2d-9c47-498d-bfa7-e60032515098"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
          "title": "secrets",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "8acf0c79-ec5f-4b1c-ad38-68a12c5d362f",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 1, 5)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "9aa7a70a-6f0a-47db-8c0b-2e823bf17ac4",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 2, 3)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "832c2dcf-8739-4b4b-ad3b-6842e27a686f",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "2de6ca96-1927-4304-bd1f-1dfe258cd90e",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 1024)\nshares.should.be.an('array').of.length(1024)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 1020; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[1023] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "6322a144-3220-4561-ba56-14e21690149c",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)\nxor(shares[0], shares[1]).toString('hex').should.equal('12345678')",
              "err": {},
              "uuid": "45449122-28a7-4b08-96c5-16a10514610b",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "fffcbe46-5e25-40ca-a858-13dd221dfe75",
              "parentUUID": "b36a7e8f-9bf5-478d-a67c-596c533ebac3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8acf0c79-ec5f-4b1c-ad38-68a12c5d362f",
            "9aa7a70a-6f0a-47db-8c0b-2e823bf17ac4",
            "832c2dcf-8739-4b4b-ad3b-6842e27a686f",
            "2de6ca96-1927-4304-bd1f-1dfe258cd90e",
            "6322a144-3220-4561-ba56-14e21690149c",
            "45449122-28a7-4b08-96c5-16a10514610b",
            "fffcbe46-5e25-40ca-a858-13dd221dfe75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 77,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
          "title": "secrets/recover",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "00cdf9c4-e87b-4dad-aaf4-d917069dee14",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "d994ee1e-8499-4351-9cc1-1588f02a812a",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "cdf29ce0-c72a-43ad-9133-54be8d6cf6fe",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "e1f0c8a2-f71c-419a-9f37-3e3e3a9e6185",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "c35cf1ac-a0a4-461f-be3c-15cdd6724448",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "414356d9-5367-4eed-9f5f-de6197a1fcea",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "a6d79752-2cf2-4666-9e11-4696e00c1bd2",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "a243c05c-8b78-4d99-82b6-b8051ed76b28",
              "parentUUID": "9659ef14-0494-4f92-9a35-f0f4ca64e8bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00cdf9c4-e87b-4dad-aaf4-d917069dee14",
            "d994ee1e-8499-4351-9cc1-1588f02a812a",
            "cdf29ce0-c72a-43ad-9133-54be8d6cf6fe",
            "e1f0c8a2-f71c-419a-9f37-3e3e3a9e6185",
            "c35cf1ac-a0a4-461f-be3c-15cdd6724448",
            "414356d9-5367-4eed-9f5f-de6197a1fcea",
            "a6d79752-2cf2-4666-9e11-4696e00c1bd2",
            "a243c05c-8b78-4d99-82b6-b8051ed76b28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "23e8bf30-9746-4869-80dd-850c4479b4e5",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "4a32cdc9-d3b4-45a8-bb96-cfa4701b4afc",
              "parentUUID": "23e8bf30-9746-4869-80dd-850c4479b4e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "248cf4d9-40a1-45c1-b303-c32fe5bb485a",
              "parentUUID": "23e8bf30-9746-4869-80dd-850c4479b4e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "96ad98e5-4dba-43c9-8232-321e6346ac34",
              "parentUUID": "23e8bf30-9746-4869-80dd-850c4479b4e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a32cdc9-d3b4-45a8-bb96-cfa4701b4afc",
            "248cf4d9-40a1-45c1-b303-c32fe5bb485a",
            "96ad98e5-4dba-43c9-8232-321e6346ac34"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0eb86394-9437-4c31-9479-6c6e6cc61d42",
          "title": "setup/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.password('password', { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "5225f187-87f7-4b90-a327-2e6cd987c923",
              "parentUUID": "0eb86394-9437-4c31-9479-6c6e6cc61d42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.password('password', { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "95ef340c-9dbb-437f-9986-69d63fcd9859",
              "parentUUID": "0eb86394-9437-4c31-9479-6c6e6cc61d42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "e6f67b25-24ea-431a-b3cd-7e0949c8c97b",
              "parentUUID": "0eb86394-9437-4c31-9479-6c6e6cc61d42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5225f187-87f7-4b90-a327-2e6cd987c923",
            "95ef340c-9dbb-437f-9986-69d63fcd9859",
            "e6f67b25-24ea-431a-b3cd-7e0949c8c97b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "034d9d91-9849-4217-990c-725e502c97d4",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ uuid: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ uuid: 'hello' }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "ba1db018-d283-40ba-b141-0f05f8d63f91",
              "parentUUID": "034d9d91-9849-4217-990c-725e502c97d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "cc2f573f-a728-463d-9c67-d35c4681d852",
              "parentUUID": "034d9d91-9849-4217-990c-725e502c97d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({ uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\nfactor.type.should.equal('uuid')\nfactor.data.toString('hex').should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "de14d83e-ffaf-4baa-9f67-3316d5290b54",
              "parentUUID": "034d9d91-9849-4217-990c-725e502c97d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "82496695-9b44-4798-b226-f1f6b8c0640b",
              "parentUUID": "034d9d91-9849-4217-990c-725e502c97d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba1db018-d283-40ba-b141-0f05f8d63f91",
            "cc2f573f-a728-463d-9c67-d35c4681d852",
            "de14d83e-ffaf-4baa-9f67-3316d5290b54",
            "82496695-9b44-4798-b226-f1f6b8c0640b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0979a405-0c79-4862-94b2-9b911966a5d7",
          "title": "setup/kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
          "file": "\\test\\setup\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "de81fd84-5574-4dea-9cab-6ea2dc9c328b",
              "title": "pbkdf2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf pbkdf2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})",
                  "err": {},
                  "uuid": "72710bb3-2ef1-4e7c-ba1a-e227392305b6",
                  "parentUUID": "de81fd84-5574-4dea-9cab-6ea2dc9c328b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b9e94bd3-1c8c-4d91-a4d0-c8a6d41b393d",
                  "title": "pbkdf2rounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "b467bba5-38d1-44cd-bc7f-2e0786f8a9e9",
                      "parentUUID": "b9e94bd3-1c8c-4d91-a4d0-c8a6d41b393d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "49634227-2d9b-45ad-a65d-5fbf8237e7dd",
                      "parentUUID": "b9e94bd3-1c8c-4d91-a4d0-c8a6d41b393d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha256'\n  }\n})",
                      "err": {},
                      "uuid": "dc82e176-f30e-4388-8c37-904938e3452a",
                      "parentUUID": "b9e94bd3-1c8c-4d91-a4d0-c8a6d41b393d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b467bba5-38d1-44cd-bc7f-2e0786f8a9e9",
                    "49634227-2d9b-45ad-a65d-5fbf8237e7dd",
                    "dc82e176-f30e-4388-8c37-904938e3452a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "da088f80-3ba6-4e02-9e4f-7f75c53dd9cc",
                  "title": "pbkdf2digest",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 0\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "617ffc39-8db9-4279-ad20-37975a6eeabd",
                      "parentUUID": "da088f80-3ba6-4e02-9e4f-7f75c53dd9cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 'foo'\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "f61e4089-f7e2-4812-a31b-fc31bca365f4",
                      "parentUUID": "da088f80-3ba6-4e02-9e4f-7f75c53dd9cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2digest: 'sha512'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha512'\n  }\n})",
                      "err": {},
                      "uuid": "022caed9-ba17-4f9e-bf35-cd3a00cd5570",
                      "parentUUID": "da088f80-3ba6-4e02-9e4f-7f75c53dd9cc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "617ffc39-8db9-4279-ad20-37975a6eeabd",
                    "f61e4089-f7e2-4812-a31b-fc31bca365f4",
                    "022caed9-ba17-4f9e-bf35-cd3a00cd5570"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "72710bb3-2ef1-4e7c-ba1a-e227392305b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9ad62f5e-ec9a-441c-ab95-0b3eb44f0005",
              "title": "bcrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf bcrypt defaults",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt'\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 10\n  }\n})",
                  "err": {},
                  "uuid": "b8486d62-ce97-472a-abb1-56caef92a498",
                  "parentUUID": "9ad62f5e-ec9a-441c-ab95-0b3eb44f0005",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d6c01c01-4e53-47f8-b4e3-d1b076572258",
                  "title": "bcryptrounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "d41ff081-993f-4cdd-b311-2df6b7fd6f4a",
                      "parentUUID": "d6c01c01-4e53-47f8-b4e3-d1b076572258",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "e07a70f1-8046-46d7-a05c-7678631fb4c8",
                      "parentUUID": "d6c01c01-4e53-47f8-b4e3-d1b076572258",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt',\n  bcryptrounds: 25\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 25\n  }\n})",
                      "err": {},
                      "uuid": "8b65b002-40fb-44de-96d9-50b27c363eff",
                      "parentUUID": "d6c01c01-4e53-47f8-b4e3-d1b076572258",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d41ff081-993f-4cdd-b311-2df6b7fd6f4a",
                    "e07a70f1-8046-46d7-a05c-7678631fb4c8",
                    "8b65b002-40fb-44de-96d9-50b27c363eff"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "b8486d62-ce97-472a-abb1-56caef92a498"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3b9ba4e1-8090-414c-a623-b810b5dc6f23",
              "title": "scrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf scrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt'\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "e36ad5b9-f956-43d8-b2b2-cae492212974",
                  "parentUUID": "3b9ba4e1-8090-414c-a623-b810b5dc6f23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1dd702d0-9b3a-4a43-993a-422840201485",
                  "title": "scryptcost",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "68fb4e7e-d230-4087-bcf7-0fe3a94d0ab6",
                      "parentUUID": "1dd702d0-9b3a-4a43-993a-422840201485",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "4f84db86-1424-40a1-9528-7ba6452f5c0f",
                      "parentUUID": "1dd702d0-9b3a-4a43-993a-422840201485",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptcost valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptcost: 12345\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 12345,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "102e75e8-e64c-47d0-9559-952c26c113ed",
                      "parentUUID": "1dd702d0-9b3a-4a43-993a-422840201485",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "68fb4e7e-d230-4087-bcf7-0fe3a94d0ab6",
                    "4f84db86-1424-40a1-9528-7ba6452f5c0f",
                    "102e75e8-e64c-47d0-9559-952c26c113ed"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7cc155a7-2cac-4302-bcf9-8dc4ed96ce3c",
                  "title": "scryptblocksize",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "666195ba-cc14-459e-a16f-1aa3a09664e8",
                      "parentUUID": "7cc155a7-2cac-4302-bcf9-8dc4ed96ce3c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "0c88ffe8-7e11-4f7f-9fc4-029ad8f54120",
                      "parentUUID": "7cc155a7-2cac-4302-bcf9-8dc4ed96ce3c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptblocksize valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptblocksize: 24\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 24,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "0a6b2ac1-77d3-45f0-952c-681772a1a44a",
                      "parentUUID": "7cc155a7-2cac-4302-bcf9-8dc4ed96ce3c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "666195ba-cc14-459e-a16f-1aa3a09664e8",
                    "0c88ffe8-7e11-4f7f-9fc4-029ad8f54120",
                    "0a6b2ac1-77d3-45f0-952c-681772a1a44a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "0f1cd69f-bf5b-4019-a8b4-d64db1792f45",
                  "title": "scryptparallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "a51b3ab9-69b1-402c-acc8-4f4f6915e4eb",
                      "parentUUID": "0f1cd69f-bf5b-4019-a8b4-d64db1792f45",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "17c250ad-5450-4987-aa4c-737fcd77269b",
                      "parentUUID": "0f1cd69f-bf5b-4019-a8b4-d64db1792f45",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptparallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptparallelism: 2\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "629096b5-3094-498b-b0ff-1da8889e0e42",
                      "parentUUID": "0f1cd69f-bf5b-4019-a8b4-d64db1792f45",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a51b3ab9-69b1-402c-acc8-4f4f6915e4eb",
                    "17c250ad-5450-4987-aa4c-737fcd77269b",
                    "629096b5-3094-498b-b0ff-1da8889e0e42"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "e36ad5b9-f956-43d8-b2b2-cae492212974"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c35f3d60-c057-4a6f-8f6d-e6612b92fad6",
              "title": "argon2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf argon2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "2b258c89-c9d9-447c-8fe8-92646fd4c440",
                  "parentUUID": "c35f3d60-c057-4a6f-8f6d-e6612b92fad6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/type",
                  "fullTitle": "setup/kdf argon2 kdf/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 123\n  })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "67edba3a-64af-4455-ad78-9b7e32569d13",
                  "parentUUID": "c35f3d60-c057-4a6f-8f6d-e6612b92fad6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/range",
                  "fullTitle": "setup/kdf argon2 kdf/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'foo'\n  })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "3cab5a8f-e254-41c8-bad2-81ae709d57c9",
                  "parentUUID": "c35f3d60-c057-4a6f-8f6d-e6612b92fad6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "433f44f8-b343-4f8c-9b2a-b2fe67d56066",
                  "title": "argon2time",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "9323a5b0-242e-4657-ad23-db0cf5188385",
                      "parentUUID": "433f44f8-b343-4f8c-9b2a-b2fe67d56066",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "ae11ab17-0bae-4380-9e53-403f92626f5b",
                      "parentUUID": "433f44f8-b343-4f8c-9b2a-b2fe67d56066",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2time valid",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2d',\n  argon2time: 10\n}).should.deep.equal({\n  type: 'argon2d',\n  params: {\n    rounds: 10,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "74ce680a-e6b2-4981-a4e5-fbdb7308656e",
                      "parentUUID": "433f44f8-b343-4f8c-9b2a-b2fe67d56066",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9323a5b0-242e-4657-ad23-db0cf5188385",
                    "ae11ab17-0bae-4380-9e53-403f92626f5b",
                    "74ce680a-e6b2-4981-a4e5-fbdb7308656e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7e63039f-bb83-460a-9421-f3aa169cc6de",
                  "title": "argon2mem",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "7d44a39d-eb10-4ae2-88e7-da08e2bc3502",
                      "parentUUID": "7e63039f-bb83-460a-9421-f3aa169cc6de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "803e26b7-5b71-432f-ba2f-21e73e46b8a7",
                      "parentUUID": "7e63039f-bb83-460a-9421-f3aa169cc6de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2mem valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2i',\n  argon2mem: 12345\n}).should.deep.equal({\n  type: 'argon2i',\n  params: {\n    rounds: 2,\n    memory: 12345,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "da168361-c6b0-4416-980a-1eb8b3c7f4aa",
                      "parentUUID": "7e63039f-bb83-460a-9421-f3aa169cc6de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7d44a39d-eb10-4ae2-88e7-da08e2bc3502",
                    "803e26b7-5b71-432f-ba2f-21e73e46b8a7",
                    "da168361-c6b0-4416-980a-1eb8b3c7f4aa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d1d62ef5-ad9a-47e7-8601-80fe7df697ec",
                  "title": "argon2parallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "2e4ee231-97d9-4be4-9251-16519effb55b",
                      "parentUUID": "d1d62ef5-ad9a-47e7-8601-80fe7df697ec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "7b04084c-48ca-4939-beb5-b85cd4d2258b",
                      "parentUUID": "d1d62ef5-ad9a-47e7-8601-80fe7df697ec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2parallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2id',\n  argon2parallelism: 2\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "38e6e102-5b0a-4faf-9aca-531ea4f31a3d",
                      "parentUUID": "d1d62ef5-ad9a-47e7-8601-80fe7df697ec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2e4ee231-97d9-4be4-9251-16519effb55b",
                    "7b04084c-48ca-4939-beb5-b85cd4d2258b",
                    "38e6e102-5b0a-4faf-9aca-531ea4f31a3d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "2b258c89-c9d9-447c-8fe8-92646fd4c440",
                "67edba3a-64af-4455-ad78-9b7e32569d13",
                "3cab5a8f-e254-41c8-bad2-81ae709d57c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b92c6139-1756-4200-8e78-24e9a1b4304a",
          "title": "setup/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "9ce328b6-fccb-4e3f-aae7-4fa861cfd9ff",
              "parentUUID": "b92c6139-1756-4200-8e78-24e9a1b4304a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8c42a773-cb8a-45b7-b086-eaad9af1f24a",
              "title": "id",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "8fd3fcc8-e3b6-47b0-94c9-9ffb4bd6f064",
                  "parentUUID": "8c42a773-cb8a-45b7-b086-eaad9af1f24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 'hello-world' })\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "7c0b014c-f937-437b-ac11-596d1cc6afae",
                  "parentUUID": "8c42a773-cb8a-45b7-b086-eaad9af1f24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "ec2948f8-2297-4ac4-b3de-ead7e283317b",
                  "parentUUID": "8c42a773-cb8a-45b7-b086-eaad9af1f24a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "1fb02d5a-9a91-45f8-a7e4-b53e10c0b32e",
                  "parentUUID": "8c42a773-cb8a-45b7-b086-eaad9af1f24a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fd3fcc8-e3b6-47b0-94c9-9ffb4bd6f064",
                "7c0b014c-f937-437b-ac11-596d1cc6afae",
                "ec2948f8-2297-4ac4-b3de-ead7e283317b",
                "1fb02d5a-9a91-45f8-a7e4-b53e10c0b32e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3f36aefe-ce62-4d54-b80d-e9534638889f",
              "title": "size",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key size default",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.size.should.equal(32)",
                  "err": {},
                  "uuid": "a9ea2ab8-bf51-49ca-b54e-805e68130499",
                  "parentUUID": "3f36aefe-ce62-4d54-b80d-e9534638889f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key size valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 64 })\npolicy.size.should.equal(64)",
                  "err": {},
                  "uuid": "42a210e2-d955-42ae-baa3-7efee2d91eff",
                  "parentUUID": "3f36aefe-ce62-4d54-b80d-e9534638889f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key size invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "99473e5d-5ff3-4629-bcb8-9708d36c3b38",
                  "parentUUID": "3f36aefe-ce62-4d54-b80d-e9534638889f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key size invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 0 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f088fe70-5dca-4051-a335-0a84078bc8af",
                  "parentUUID": "3f36aefe-ce62-4d54-b80d-e9534638889f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9ea2ab8-bf51-49ca-b54e-805e68130499",
                "42a210e2-d955-42ae-baa3-7efee2d91eff",
                "99473e5d-5ff3-4629-bcb8-9708d36c3b38",
                "f088fe70-5dca-4051-a335-0a84078bc8af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "00ca6545-4101-43ac-8186-5b07e1d177c6",
              "title": "threshold",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "992c125b-fcca-404e-90a3-a047fdea12df",
                  "parentUUID": "00ca6545-4101-43ac-8186-5b07e1d177c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n], { threshold: 1 })\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "607c1fc3-f68c-40e4-88b4-37094bea4aec",
                  "parentUUID": "00ca6545-4101-43ac-8186-5b07e1d177c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9fd38c4b-64d4-4d7f-b5bd-532505ea251a",
                  "parentUUID": "00ca6545-4101-43ac-8186-5b07e1d177c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 0 }).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 2 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "85726926-d877-4409-996f-301a3222cef9",
                  "parentUUID": "00ca6545-4101-43ac-8186-5b07e1d177c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "992c125b-fcca-404e-90a3-a047fdea12df",
                "607c1fc3-f68c-40e4-88b4-37094bea4aec",
                "9fd38c4b-64d4-4d7f-b5bd-532505ea251a",
                "85726926-d877-4409-996f-301a3222cef9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 213,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "114c2d3b-9288-471c-a75a-6eb7a0e16e0d",
              "title": "salt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 48 })\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(48)",
                  "err": {},
                  "uuid": "3285e1b2-66e7-451d-9d8c-21ef58e8a5e8",
                  "parentUUID": "114c2d3b-9288-471c-a75a-6eb7a0e16e0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: Buffer.from('12345678', 'base64') })\npolicy.salt.should.equal('12345678')",
                  "err": {},
                  "uuid": "72e68295-ee24-454e-91e5-018a362b8798",
                  "parentUUID": "114c2d3b-9288-471c-a75a-6eb7a0e16e0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "e4c9e2fd-b035-42a7-b664-65a124e5bf23",
                  "parentUUID": "114c2d3b-9288-471c-a75a-6eb7a0e16e0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3285e1b2-66e7-451d-9d8c-21ef58e8a5e8",
                "72e68295-ee24-454e-91e5-018a362b8798",
                "e4c9e2fd-b035-42a7-b664-65a124e5bf23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2d25d981-8fd0-4685-ada8-c6c968ce9400",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "a6c4d12f-5415-48d0-9005-906b89f773b9",
                  "parentUUID": "2d25d981-8fd0-4685-ada8-c6c968ce9400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password1' })\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3434f16f-8252-455b-85b4-9a2ef0b94142",
                  "parentUUID": "2d25d981-8fd0-4685-ada8-c6c968ce9400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 12345,\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: 12345,\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: 12345\n  }\n]).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f1282c67-f7b7-4458-872a-87dce8cc32cb",
                  "parentUUID": "2d25d981-8fd0-4685-ada8-c6c968ce9400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: '',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "20350c3a-c0c0-4278-b8b1-f28820472a3d",
                  "parentUUID": "2d25d981-8fd0-4685-ada8-c6c968ce9400",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6c4d12f-5415-48d0-9005-906b89f773b9",
                "3434f16f-8252-455b-85b4-9a2ef0b94142",
                "f1282c67-f7b7-4458-872a-87dce8cc32cb",
                "20350c3a-c0c0-4278-b8b1-f28820472a3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9ce328b6-fccb-4e3f-aae7-4fa861cfd9ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 108,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}