{
  "stats": {
    "suites": 76,
    "tests": 310,
    "passes": 310,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-29T18:46:20.761Z",
    "end": "2022-04-29T18:47:48.177Z",
    "duration": 87416,
    "testsRegistered": 310,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2b9df3cb-016e-4c0d-a834-9b2ebf530711",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5e30e2d1-47b3-4c14-ab98-bca4cded3540",
          "title": "asymmetric",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
          "file": "\\test\\crypto\\asymmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "137d44c4-4032-4091-a797-176662b95ea8",
              "title": "encryption",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric encryption rsa1024",
                  "timedOut": false,
                  "duration": 551,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa1024')\nconst pt = await setup.decrypt(ct, 'rsa1024')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "dbf3eed3-d3e5-49e3-bf9e-630ffb4a1e1e",
                  "parentUUID": "137d44c4-4032-4091-a797-176662b95ea8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric encryption rsa2048",
                  "timedOut": false,
                  "duration": 820,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ct = await setup.encrypt('hello world', 'rsa2048')\nconst pt = await setup.decrypt(ct, 'rsa2048')\npt.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "69032cdd-0232-4c40-8587-7cfdb4713a4f",
                  "parentUUID": "137d44c4-4032-4091-a797-176662b95ea8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbf3eed3-d3e5-49e3-bf9e-630ffb4a1e1e",
                "69032cdd-0232-4c40-8587-7cfdb4713a4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1371,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
              "title": "signatures",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\asymmetric.js",
              "file": "\\test\\crypto\\asymmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "rsa1024",
                  "fullTitle": "asymmetric signatures rsa1024",
                  "timedOut": false,
                  "duration": 302,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa1024')\nconst validity = await setup.verify('hello world', signature, 'rsa1024')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "d857e6b9-4c57-4db3-942b-fd36a0d77e0f",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa2048",
                  "fullTitle": "asymmetric signatures rsa2048",
                  "timedOut": false,
                  "duration": 2301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa2048')\nconst validity = await setup.verify('hello world', signature, 'rsa2048')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "9a38c48c-b041-4e3f-85b5-3b6b6f40a145",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rsa3072",
                  "fullTitle": "asymmetric signatures rsa3072",
                  "timedOut": false,
                  "duration": 17510,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world', 'rsa3072')\nconst validity = await setup.verify('hello world', signature, 'rsa3072')\nvalidity.should.be.true",
                  "err": {},
                  "uuid": "a1c59f2a-0faa-47b2-9cf5-3bba9d0ad47d",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "defaults",
                  "fullTitle": "asymmetric signatures defaults",
                  "timedOut": false,
                  "duration": 11831,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst signature = await setup.sign('hello world')\nconst validity = await setup.verify('hello world', signature)\nvalidity.should.be.true\nawait setup.getAsymmetricKeyPair()",
                  "err": {},
                  "uuid": "6b69cfd7-b1cb-43df-b452-1f424c25e871",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ed25519",
                  "fullTitle": "asymmetric signatures ed25519",
                  "timedOut": false,
                  "duration": 123,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nawait setup.getAsymmetricKeyPair('ed25519')",
                  "err": {},
                  "uuid": "ccb41bb7-10e5-4b58-9d90-7143079373f8",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unknown",
                  "fullTitle": "asymmetric signatures unknown",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.getAsymmetricKeyPair('unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "24e21fb5-ef55-4a54-8384-2842d28b1336",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "errors",
                  "fullTitle": "asymmetric signatures errors",
                  "timedOut": false,
                  "duration": 4167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.sign(12345, 'rsa1024').should.be.rejectedWith(TypeError)\nconst signature = await setup.sign('hello world')\nsetup.verify(12345, signature).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3df06317-479d-48a4-9171-8a7f694cd24e",
                  "parentUUID": "8c9e5674-9d77-4e4b-a406-4d221d7265ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d857e6b9-4c57-4db3-942b-fd36a0d77e0f",
                "9a38c48c-b041-4e3f-85b5-3b6b6f40a145",
                "a1c59f2a-0faa-47b2-9cf5-3bba9d0ad47d",
                "6b69cfd7-b1cb-43df-b452-1f424c25e871",
                "ccb41bb7-10e5-4b58-9d90-7143079373f8",
                "24e21fb5-ef55-4a54-8384-2842d28b1336",
                "3df06317-479d-48a4-9171-8a7f694cd24e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1f70057d-161e-42fe-8b04-f0f07347817a",
          "title": "encrypt",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
          "file": "\\test\\crypto\\symmetric.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "defaults",
              "fullTitle": "encrypt defaults",
              "timedOut": false,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext)\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "48fcb1c8-1a10-4f21-bbd2-038e9a9075ff",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-CBC",
              "fullTitle": "encrypt AES256-CBC",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "af633774-bb9b-4360-9219-d044d7253a16",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-CBC",
              "fullTitle": "encrypt AES192-CBC",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "70997aef-7575-43df-aa09-560f0397742f",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-CBC",
              "fullTitle": "encrypt AES128-CBC",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "b59f695a-3c2a-4660-aada-96ab7b798a96",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-CBC",
              "fullTitle": "encrypt 3DES-CBC",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "e2dd452f-ee08-4bf6-a3a4-b84929c56dcc",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-CBC",
              "fullTitle": "encrypt DES-CBC",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "18d3e963-feb7-4333-888c-278a12c0f572",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES256-ECB",
              "fullTitle": "encrypt AES256-ECB",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt(Buffer.from('hello world'), 'aes256', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes256', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "f3cf4bcb-7ebe-46e8-b2ae-aa0aba504618",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES192-ECB",
              "fullTitle": "encrypt AES192-ECB",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes192', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes192', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "e6230b02-1ff2-4258-8fd5-680ba884db81",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AES128-ECB",
              "fullTitle": "encrypt AES128-ECB",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'aes128', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'aes128', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "0c2c0dfe-033d-459c-8bb1-88bc0abc2e81",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3DES-ECB",
              "fullTitle": "encrypt 3DES-ECB",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', '3des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, '3des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "ce3a61d4-4f5a-4463-9a7f-be07f553c93e",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DES-ECB",
              "fullTitle": "encrypt DES-ECB",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst ciphertext = await setup.encrypt('hello world', 'des', 'ECB')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nconst plaintext = await derive.decrypt(ciphertext, 'des', 'ECB')\nplaintext.toString().should.equal('hello world')",
              "err": {},
              "uuid": "1a51c213-6623-4dff-8c3d-80520e22dc2b",
              "parentUUID": "1f70057d-161e-42fe-8b04-f0f07347817a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3769dc48-5bbf-4967-927f-a08e21f7153b",
              "title": "utils",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subkey",
                  "fullTitle": "encrypt utils subkey",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSubkey(32, 'AES256', 'sha256')\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))\nconst key3 = await setup.getSubkey()\nconst key4 = await setup.getSubkey(32, '', 'sha512')\nkey3.toString('hex').should.equal(key4.toString('hex'))",
                  "err": {},
                  "uuid": "c63219e2-533d-44b6-ae1c-386ac22c1df7",
                  "parentUUID": "3769dc48-5bbf-4967-927f-a08e21f7153b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "symmetric key",
                  "fullTitle": "encrypt utils symmetric key",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nconst key1 = await setup.getSymmetricKey()\nconst key2 = await setup.getSymmetricKey('aes256')\nkey1.toString('hex').should.equal(key2.toString('hex'))",
                  "err": {},
                  "uuid": "a9841c8d-08d2-498f-80ee-a96cde1f9bfc",
                  "parentUUID": "3769dc48-5bbf-4967-927f-a08e21f7153b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c63219e2-533d-44b6-ae1c-386ac22c1df7",
                "a9841c8d-08d2-498f-80ee-a96cde1f9bfc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 210,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5ab28d95-bf81-44f9-84c1-d00f636c1b29",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\crypto\\symmetric.js",
              "file": "\\test\\crypto\\symmetric.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid key",
                  "fullTitle": "encrypt errors invalid key",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt('hello world', 'unknown').should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "ea2bfd52-50a5-4e02-a8a8-d2b4c6a7f299",
                  "parentUUID": "5ab28d95-bf81-44f9-84c1-d00f636c1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid message",
                  "fullTitle": "encrypt errors invalid message",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.encrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "393400d7-7b4d-4f81-99c0-0202e4b86254",
                  "parentUUID": "5ab28d95-bf81-44f9-84c1-d00f636c1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid ciphertext",
                  "fullTitle": "encrypt errors invalid ciphertext",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n])\nsetup.decrypt(12345, 'unknown').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "1e1e15c3-67d2-4c4c-8b60-a8340c5ca371",
                  "parentUUID": "5ab28d95-bf81-44f9-84c1-d00f636c1b29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea2bfd52-50a5-4e02-a8a8-d2b4c6a7f299",
                "393400d7-7b4d-4f81-99c0-0202e4b86254",
                "1e1e15c3-67d2-4c4c-8b60-a8340c5ca371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 311,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "48fcb1c8-1a10-4f21-bbd2-038e9a9075ff",
            "af633774-bb9b-4360-9219-d044d7253a16",
            "70997aef-7575-43df-aa09-560f0397742f",
            "b59f695a-3c2a-4660-aada-96ab7b798a96",
            "e2dd452f-ee08-4bf6-a3a4-b84929c56dcc",
            "18d3e963-feb7-4333-888c-278a12c0f572",
            "f3cf4bcb-7ebe-46e8-b2ae-aa0aba504618",
            "e6230b02-1ff2-4258-8fd5-680ba884db81",
            "0c2c0dfe-033d-459c-8bb1-88bc0abc2e81",
            "ce3a61d4-4f5a-4463-9a7f-be07f553c93e",
            "1a51c213-6623-4dff-8c3d-80520e22dc2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2488,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8d2681ea-68c5-489b-a827-c25eacdb5869",
          "title": "derive/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\password.js",
          "file": "\\test\\derive\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "7fbdd67b-e71f-4204-90be-92516c1a963d",
              "parentUUID": "8d2681ea-68c5-489b-a827-c25eacdb5869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/password invalid/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.password('')\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "d11eb519-4a1f-4814-8d3b-ad28c580e73b",
              "parentUUID": "8d2681ea-68c5-489b-a827-c25eacdb5869",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fbdd67b-e71f-4204-90be-92516c1a963d",
            "d11eb519-4a1f-4814-8d3b-ad28c580e73b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "912ec05b-b7c5-44af-91c7-0160d7396c08",
          "title": "derive/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\factors\\uuid.js",
          "file": "\\test\\derive\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "derive/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid(12345)\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "da73318e-fb30-4af9-ae8d-82434aae8330",
              "parentUUID": "912ec05b-b7c5-44af-91c7-0160d7396c08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "derive/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.uuid('')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "e400804b-b096-4102-8a7d-b3cecfb13f7d",
              "parentUUID": "912ec05b-b7c5-44af-91c7-0160d7396c08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da73318e-fb30-4af9-ae8d-82434aae8330",
            "e400804b-b096-4102-8a7d-b3cecfb13f7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "676c7a16-319c-4e9c-862a-c17394524877",
          "title": "derive/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
          "file": "\\test\\derive\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "correct",
              "fullTitle": "derive/key correct",
              "timedOut": false,
              "duration": 579,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "bf5c3799-c55a-4d70-a23c-34607a49d849",
              "parentUUID": "676c7a16-319c-4e9c-862a-c17394524877",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "incorrect",
              "fullTitle": "derive/key incorrect",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('wrongpassword2')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('wrongpassword2'),\n  password3: mfkdf.derive.factors.password('wrongpassword3')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password2')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "32ea9799-1bb0-459d-8071-a7ac283f4679",
              "parentUUID": "676c7a16-319c-4e9c-862a-c17394524877",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "mismatch",
              "fullTitle": "derive/key mismatch",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password', { id: 'password' })\n])\nmfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n}).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "fb180ffc-0387-4adf-b089-35686d80188f",
              "parentUUID": "676c7a16-319c-4e9c-862a-c17394524877",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0b7bcf66-c0bd-4d78-ad18-9cae1fe9e300",
              "title": "shares",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "derive/key shares valid",
                  "timedOut": false,
                  "duration": 446,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.shares.should.deep.equal(setup.shares)\nderive2.shares.should.deep.equal(setup.shares)\nderive3.shares.should.deep.equal(setup.shares)",
                  "err": {},
                  "uuid": "8a88ed1f-4d96-4deb-8e89-7ead193c5be8",
                  "parentUUID": "0b7bcf66-c0bd-4d78-ad18-9cae1fe9e300",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a88ed1f-4d96-4deb-8e89-7ead193c5be8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 446,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ba1d3b87-d322-4306-98b5-4c66c00ad35b",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\derive\\key.js",
              "file": "\\test\\derive\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "schema",
                  "fullTitle": "derive/key invalid schema",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\ndelete setup.policy.$id\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "8071235d-d0c3-49ea-aaef-520861bfc878",
                  "parentUUID": "ba1d3b87-d322-4306-98b5-4c66c00ad35b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factors",
                  "fullTitle": "derive/key invalid factors",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b98fb263-ac0c-446f-82ce-e84c1c208a4e",
                  "parentUUID": "ba1d3b87-d322-4306-98b5-4c66c00ad35b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8071235d-d0c3-49ea-aaef-520861bfc878",
                "b98fb263-ac0c-446f-82ce-e84c1c208a4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 229,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "bf5c3799-c55a-4d70-a23c-34607a49d849",
            "32ea9799-1bb0-459d-8071-a7ac283f4679",
            "fb180ffc-0387-4adf-b089-35686d80188f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1258,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2b971d32-3a65-46d0-80d9-6caff9866fda",
          "title": "examples",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
          "file": "\\test\\examples\\examples.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "kdf",
              "fullTitle": "examples kdf",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup kdf configuration\nconst config = await mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000,\n  pbkdf2digest: 'sha256'\n}) // -> { type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } }\n// derive key\nconst key = await mfkdf.kdf('password', 'salt', 8, config)\nkey.toString('hex') // -> 0394a2ede332c9a1\nconfig.should.deep.equal({ type: 'pbkdf2', params: { rounds: 100000, digest: 'sha256' } })\nkey.toString('hex').should.equal('0394a2ede332c9a1')",
              "err": {},
              "uuid": "94bd16a7-b603-4766-8c77-c35e4c225f22",
              "parentUUID": "2b971d32-3a65-46d0-80d9-6caff9866fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive fast",
              "fullTitle": "examples setup/derive fast",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16, kdf: 'pbkdf2', pbkdf2rounds: 1 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "455bdb18-680a-44e8-bba3-ce505c936eea",
              "parentUUID": "2b971d32-3a65-46d0-80d9-6caff9866fda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "setup/derive",
              "fullTitle": "examples setup/derive",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3-factor multi-factor derived key with a password, HOTP code, and UUID recovery code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ id: 'recovery', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { threshold: 2, size: 16 })\n// derive key using 2 of the 3 factors\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "85bce317-8d84-4ac7-b967-57ba12dffd5f",
              "parentUUID": "2b971d32-3a65-46d0-80d9-6caff9866fda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "stack",
                  "fullTitle": "examples factors stack",
                  "timedOut": false,
                  "duration": 226,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  }),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "355c9821-1c5b-4bef-8e47-3ab1a4908654",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hmacsha1",
                  "fullTitle": "examples factors hmacsha1",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hmacsha1 factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n], { size: 8 })\n// calculate response; could be done using hardware device\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response = crypto.createHmac('sha1', secret).update(challenge).digest()\n// derive key with hmacsha1 factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "b9c1520b-5ea5-4831-b549-4db747bbf246",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "totp",
                  "fullTitle": "examples factors totp",
                  "timedOut": false,
                  "duration": 1166,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with totp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n], { size: 8 })\n// derive key with totp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "ef9a0946-df6e-4509-8855-3f5fa8f2a239",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hotp",
                  "fullTitle": "examples factors hotp",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with hotp factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') })\n], { size: 8 })\n// derive key with hotp factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "47a9ef94-0f3f-421b-ad18-7a934dfbb90f",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "uuid",
                  "fullTitle": "examples factors uuid",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with uuid factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 8 })\n// derive key with uuid factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0f86d407-5790-489b-8c34-5547bc0b259d",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "password",
                  "fullTitle": "examples factors password",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key with password factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password')\n], { size: 8 })\n// derive key with password factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('password')\n})\nsetup.key.toString('hex') // -> 01d0c7236adf2516\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "3976affd-6120-469d-ae08-60fdc28f36a1",
                  "parentUUID": "dd695db4-b16f-4b3a-b28d-1469ab6c1d8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "355c9821-1c5b-4bef-8e47-3ab1a4908654",
                "b9c1520b-5ea5-4831-b549-4db747bbf246",
                "ef9a0946-df6e-4509-8855-3f5fa8f2a239",
                "47a9ef94-0f3f-421b-ad18-7a934dfbb90f",
                "0f86d407-5790-489b-8c34-5547bc0b259d",
                "3976affd-6120-469d-ae08-60fdc28f36a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2254,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "58f993b2-696b-4430-85a4-05aa5281b0ac",
              "title": "secrets",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "full",
                  "fullTitle": "examples secrets full",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// share secret using 2-of-3 shares\nconst shares = mfkdf.secrets.share(Buffer.from('hello world'), 2, 3) // -> [Buffer, Buffer, Buffer]\n// recover secret using 2 shares\nconst secret = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret.toString() // -> hello world\n// recover original 3 shares\nconst recover = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3) // -> [Buffer, Buffer, Buffer]\nrecover.should.be.a('array')",
                  "err": {},
                  "uuid": "e2be650c-db14-4162-ac2f-0b4e8eaa3915",
                  "parentUUID": "58f993b2-696b-4430-85a4-05aa5281b0ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2be650c-db14-4162-ac2f-0b4e8eaa3915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
              "title": "policy",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "validate",
                  "fullTitle": "examples policy validate",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// validate policy\nconst valid = mfkdf.policy.validate(setup.policy) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "85f58b0f-e45b-4bc8-b41d-206992cc8aaf",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ids",
                  "fullTitle": "examples policy ids",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// get list of ids\nconst ids = mfkdf.policy.ids(setup.policy) // -> ['passwordA', 'passwordB', 'passwordC', ...]\nids.includes('passwordA').should.be.true\nids.includes('passwordB').should.be.true\nids.includes('passwordC').should.be.true",
                  "err": {},
                  "uuid": "b858a432-600a-46f9-99af-4f9da2bedc87",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "evaluate",
                  "fullTitle": "examples policy evaluate",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  )\n)\n// check if key can be derived with passwordA and passwordC\nconst valid1 = await mfkdf.policy.evaluate(setup.policy, ['passwordA', 'passwordC']) // -> true\n// check if key can be derived with passwordB and passwordC\nconst valid2 = await mfkdf.policy.evaluate(setup.policy, ['passwordB', 'passwordC']) // -> false\nvalid1.should.be.true\nvalid2.should.be.false",
                  "err": {},
                  "uuid": "ad69008c-8a07-46ce-a6b9-edae5b1ef071",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setup/derive",
                  "fullTitle": "examples policy setup/derive",
                  "timedOut": false,
                  "duration": 232,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND (passwordB OR passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n      await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n    )\n  ), { size: 8 }\n)\n// derive key with passwordA and passwordC (or passwordA and passwordB)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "99cf736c-66c1-4450-8551-bf18f193f609",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "all",
                  "fullTitle": "examples policy all",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA AND passwordB AND passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB and passwordC\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB'),\n  passwordC: mfkdf.derive.factors.password('passwordC')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "0cbcc15e-2bbe-46d3-9a50-321084ecc03d",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "examples policy any",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from passwordA OR passwordB OR passwordC\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA (or passwordB or passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "d8275912-891a-4a28-924b-00adaf8ead3d",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast2",
                  "fullTitle": "examples policy atLeast2",
                  "timedOut": false,
                  "duration": 221,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup key that can be derived from at least 2 of (passwordA, passwordB, passwordC)\nconst setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('passwordA', { id: 'passwordA' }),\n    await mfkdf.setup.factors.password('passwordB', { id: 'passwordB' }),\n    await mfkdf.setup.factors.password('passwordC', { id: 'passwordC' })\n  ]), { size: 8 }\n)\n// derive key with passwordA and passwordB (or passwordA and passwordC, or passwordB and passwordC)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  passwordA: mfkdf.derive.factors.password('passwordA'),\n  passwordB: mfkdf.derive.factors.password('passwordB')\n})\nsetup.key.toString('hex') // -> e16a227944a65263\nderive.key.toString('hex') // -> e16a227944a65263\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
                  "err": {},
                  "uuid": "c9e0b935-c40b-4eee-90d5-9657f21cacc2",
                  "parentUUID": "b9f64bb5-5c9b-4227-b036-c1a9fc605aa1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85f58b0f-e45b-4bc8-b41d-206992cc8aaf",
                "b858a432-600a-46f9-99af-4f9da2bedc87",
                "ad69008c-8a07-46ce-a6b9-edae5b1ef071",
                "99cf736c-66c1-4450-8551-bf18f193f609",
                "0cbcc15e-2bbe-46d3-9a50-321084ecc03d",
                "d8275912-891a-4a28-924b-00adaf8ead3d",
                "c9e0b935-c40b-4eee-90d5-9657f21cacc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
              "title": "reconstitution",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setThreshold",
                  "fullTitle": "examples reconstitution setThreshold",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change threshold to 2/3\nawait setup.setThreshold(2)\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "3aedab3e-0ba3-49c9-9678-56fcd248fc39",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactor",
                  "fullTitle": "examples reconstitution removeFactor",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove one of the factors\nawait setup.removeFactor('password2')\n// derive key with remaining 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "88ec4cc2-1a3b-4799-bf3c-8dedcc49c17e",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors",
                  "fullTitle": "examples reconstitution removeFactors",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 1-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\n// remove two factors\nawait setup.removeFactors(['password1', 'password2'])\n// derive key with remaining factor\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "dd47b297-c92c-49e0-a281-822517158dea",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactor",
                  "fullTitle": "examples reconstitution addFactor",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add fourth factor\nawait setup.addFactor(\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n)\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "8a40a10c-5271-4ad4-b39a-43caa57c230a",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors",
                  "fullTitle": "examples reconstitution addFactors",
                  "timedOut": false,
                  "duration": 216,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// add two more factors\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n  await mfkdf.setup.factors.password('password5', { id: 'password5' })\n])\n// derive key with any 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password5: mfkdf.derive.factors.password('password5')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "181eb17a-b1a1-4c5b-92ea-60aa4b877ba5",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactor",
                  "fullTitle": "examples reconstitution recoverFactor",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change the 2nd factor\nawait setup.recoverFactor(\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' })\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ca5bf846-e2fe-44f6-8535-7cb431714a71",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "recoverFactors",
                  "fullTitle": "examples reconstitution recoverFactors",
                  "timedOut": false,
                  "duration": 215,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// change 2 factors\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('newPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('newPassword3', { id: 'password3' })\n])\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('newPassword2'),\n  password3: mfkdf.derive.factors.password('newPassword3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "c35a078c-f9e9-42f4-bb02-cb6ac53dec2e",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "reconstitute",
                  "fullTitle": "examples reconstitution reconstitute",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 2-of-3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 2 })\n// remove 1 factor and add 1 new factor\nawait setup.reconstitute(\n  ['password1'], // remove\n  [await mfkdf.setup.factors.password('password4', { id: 'password4' })] // add\n)\n// derive key with new factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "8c0cbc25-050c-45da-ad2c-a242d67ccd24",
                  "parentUUID": "8252dcab-9c7e-4deb-8a3c-5ee360af98f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3aedab3e-0ba3-49c9-9678-56fcd248fc39",
                "88ec4cc2-1a3b-4799-bf3c-8dedcc49c17e",
                "dd47b297-c92c-49e0-a281-822517158dea",
                "8a40a10c-5271-4ad4-b39a-43caa57c230a",
                "181eb17a-b1a1-4c5b-92ea-60aa4b877ba5",
                "ca5bf846-e2fe-44f6-8535-7cb431714a71",
                "c35a078c-f9e9-42f4-bb02-cb6ac53dec2e",
                "8c0cbc25-050c-45da-ad2c-a242d67ccd24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1730,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b1150d1f-6f41-47db-ada5-ad2cc4dfe854",
              "title": "persistence",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "persistence",
                  "fullTitle": "examples persistence persistence",
                  "timedOut": false,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
                  "err": {},
                  "uuid": "ae2f8370-26b2-4576-9374-0927bb7d2372",
                  "parentUUID": "b1150d1f-6f41-47db-ada5-ad2cc4dfe854",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae2f8370-26b2-4576-9374-0927bb7d2372"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 220,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bfb59c40-6c98-4aa8-9f87-e1f9dd832ba7",
              "title": "envelope",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add/get secret",
                  "fullTitle": "examples envelope add/get secret",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "b4acaa75-a8ac-4705-9b22-4c26baea31b7",
                  "parentUUID": "bfb59c40-6c98-4aa8-9f87-e1f9dd832ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/check/remove secret",
                  "fullTitle": "examples envelope add/check/remove secret",
                  "timedOut": false,
                  "duration": 217,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// check secret\nconst check1 = derived.hasEnvelopedSecret('mySecret') // -> true\n// remove secret\nderived.removeEnvelopedSecret('mySecret')\n// check secret\nconst check2 = derived.hasEnvelopedSecret('mySecret') // -> false\ncheck1.should.be.true\ncheck2.should.be.false",
                  "err": {},
                  "uuid": "d216a58f-8bde-488d-a000-f64407d25390",
                  "parentUUID": "bfb59c40-6c98-4aa8-9f87-e1f9dd832ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add/get key",
                  "fullTitle": "examples envelope add/get key",
                  "timedOut": false,
                  "duration": 218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
                  "err": {},
                  "uuid": "d81293b6-9b34-4cad-9850-7ab9959c9b17",
                  "parentUUID": "bfb59c40-6c98-4aa8-9f87-e1f9dd832ba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4acaa75-a8ac-4705-9b22-4c26baea31b7",
                "d216a58f-8bde-488d-a000-f64407d25390",
                "d81293b6-9b34-4cad-9850-7ab9959c9b17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 654,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "49bef397-899d-4384-8611-40ffc9ad3295",
              "title": "crypto",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getSubkey",
                  "fullTitle": "examples crypto getSubkey",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte sub-key for \"eth\" using hkdf/sha256\nconst subkey = await key.getSubkey(16, 'eth', 'sha256')\nsubkey.toString('hex') // -> 54ad9e5acbc1c33b08a15dd79126e9c9",
                  "err": {},
                  "uuid": "b296a493-4e5e-4a4a-ba4e-3e273fb8ed22",
                  "parentUUID": "49bef397-899d-4384-8611-40ffc9ad3295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getSymmetricKey",
                  "fullTitle": "examples crypto getSymmetricKey",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte AES128 sub-key\nconst subkey = await key.getSymmetricKey('aes128')\nsubkey.toString('hex') // -> c985454e008e5ecc695e865d339cb2be",
                  "err": {},
                  "uuid": "5d4e8997-610a-480e-81c2-8c6cf23b6ab1",
                  "parentUUID": "49bef397-899d-4384-8611-40ffc9ad3295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getAsymmetricKeyPair",
                  "fullTitle": "examples crypto getAsymmetricKeyPair",
                  "timedOut": false,
                  "duration": 149,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// get 16-byte RSA1024 sub-key\nconst subkey = await key.getAsymmetricKeyPair('rsa1024') // -> { privateKey: Uint8Array, publicKey: Uint8Array }\nsubkey.should.be.a('object')",
                  "err": {},
                  "uuid": "4ff1e2ff-a2eb-4439-9ecd-321e77f1a2b1",
                  "parentUUID": "49bef397-899d-4384-8611-40ffc9ad3295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sign/verify",
                  "fullTitle": "examples crypto sign/verify",
                  "timedOut": false,
                  "duration": 242,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// sign message using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature using RSA-1024\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "e1df9512-827a-44ff-9a02-5ac1a2b1f1ec",
                  "parentUUID": "49bef397-899d-4384-8611-40ffc9ad3295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "encrypt/decrypt",
                  "fullTitle": "examples crypto encrypt/decrypt",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// encrypt message using 3DES\nconst encrypted = await key.encrypt('hello world', '3des')\n// decrypt message using 3DES\nconst decrypted = await key.decrypt(encrypted, '3des')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
                  "err": {},
                  "uuid": "5e2c206d-661a-47be-a46a-bc34b463415c",
                  "parentUUID": "49bef397-899d-4384-8611-40ffc9ad3295",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b296a493-4e5e-4a4a-ba4e-3e273fb8ed22",
                "5d4e8997-610a-480e-81c2-8c6cf23b6ab1",
                "4ff1e2ff-a2eb-4439-9ecd-321e77f1a2b1",
                "e1df9512-827a-44ff-9a02-5ac1a2b1f1ec",
                "5e2c206d-661a-47be-a46a-bc34b463415c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 708,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6547cab7-f246-4140-92d7-5316b8ef0673",
              "title": "auth",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\examples.js",
              "file": "\\test\\examples\\examples.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "f762aef3-a6b9-41a2-a2ad-5b8397b2a8e5",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 219,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "542917e6-87d7-4866-ae34-f8094c3e056f",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// challenger: create random challenge\nconst challenge = crypto.randomBytes(32)\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "d86157b9-5afe-44dd-94eb-581e474ac762",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "c1a828e2-6ceb-49e1-bc68-5bbd1f1dc802",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 300,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "26bcc30a-6246-4f33-aece-31a5f9fa95aa",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "examples auth ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\nconst identity = Buffer.from('Challenger')\n// responder: generate response\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\n// verifier: verify response\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey) // -> true\nvalid.should.be.true",
                  "err": {},
                  "uuid": "fc53a238-8f07-480a-b3a7-5e13724a4505",
                  "parentUUID": "6547cab7-f246-4140-92d7-5316b8ef0673",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f762aef3-a6b9-41a2-a2ad-5b8397b2a8e5",
                "542917e6-87d7-4866-ae34-f8094c3e056f",
                "d86157b9-5afe-44dd-94eb-581e474ac762",
                "c1a828e2-6ceb-49e1-bc68-5bbd1f1dc802",
                "26bcc30a-6246-4f33-aece-31a5f9fa95aa",
                "fc53a238-8f07-480a-b3a7-5e13724a4505"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 945,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "94bd16a7-b603-4766-8c77-c35e4c225f22",
            "455bdb18-680a-44e8-bba3-ce505c936eea",
            "85bce317-8d84-4ac7-b967-57ba12dffd5f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 249,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b781124f-5a54-4c9e-89eb-410f3842db05",
          "title": "tutorials",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\examples\\tutorials.js",
          "file": "\\test\\examples\\tutorials.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Auth",
              "fullTitle": "tutorials Auth",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3116ba65-52cb-42f0-b1b8-754e31cfb715",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloepd Key",
              "fullTitle": "tutorials Enveloepd Key",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped rsa1024 key\nawait key.addEnvelopedKey('myKey', 'rsa1024')\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve enveloped key\nconst enveloped = await derived.getEnvelopedKey('myKey') // -> PrivateKeyObject\nenveloped.should.be.a('object')",
              "err": {},
              "uuid": "43c66cf7-422b-4f00-97dd-56e898fcc67f",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Enveloped Secret",
              "fullTitle": "tutorials Enveloped Secret",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup multi-factor derived key\nconst key = await mfkdf.setup.key([await mfkdf.setup.factors.password('password')])\n// add enveloped secret to key\nawait key.addEnvelopedSecret('mySecret', Buffer.from('hello world'))\n// later... derive key\nconst derived = await mfkdf.derive.key(key.policy, { password: mfkdf.derive.factors.password('password') })\n// retrieve secret\nconst secret = await derived.getEnvelopedSecret('mySecret')\nsecret.toString() // -> hello world\nsecret.toString().should.equal('hello world')",
              "err": {},
              "uuid": "b234b8f0-4abb-4a72-8ec0-fc575cb42419",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Persistence",
              "fullTitle": "tutorials Persistence",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8 })\nsetup.key.toString('hex') // -> 64587f2a0e65dc3c\n// persist one of the factors\nconst factor2 = setup.persistFactor('password2')\n// derive key with 2 factors\nconst derived = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.persisted(factor2),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderived.key.toString('hex') // -> 64587f2a0e65dc3c\nsetup.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "ac51c4ff-204c-47b8-b8f3-afc11d2fea7d",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signing & Verification",
              "fullTitle": "tutorials Signing & Verification",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// sign message with derived key using RSA-1024\nconst signature = await key.sign('hello world', 'rsa1024')\n// verify signature\nconst valid = await key.verify('hello world', signature, 'rsa1024') // -> true\nvalid.should.be.true",
              "err": {},
              "uuid": "5f277737-cf3c-4cc6-ab90-1493aea75721",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Encryption & Decryption",
              "fullTitle": "tutorials Encryption & Decryption",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 3-factor multi-factor derived key\nconst key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.uuid()\n])\n// encrypt secret with derived key using AES-256\nconst encrypted = await key.encrypt('hello world', 'aes256')\n// ... later, decrypt secret with derived key\nconst decrypted = await key.decrypt(encrypted, 'aes256')\ndecrypted.toString() // -> hello world\ndecrypted.toString().should.equal('hello world')",
              "err": {},
              "uuid": "f123bf6c-bb19-4638-9b5b-5f57a43f2e9a",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reconstitution",
              "fullTitle": "tutorials Reconstitution",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// reconstitute key to change password\nawait setup.recoverFactor(await mfkdf.setup.factors.password('newPassword'))\n// derive key using the 3 factors (including the new password)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password: mfkdf.derive.factors.password('newPassword'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771",
              "err": {},
              "uuid": "1e2339ff-df44-464a-b036-aecda2a63255",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Stacking",
              "fullTitle": "tutorials Stacking",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup key with stack factor\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ]),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { size: 8, threshold: 1 })\nsetup.key.toString('hex') // -> 01d0c7236adf2516\n// derive key with stack factor\nconst derive = await mfkdf.derive.key(setup.policy, {\n  stack: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nderive.key.toString('hex') // -> 01d0c7236adf2516\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))",
              "err": {},
              "uuid": "98577a0a-7bc3-441d-9bec-3bf2aef3e348",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Policy",
              "fullTitle": "tutorials Policy",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Setup policy-based multi-factor derived key\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\npolicy.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// Check which factors can derive key\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']) // -> true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']) // -> false\n// Derive policy-based multi-factor derived key\nconst derived = await mfkdf.policy.derive(policy.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderived.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password3']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\npolicy.key.toString('hex').should.equal(derived.key.toString('hex'))",
              "err": {},
              "uuid": "435afc99-660a-4d22-8e2d-b63c6110ef30",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Threshold",
              "fullTitle": "tutorials Threshold",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 2-of-3 multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16, threshold: 2 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\nsetup.key.toString('hex').should.include(derive.key.toString('hex'))",
              "err": {},
              "uuid": "1520f35d-c1e0-458a-a5a3-9c9922af7de3",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Entropy",
              "fullTitle": "tutorials Entropy",
              "timedOut": false,
              "duration": 647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// password-only 256-bit key\nconst key1 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour')\n], { size: 32 })\nkey1.entropyBits.real // -> 16.53929514807314\n// password-and-hotp 256-bit key\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour'),\n  await mfkdf.setup.factors.hotp()\n], { size: 32 })\nkey2.entropyBits.real // -> 36.470863717397314\nMath.floor(key1.entropyBits.real).should.equal(16)\nMath.floor(key2.entropyBits.real).should.equal(36)\nconst weak = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('abcdefgh')\n], { size: 32 })\n// High theoretical entropy due to long password\nweak.entropyBits.theoretical // -> 64\n// Low real entropy due to weak password\nweak.entropyBits.real // -> 5.044394119358453\nMath.floor(weak.entropyBits.theoretical).should.equal(64)\nMath.floor(weak.entropyBits.real).should.equal(5)\nconst all = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32 })\nconst threshold = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('Tr0ub4dour', { id: 'password1' }),\n  await mfkdf.setup.factors.uuid(),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password2' })\n], { size: 32, threshold: 2 })\nall.entropyBits.real // -> 143.5836892674316\nthreshold.entropyBits.real // -> 21.583689267431595\nMath.floor(all.entropyBits.real).should.equal(143)\nMath.floor(threshold.entropyBits.real).should.equal(21)\nconst policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\npolicy.entropyBits.real // -> 45.27245744876085\nMath.floor(policy.entropyBits.real).should.equal(45)",
              "err": {},
              "uuid": "3c5c8996-f815-44f5-9d47-12aaf96829e9",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multi-Factor Key Derivation",
              "fullTitle": "tutorials Multi-Factor Key Derivation",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// setup 16 byte 3-factor multi-factor derived key with a password, HOTP code, and UUID code\nconst setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password'),\n  await mfkdf.setup.factors.hotp({ secret: Buffer.from('hello world') }),\n  await mfkdf.setup.factors.uuid({ uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' })\n], { size: 16 })\nsetup.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save key policy\nconst policy = JSON.stringify(setup.policy)\n// derive key using the 3 factors\nconst derive = await mfkdf.derive.key(JSON.parse(policy), {\n  password: mfkdf.derive.factors.password('password'),\n  hotp: mfkdf.derive.factors.hotp(365287),\n  uuid: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d')\n})\nderive.key.toString('hex') // -> 34d20ced439ec2f871c96ca377f25771\n// save new key policy\nconst newPolicy = JSON.stringify(derive.policy)\nsetup.key.toString('hex').should.equal(derive.key.toString('hex'))\nnewPolicy.should.be.a('string')",
              "err": {},
              "uuid": "60238aab-bbcd-4861-8803-092a2e57463b",
              "parentUUID": "b781124f-5a54-4c9e-89eb-410f3842db05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3116ba65-52cb-42f0-b1b8-754e31cfb715",
            "43c66cf7-422b-4f00-97dd-56e898fcc67f",
            "b234b8f0-4abb-4a72-8ec0-fc575cb42419",
            "ac51c4ff-204c-47b8-b8f3-afc11d2fea7d",
            "5f277737-cf3c-4cc6-ab90-1493aea75721",
            "f123bf6c-bb19-4638-9b5b-5f57a43f2e9a",
            "1e2339ff-df44-464a-b036-aecda2a63255",
            "98577a0a-7bc3-441d-9bec-3bf2aef3e348",
            "435afc99-660a-4d22-8e2d-b63c6110ef30",
            "1520f35d-c1e0-458a-a5a3-9c9922af7de3",
            "3c5c8996-f815-44f5-9d47-12aaf96829e9",
            "60238aab-bbcd-4861-8803-092a2e57463b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2710,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d1ef6aca-389c-4a02-8a5b-63de48d629ed",
          "title": "factors/hmacsha1",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
          "file": "\\test\\factors\\hmacsha1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "hmacsha1",
              "fullTitle": "factors/hmacsha1 hmacsha1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = Buffer.from('e60ab41d81d5494a90593d484d68f676a60a2450', 'hex')\nconst challenge = Buffer.from('hello')\nconst res = crypto.createHmac('sha1', key)\n  .update(challenge)\n  .digest('hex')\nconst real = '1292826fd25cdc59e5f83d3e11aa561610562875'\nres.should.equal(real)",
              "err": {},
              "uuid": "0aef7a6f-b1b4-4d0c-b302-d5c937ec8b0a",
              "parentUUID": "d1ef6aca-389c-4a02-8a5b-63de48d629ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "dynamic",
              "fullTitle": "factors/hmacsha1 dynamic",
              "timedOut": false,
              "duration": 364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hmacsha1()\n])\nconst secret = setup.outputs.hmacsha1.secret\nconst challenge1 = Buffer.from(setup.policy.factors[0].params.challenge, 'hex')\nconst response1 = crypto.createHmac('sha1', secret)\n  .update(challenge1)\n  .digest()\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response1)\n})\nconst challenge2 = Buffer.from(derive1.policy.factors[0].params.challenge, 'hex')\nconst response2 = crypto.createHmac('sha1', secret)\n  .update(challenge2)\n  .digest()\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(response2)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))",
              "err": {},
              "uuid": "4ae17e9e-b00f-4368-8671-9cbeac3b8d11",
              "parentUUID": "d1ef6aca-389c-4a02-8a5b-63de48d629ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/hmacsha1 static",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = '{\"$schema\":\"https://mfkdf.com/schema/v1.0.0/policy.json\",\"$id\":\"8b6874f7-5dbb-4196-bc89-347cd6b02dc6\",\"size\":32,\"threshold\":1,\"salt\":\"nhh2/3AwOf2r2n7uRONoM697IjEKsHfAeyo8NxF1G94=\",\"kdf\":{\"type\":\"argon2id\",\"params\":{\"rounds\":2,\"memory\":24576,\"parallelism\":1}},\"factors\":[{\"id\":\"hmacsha1\",\"type\":\"hmacsha1\",\"pad\":\"PsS1B6fPovsuMfKZinw6hn0kTw1VEpoM8jRFR/8SyT0=\",\"params\":{\"challenge\":\"5a5f71c3a584b797d3c8f7d0f59653a2234781b06f2540df42946aa380f634a3430e6aad294e392543cc4ecd3da039bfa8041b179d14afd360a104e3354f01dd\",\"pad\":\"f8d33204be0436f2629d5173e9bd3fc1953cf982\"}}]}'\nconst derive = await mfkdf.derive.key(JSON.parse(setup), {\n  hmacsha1: mfkdf.derive.factors.hmacsha1(Buffer.from('0f09b8c89bfefdbc4909432685358eca79912b6a', 'hex'))\n})\nderive.key.toString('hex').should.equal('ca76d2b456be4e40ba6ef65a68fbfc71bf27a0ca3e0fa4481a2ddf29fb6b65d9')",
              "err": {},
              "uuid": "8e0668c7-2a39-4415-b37e-2b0cf72e1054",
              "parentUUID": "d1ef6aca-389c-4a02-8a5b-63de48d629ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hmacsha1.js",
              "file": "\\test\\factors\\hmacsha1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "id/type",
                  "fullTitle": "factors/hmacsha1 errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "3d40bc67-70a6-40b8-bd5a-e4d8af9bd2da",
                  "parentUUID": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hmacsha1 errors id/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "07b8a0f3-27aa-4d93-8474-a3b661bcd9a7",
                  "parentUUID": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hmacsha1 errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "11d9b447-12ac-4821-ab6f-49fe0ea74c65",
                  "parentUUID": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/range",
                  "fullTitle": "factors/hmacsha1 errors secret/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hmacsha1({ secret: Buffer.from('12345') }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "b217bf22-6b65-4d56-a8a8-48524d7ef7f9",
                  "parentUUID": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "response/type",
                  "fullTitle": "factors/hmacsha1 errors response/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hmacsha1(12345)\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "faf04b7e-8677-430e-b5d6-3d354e644a15",
                  "parentUUID": "a88b2813-7387-42c3-bd29-8bcd5bb9343f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d40bc67-70a6-40b8-bd5a-e4d8af9bd2da",
                "07b8a0f3-27aa-4d93-8474-a3b661bcd9a7",
                "11d9b447-12ac-4821-ab6f-49fe0ea74c65",
                "b217bf22-6b65-4d56-a8a8-48524d7ef7f9",
                "faf04b7e-8677-430e-b5d6-3d354e644a15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0aef7a6f-b1b4-4d0c-b302-d5c937ec8b0a",
            "4ae17e9e-b00f-4368-8671-9cbeac3b8d11",
            "8e0668c7-2a39-4415-b37e-2b0cf72e1054"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 481,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "593bd525-adaf-4108-b0eb-2390d2d82e79",
          "title": "factors/hotp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
          "file": "\\test\\factors\\hotp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/hotp valid",
              "timedOut": false,
              "duration": 454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp({\n    secret: Buffer.from('hello world')\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.hotp(365287)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  hotp: mfkdf.derive.factors.hotp(891649)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  hotp: mfkdf.derive.factors.hotp(795484)\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nderive1.key.toString('hex').should.equal(derive2.key.toString('hex'))\nderive2.key.toString('hex').should.equal(derive3.key.toString('hex'))",
              "err": {},
              "uuid": "f8f531cd-ac0d-40fa-b6d1-95c1de9b44bd",
              "parentUUID": "593bd525-adaf-4108-b0eb-2390d2d82e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/hotp defaults",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp()\n])",
              "err": {},
              "uuid": "126d36f6-6922-45b5-8e99-dd8a2617076c",
              "parentUUID": "593bd525-adaf-4108-b0eb-2390d2d82e79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\hotp.js",
              "file": "\\test\\factors\\hotp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/hotp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.hotp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "f8f668fd-7526-4899-8f9b-9b340a393f61",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/hotp errors id/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "46f35613-dd05-4e70-a718-624b505e60f7",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/hotp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2ab35942-6952-4c32-a477-cc227a1b1c5f",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/hotp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "957a7f69-7ef2-47f9-ad67-e8d98eaf7b8e",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/hotp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5c44af1c-6d8f-4b4a-8ec3-6465efd3f509",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/hotp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "2338eeb2-d9d7-4cf2-8b17-52bce8ef61a7",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/hotp errors hash/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.hotp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "7601e128-9f65-452d-8c9b-7b8451bcc2cb",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/hotp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.hotp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "9c383ea9-2342-4cd3-a66f-b884d9ab2c5b",
                  "parentUUID": "4deb4ff6-fd3e-4025-a4c9-24369c63cc99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8f668fd-7526-4899-8f9b-9b340a393f61",
                "46f35613-dd05-4e70-a718-624b505e60f7",
                "2ab35942-6952-4c32-a477-cc227a1b1c5f",
                "957a7f69-7ef2-47f9-ad67-e8d98eaf7b8e",
                "5c44af1c-6d8f-4b4a-8ec3-6465efd3f509",
                "2338eeb2-d9d7-4cf2-8b17-52bce8ef61a7",
                "7601e128-9f65-452d-8c9b-7b8451bcc2cb",
                "9c383ea9-2342-4cd3-a66f-b884d9ab2c5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "f8f531cd-ac0d-40fa-b6d1-95c1de9b44bd",
            "126d36f6-6922-45b5-8e99-dd8a2617076c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 560,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "263702b2-6dfb-4428-9742-3d2db3e6854e",
          "title": "persistence",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\persistence.js",
          "file": "\\test\\factors\\persistence.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "persistence valid",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.hotp(),\n  await mfkdf.setup.factors.password('password')\n])\nconst hotp = setup.persistFactor('hotp')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  hotp: mfkdf.derive.factors.persisted(hotp),\n  password: mfkdf.derive.factors.password('password')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "1f2ef2c2-2218-4049-9fab-63e27e228f43",
              "parentUUID": "263702b2-6dfb-4428-9742-3d2db3e6854e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "share/type",
              "fullTitle": "persistence share/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.derive.factors.persisted('12345')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "aaa668f2-eaea-4010-a7f8-80354d4291d0",
              "parentUUID": "263702b2-6dfb-4428-9742-3d2db3e6854e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f2ef2c2-2218-4049-9fab-63e27e228f43",
            "aaa668f2-eaea-4010-a7f8-80354d4291d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e823c743-9e63-4410-abb3-89a48b763cb5",
          "title": "factors/stack",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\stack.js",
          "file": "\\test\\factors\\stack.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "errors/id/type",
              "fullTitle": "factors/stack errors/id/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "3faf5bc6-55b0-4c39-9552-af1b01667a76",
              "parentUUID": "e823c743-9e63-4410-abb3-89a48b763cb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "errors/id/range",
              "fullTitle": "factors/stack errors/id/range",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.stack([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "e53cc5d4-ce25-42f0-82a1-06845fc825e4",
              "parentUUID": "e823c743-9e63-4410-abb3-89a48b763cb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "factors/stack valid",
              "timedOut": false,
              "duration": 349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' })\n  ], { id: 'stack1' }),\n  await mfkdf.setup.factors.stack([\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ], { id: 'stack2' })\n], { threshold: 1 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  stack1: mfkdf.derive.factors.stack({\n    password1: mfkdf.derive.factors.password('password1'),\n    password2: mfkdf.derive.factors.password('password2')\n  })\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  stack2: mfkdf.derive.factors.stack({\n    password3: mfkdf.derive.factors.password('password3'),\n    password4: mfkdf.derive.factors.password('password4')\n  })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "3fcaef8c-cd1b-4ed8-8bb9-b97ead139dbe",
              "parentUUID": "e823c743-9e63-4410-abb3-89a48b763cb5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3faf5bc6-55b0-4c39-9552-af1b01667a76",
            "e53cc5d4-ce25-42f0-82a1-06845fc825e4",
            "3fcaef8c-cd1b-4ed8-8bb9-b97ead139dbe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 351,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d949dd5b-3c80-496e-9eb5-5a6d4bad2f01",
          "title": "factors/totp",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
          "file": "\\test\\factors\\totp.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "dynamic",
              "fullTitle": "factors/totp dynamic",
              "timedOut": false,
              "duration": 1143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])\nconst code = parseInt(speakeasy.totp({\n  secret: setup.outputs.totp.secret.toString('hex'),\n  encoding: 'hex',\n  step: setup.outputs.totp.period,\n  algorithm: setup.outputs.totp.algorithm,\n  digits: setup.outputs.totp.digits\n}))\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  totp: mfkdf.derive.factors.totp(code)\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "2bd949ae-569a-47d7-bb21-33b0f14c4618",
              "parentUUID": "d949dd5b-3c80-496e-9eb5-5a6d4bad2f01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "static",
              "fullTitle": "factors/totp static",
              "timedOut": false,
              "duration": 1160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1650430943604 })\n})\nconst derive2 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(99922, { time: 1650430991083 })\n})\nconst derive3 = await mfkdf.derive.key(derive1.policy, {\n  totp: mfkdf.derive.factors.totp(398884, { time: 1650431018392 })\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))",
              "err": {},
              "uuid": "503a37c7-642d-415c-af4e-f3776b368036",
              "parentUUID": "d949dd5b-3c80-496e-9eb5-5a6d4bad2f01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "factors/totp defaults",
              "timedOut": false,
              "duration": 840,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp()\n])",
              "err": {},
              "uuid": "ccac1fd0-b0d0-4ab3-ad9f-e4b5d6dd13ca",
              "parentUUID": "d949dd5b-3c80-496e-9eb5-5a6d4bad2f01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\totp.js",
              "file": "\\test\\factors\\totp.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "code/type",
                  "fullTitle": "factors/totp errors code/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp('hello')\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "b2df1095-7969-4ec4-a02c-e55f3e85d2aa",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "code/window",
                  "fullTitle": "factors/totp errors code/window",
                  "timedOut": false,
                  "duration": 836,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({\n    secret: Buffer.from('hello world'),\n    time: 1650430806597\n  })\n])\nmfkdf.derive.key(setup.policy, {\n  totp: mfkdf.derive.factors.totp(528258, { time: 1750430943604 })\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "c573e70f-cf3d-494f-bc77-77baeaa8c008",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: 'hello' })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "33e853cc-66ef-4260-9583-a832962e78b8",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.derive.factors.totp(12345, { time: -1 })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "559d6d7d-6717-4b8f-8395-a395155c1d6e",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/type",
                  "fullTitle": "factors/totp errors id/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: 12345\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "49314030-7edc-4520-9699-3490f55aab40",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id/range",
                  "fullTitle": "factors/totp errors id/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  id: ''\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "5c5ea911-2112-499e-b136-a287c4c642ae",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/type",
                  "fullTitle": "factors/totp errors digits/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7383f902-fbd5-4296-afe5-f93afee0cebd",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/low",
                  "fullTitle": "factors/totp errors digits/low",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 4\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "15b5261f-6ec6-4329-b373-1f4f6237e22f",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "digits/high",
                  "fullTitle": "factors/totp errors digits/high",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  digits: 9\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "83153ca6-d64e-43b4-8c51-3913d5ba260e",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "hash/range",
                  "fullTitle": "factors/totp errors hash/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.factors.totp({\n  secret: Buffer.from('hello world'),\n  hash: 'sha123'\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "94aad438-3a71-497c-906e-1ef6f1c038c4",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "secret/type",
                  "fullTitle": "factors/totp errors secret/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  secret: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bc75b4e4-364a-48e7-851d-d9b87bdb6005",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/type",
                  "fullTitle": "factors/totp errors time/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "689c932f-e3fd-4424-88cd-92bc38574f71",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "time/range",
                  "fullTitle": "factors/totp errors time/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  time: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "3284819b-5d81-42bb-9956-ce4000adc2e8",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/type",
                  "fullTitle": "factors/totp errors step/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "7a0bcc65-f091-4c75-9d9d-65160d060d48",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "step/range",
                  "fullTitle": "factors/totp errors step/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  step: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "152c548d-ad25-493c-8f3c-ac410809aa32",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/type",
                  "fullTitle": "factors/totp errors window/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: 'hello'\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f9b8c3b7-1884-4c0f-bc95-1aaf6b50e1a6",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "window/range",
                  "fullTitle": "factors/totp errors window/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.factors.totp({\n  window: -1\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a6d49842-9e84-4386-b1d6-d3eb67b84503",
                  "parentUUID": "2417b59a-e028-48a4-8ee8-0480b2cf8599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2df1095-7969-4ec4-a02c-e55f3e85d2aa",
                "c573e70f-cf3d-494f-bc77-77baeaa8c008",
                "33e853cc-66ef-4260-9583-a832962e78b8",
                "559d6d7d-6717-4b8f-8395-a395155c1d6e",
                "49314030-7edc-4520-9699-3490f55aab40",
                "5c5ea911-2112-499e-b136-a287c4c642ae",
                "7383f902-fbd5-4296-afe5-f93afee0cebd",
                "15b5261f-6ec6-4329-b373-1f4f6237e22f",
                "83153ca6-d64e-43b4-8c51-3913d5ba260e",
                "94aad438-3a71-497c-906e-1ef6f1c038c4",
                "bc75b4e4-364a-48e7-851d-d9b87bdb6005",
                "689c932f-e3fd-4424-88cd-92bc38574f71",
                "3284819b-5d81-42bb-9956-ce4000adc2e8",
                "7a0bcc65-f091-4c75-9d9d-65160d060d48",
                "152c548d-ad25-493c-8f3c-ac410809aa32",
                "f9b8c3b7-1884-4c0f-bc95-1aaf6b50e1a6",
                "a6d49842-9e84-4386-b1d6-d3eb67b84503"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 838,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "2bd949ae-569a-47d7-bb21-33b0f14c4618",
            "503a37c7-642d-415c-af4e-f3776b368036",
            "ccac1fd0-b0d0-4ab3-ad9f-e4b5d6dd13ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9f38c5bf-b1cd-4251-afca-a6c00654cbad",
          "title": "factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\factors\\uuid.js",
          "file": "\\test\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "factors/uuid valid",
              "timedOut": false,
              "duration": 582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nsetup.outputs.should.deep.equal({\n  uuid1: { uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' },\n  uuid2: { uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' },\n  uuid3: { uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' }\n})\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.equal(derive4.key.toString('hex'))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive1.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive2.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive3.policy))\nJSON.stringify(setup.policy).should.equal(JSON.stringify(derive4.policy))",
              "err": {},
              "uuid": "ec1761e2-4170-444a-92ce-07a27f206fe3",
              "parentUUID": "9f38c5bf-b1cd-4251-afca-a6c00654cbad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "factors/uuid invalid",
              "timedOut": false,
              "duration": 577,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.uuid({ id: 'uuid1', uuid: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid2', uuid: '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed' }),\n  await mfkdf.setup.factors.uuid({ id: 'uuid3', uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\n], { threshold: 2 })\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6e'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed')\n})\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0c')\n})\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6b'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0d')\n})\nconst derive4 = await mfkdf.derive.key(setup.policy, {\n  uuid1: mfkdf.derive.factors.uuid('9b1deb4d-3b7d-4bad-9bdd-ab8dfbbd4bed'),\n  uuid2: mfkdf.derive.factors.uuid('1b9d6bcd-bbfd-4b2d-9b5d-2b0d7b3dcb6d'),\n  uuid3: mfkdf.derive.factors.uuid('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b')\n})\nsetup.key.toString('hex').should.not.equal(derive1.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive2.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive3.key.toString('hex'))\nsetup.key.toString('hex').should.not.equal(derive4.key.toString('hex'))",
              "err": {},
              "uuid": "d358aeab-e52a-43ce-a926-f886ff5d26bb",
              "parentUUID": "9f38c5bf-b1cd-4251-afca-a6c00654cbad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec1761e2-4170-444a-92ce-07a27f206fe3",
            "d358aeab-e52a-43ce-a926-f886ff5d26bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1159,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a152768b-19ac-438c-9586-4996f032079c",
          "title": "authentication",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
          "file": "\\test\\features\\authentication.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getKey/auth",
              "fullTitle": "authentication getKey/auth",
              "timedOut": false,
              "duration": 9819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nlet authKey\nlet encKey\nauthKey = await key.getSymmetricKey('des', true)\nencKey = await key.getSymmetricKey('des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('3des', true)\nencKey = await key.getSymmetricKey('3des', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes128', true)\nencKey = await key.getSymmetricKey('aes128', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes192', true)\nencKey = await key.getSymmetricKey('aes192', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getSymmetricKey('aes256', true)\nencKey = await key.getSymmetricKey('aes256', false)\nauthKey.toString('hex').should.not.equal(encKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('ed25519', true)\nencKey = await key.getAsymmetricKeyPair('ed25519', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa1024', true)\nencKey = await key.getAsymmetricKeyPair('rsa1024', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa2048', true)\nencKey = await key.getAsymmetricKeyPair('rsa2048', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))\nauthKey = await key.getAsymmetricKeyPair('rsa3072', true)\nencKey = await key.getAsymmetricKeyPair('rsa3072', false)\nauthKey.publicKey.toString('hex').should.not.equal(encKey.publicKey.toString('hex'))",
              "err": {},
              "uuid": "51a4d48c-59fe-4d6b-a679-4eeaaac801d2",
              "parentUUID": "a152768b-19ac-438c-9586-4996f032079c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
              "title": "valid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "6badaded-69c1-454a-9b8a-82aaed0be8a6",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 209,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "86494084-9683-47f6-b4e9-b740c6bc4f05",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "8ee8dfab-13ac-4698-b1b1-8a4ea2c94bfe",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "85429319-6738-4aeb-851f-b34c4d425846",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 390,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "554893ee-6742-4fab-b0f0-3f6764b734c1",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication valid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.true",
                  "err": {},
                  "uuid": "4f330da1-dcfa-4614-be3a-1d48da33b59d",
                  "parentUUID": "d59a1fe1-1b65-432a-ab95-aa77a0b99132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6badaded-69c1-454a-9b8a-82aaed0be8a6",
                "86494084-9683-47f6-b4e9-b740c6bc4f05",
                "8ee8dfab-13ac-4698-b1b1-8a4ea2c94bfe",
                "85429319-6738-4aeb-851f-b34c4d425846",
                "554893ee-6742-4fab-b0f0-3f6764b734c1",
                "4f330da1-dcfa-4614-be3a-1d48da33b59d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1020,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
              "title": "invalid",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\authentication.js",
              "file": "\\test\\features\\authentication.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ISO97982PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthSymmetric(challenge, identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthSymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "8e980d58-8ad8-435a-b112-8d1f686bfcfb",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 313,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthAsymmetric(challenge, identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthAsymmetric(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "64bb5a2e-7fdc-4a77-9dbe-ea5ed7153f15",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97982PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97982PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 211,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst challenge = Buffer.from('hello world')\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97982PassUnilateralAuthCCF(challenge, identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97982PassUnilateralAuthCCF(challenge, identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "d8f1344d-306f-4f94-806c-b144f7867531",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric",
                  "timedOut": false,
                  "duration": 212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key2.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "0f6e9136-cecd-4796-a081-c2daa8f6c761",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric",
                  "timedOut": false,
                  "duration": 406,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key2.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "ac776dfd-74ed-463a-8a7a-26091035a717",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF",
                  "timedOut": false,
                  "duration": 214,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst key2 = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key2.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "cb3e3ed2-0a33-4b50-821b-228acac39a8b",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthSymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthSymmetric/window",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthSymmetric(identity)\nconst authKey = await key.ISO9798SymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthSymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "7732bba1-6476-4d9c-ac5b-5c70403e670a",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthAsymmetric/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthAsymmetric/window",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthAsymmetric(identity)\nconst authKey = await key.ISO9798AsymmetricKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthAsymmetric(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "a3bb04ee-64af-4e2d-9d76-a33e9cfa7722",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "ISO97981PassUnilateralAuthCCF/window",
                  "fullTitle": "authentication invalid ISO97981PassUnilateralAuthCCF/window",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' })\n])\nconst identity = Buffer.from('bob')\nconst response = await key.ISO97981PassUnilateralAuthCCF(identity)\nconst authKey = await key.ISO9798CCFKey()\nconst valid = await mfkdf.auth.VerifyISO97981PassUnilateralAuthCCF(identity, response, authKey, -1)\nvalid.should.be.false",
                  "err": {},
                  "uuid": "94981ec9-467f-4ff1-8e73-2ec4337ac8e9",
                  "parentUUID": "6f22aec0-0555-4ad9-95d6-1f19221408c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e980d58-8ad8-435a-b112-8d1f686bfcfb",
                "64bb5a2e-7fdc-4a77-9dbe-ea5ed7153f15",
                "d8f1344d-306f-4f94-806c-b144f7867531",
                "0f6e9136-cecd-4796-a081-c2daa8f6c761",
                "ac776dfd-74ed-463a-8a7a-26091035a717",
                "cb3e3ed2-0a33-4b50-821b-228acac39a8b",
                "7732bba1-6476-4d9c-ac5b-5c70403e670a",
                "a3bb04ee-64af-4e2d-9d76-a33e9cfa7722",
                "94981ec9-467f-4ff1-8e73-2ec4337ac8e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1986,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "51a4d48c-59fe-4d6b-a679-4eeaaac801d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6ca5b855-6f04-4764-878d-94df6ad14c80",
          "title": "entropy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\entropy.js",
          "file": "\\test\\features\\entropy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "3-of-3",
              "fullTitle": "entropy 3-of-3",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 3 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 3)",
              "err": {},
              "uuid": "69635ca8-0c34-48ad-a07e-dff71ef5279a",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-3",
              "fullTitle": "entropy 2-of-3",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) + Math.log2(33)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 2)",
              "err": {},
              "uuid": "1ab76959-aee6-4903-948b-6e72f645a26f",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-3",
              "fullTitle": "entropy 1-of-3",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n  await mfkdf.setup.factors.password('ABCDEFGH', { id: 'password2' }),\n  await mfkdf.setup.factors.password('abcdefgh', { id: 'password3' })\n], { threshold: 1 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4)))\nsetup.entropyBits.theoretical.should.equal(8 * 8 * 1)",
              "err": {},
              "uuid": "f5cba519-e785-400e-a154-0c24ab2eeb94",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "policy",
              "fullTitle": "entropy policy",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('12345678', { id: 'password1' }),\n    await mfkdf.policy.any([\n      await mfkdf.setup.factors.password('12345678', { id: 'password7' }),\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password2' }),\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password5' }),\n          await mfkdf.setup.factors.password('Tr0ub4dour&3', { id: 'password6' })\n        )\n      )\n    ])\n  )\n)\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(4) * 2))",
              "err": {},
              "uuid": "83afa24b-0648-4512-aa99-a4aea8d75981",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-6",
              "fullTitle": "entropy totp/hotp-6",
              "timedOut": false,
              "duration": 837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp(),\n  await mfkdf.setup.factors.hotp()\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 6) * 2))",
              "err": {},
              "uuid": "db030893-d4f4-450c-94d8-947ac61a2245",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "totp/hotp-8",
              "fullTitle": "entropy totp/hotp-8",
              "timedOut": false,
              "duration": 753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.totp({ digits: 8 }),\n  await mfkdf.setup.factors.hotp({ digits: 8 })\n], { threshold: 2 })\nMath.floor(setup.entropyBits.real).should.equal(Math.floor(Math.log2(10 ** 8) * 2))",
              "err": {},
              "uuid": "c08adafd-6456-4d4e-8bb7-47eb8089b574",
              "parentUUID": "6ca5b855-6f04-4764-878d-94df6ad14c80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69635ca8-0c34-48ad-a07e-dff71ef5279a",
            "1ab76959-aee6-4903-948b-6e72f645a26f",
            "f5cba519-e785-400e-a154-0c24ab2eeb94",
            "83afa24b-0648-4512-aa99-a4aea8d75981",
            "db030893-d4f4-450c-94d8-947ac61a2245",
            "c08adafd-6456-4d4e-8bb7-47eb8089b574"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2021,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "97586aca-50c7-44bc-8d9f-c9752122d5a0",
          "title": "enveloping",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
          "file": "\\test\\features\\envelope.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "secrets",
              "fullTitle": "enveloping secrets",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nawait setup.addEnvelopedSecret('key2', input)\nawait setup.addEnvelopedSecret('key3', input)\nawait setup.removeEnvelopedSecret('key2')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst output = await derive.getEnvelopedSecret('key')\noutput.toString('hex').should.equal(input.toString('hex'))",
              "err": {},
              "uuid": "28c430b9-2875-44b1-900e-9aa1e94ff5e8",
              "parentUUID": "97586aca-50c7-44bc-8d9f-c9752122d5a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "keys",
              "fullTitle": "enveloping keys",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nawait setup.addEnvelopedKey('key1')\nawait setup.addEnvelopedKey('key2', 'rsa1024')\nawait setup.addEnvelopedKey('key3', 'rsa2048')\nawait setup.addEnvelopedKey('key4', 'ed25519')\nconst key11 = await setup.getEnvelopedKey('key1')\nconst key12 = await setup.getEnvelopedKey('key2')\nconst key13 = await setup.getEnvelopedKey('key3')\nconst key14 = await setup.getEnvelopedKey('key4')\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nconst key21 = await derive.getEnvelopedKey('key1')\nconst key22 = await derive.getEnvelopedKey('key2')\nconst key23 = await derive.getEnvelopedKey('key3')\nconst key24 = await derive.getEnvelopedKey('key4')\nkey11.export({ format: 'jwk' }).should.deep.equal(key21.export({ format: 'jwk' }))\nkey12.export({ format: 'jwk' }).should.deep.equal(key22.export({ format: 'jwk' }))\nkey13.export({ format: 'jwk' }).should.deep.equal(key23.export({ format: 'jwk' }))\nkey14.export({ format: 'jwk' }).should.deep.equal(key24.export({ format: 'jwk' }))",
              "err": {},
              "uuid": "d5d9b7dc-4aff-48f5-a362-80e2753f1748",
              "parentUUID": "97586aca-50c7-44bc-8d9f-c9752122d5a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "67aa9a78-b1fe-4fa1-b848-a4b5bfac8803",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
              "file": "\\test\\features\\envelope.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "5e13215b-9b45-472d-973d-52417987780c",
                  "title": "addEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 110,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret(12345, input).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "98542f9b-dc54-4944-aeb5-a7e42cafc34e",
                      "parentUUID": "5e13215b-9b45-472d-973d-52417987780c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "value/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret value/type",
                      "timedOut": false,
                      "duration": 112,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedSecret('id', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "26749116-69da-4171-87b4-acc1ade52a62",
                      "parentUUID": "5e13215b-9b45-472d-973d-52417987780c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedSecret type/type",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nsetup.addEnvelopedSecret('id', input, 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "a0a6a0d0-932b-4086-bbef-50e38f1f1a85",
                      "parentUUID": "5e13215b-9b45-472d-973d-52417987780c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/unique",
                      "fullTitle": "enveloping errors addEnvelopedSecret id/unique",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst input = Buffer.from('12345678')\nawait setup.addEnvelopedSecret('key', input)\nsetup.addEnvelopedSecret('key', input).should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "7cbe508d-3df0-4e72-a163-22f4d8698dd2",
                      "parentUUID": "5e13215b-9b45-472d-973d-52417987780c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "98542f9b-dc54-4944-aeb5-a7e42cafc34e",
                    "26749116-69da-4171-87b4-acc1ade52a62",
                    "a0a6a0d0-932b-4086-bbef-50e38f1f1a85",
                    "7cbe508d-3df0-4e72-a163-22f4d8698dd2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 439,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3c4a1999-9392-4a40-b305-0e4ff4596064",
                  "title": "removeEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "3368272d-da4f-4c4b-aee0-c39292d1bb0f",
                      "parentUUID": "3c4a1999-9392-4a40-b305-0e4ff4596064",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors removeEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 114,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.removeEnvelopedSecret('12345')\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "1a4dba1e-b3d5-4e83-979e-e5c772a9b90f",
                      "parentUUID": "3c4a1999-9392-4a40-b305-0e4ff4596064",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3368272d-da4f-4c4b-aee0-c39292d1bb0f",
                    "1a4dba1e-b3d5-4e83-979e-e5c772a9b90f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 222,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "816e7278-2f67-4d93-957b-8a369d44da5b",
                  "title": "addEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors addEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "6195e728-c948-4e1a-8f1b-706d3ff38a5c",
                      "parentUUID": "816e7278-2f67-4d93-957b-8a369d44da5b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/type",
                      "fullTitle": "enveloping errors addEnvelopedKey type/type",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', 12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "bd7a43eb-46f6-4647-b092-632ad74570da",
                      "parentUUID": "816e7278-2f67-4d93-957b-8a369d44da5b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "type/range",
                      "fullTitle": "enveloping errors addEnvelopedKey type/range",
                      "timedOut": false,
                      "duration": 112,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.addEnvelopedKey('12345', '12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "b63184a2-b713-486c-9036-5a700f3a7e62",
                      "parentUUID": "816e7278-2f67-4d93-957b-8a369d44da5b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6195e728-c948-4e1a-8f1b-706d3ff38a5c",
                    "bd7a43eb-46f6-4647-b092-632ad74570da",
                    "b63184a2-b713-486c-9036-5a700f3a7e62"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 329,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "fadc387a-03f0-4ae0-b469-627fb9611433",
                  "title": "getEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 109,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "1973490b-c48a-4e83-a280-d51fae591283",
                      "parentUUID": "fadc387a-03f0-4ae0-b469-627fb9611433",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "id/range",
                      "fullTitle": "enveloping errors getEnvelopedSecret id/range",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedSecret('12345').should.be.rejectedWith(RangeError)",
                      "err": {},
                      "uuid": "80db8fe8-85bf-49de-8f09-4228896b0290",
                      "parentUUID": "fadc387a-03f0-4ae0-b469-627fb9611433",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1973490b-c48a-4e83-a280-d51fae591283",
                    "80db8fe8-85bf-49de-8f09-4228896b0290"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 217,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b5ba1e33-02f7-45f2-971c-a3b7cfdc9bb9",
                  "title": "getEnvelopedKey",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors getEnvelopedKey id/type",
                      "timedOut": false,
                      "duration": 113,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.getEnvelopedKey(12345).should.be.rejectedWith(TypeError)",
                      "err": {},
                      "uuid": "05199ff8-66b4-4477-8cc6-71b31b3c14fc",
                      "parentUUID": "b5ba1e33-02f7-45f2-971c-a3b7cfdc9bb9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "05199ff8-66b4-4477-8cc6-71b31b3c14fc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 113,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "154e47e7-3c99-413e-bdc1-95b3aa690b99",
                  "title": "hasEnvelopedSecret",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\envelope.js",
                  "file": "\\test\\features\\envelope.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "id/type",
                      "fullTitle": "enveloping errors hasEnvelopedSecret id/type",
                      "timedOut": false,
                      "duration": 108,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 });\n(() => {\n  setup.hasEnvelopedSecret(12345)\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "4e0a9db4-ed29-4132-bb8f-bc58cc1607cf",
                      "parentUUID": "154e47e7-3c99-413e-bdc1-95b3aa690b99",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4e0a9db4-ed29-4132-bb8f-bc58cc1607cf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 108,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "28c430b9-2875-44b1-900e-9aa1e94ff5e8",
            "d5d9b7dc-4aff-48f5-a362-80e2753f1748"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
          "title": "kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\kdf.js",
          "file": "\\test\\features\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "types",
              "fullTitle": "kdf types",
              "timedOut": false,
              "duration": 439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pbkdf2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst bcrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst scrypt = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nconst argon2 = await mfkdf.kdf('password', 'somesalt', 16, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nBuffer.isBuffer(pbkdf2).should.be.true\nBuffer.isBuffer(bcrypt).should.be.true\nBuffer.isBuffer(scrypt).should.be.true\nBuffer.isBuffer(argon2).should.be.true",
              "err": {},
              "uuid": "01157fd5-017e-4dfc-91c4-200faac035fb",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha1",
              "fullTitle": "kdf pbkdf2/sha1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 16, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 25555,\n    digest: 'sha1'\n  }\n})\nBuffer.isBuffer(key).should.be.true\nkey.toString('hex').should.equal('8ee4a527b20aa8feeb78d70447d84e20')",
              "err": {},
              "uuid": "036d01ec-73a2-40f7-a9d9-f14c1c9c5f25",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/sha512",
              "fullTitle": "kdf pbkdf2/sha512",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secret', 'salt', 64, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha512'\n  }\n})\nkey.toString('hex').should.equal('3745e482c6e0ade35da10139e797157f4a5da669dad7d5da88ef87e47471cc47ed941c7ad618e827304f083f8707f12b7cfdd5f489b782f10cc269e3c08d59ae')",
              "err": {},
              "uuid": "260d4562-ddc7-415f-8ebf-1e57966c11d9",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pbkdf2/default",
              "fullTitle": "kdf pbkdf2/default",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('test', '', 32, mfkdf.setup.kdf({ kdf: 'pbkdf2' }))\nconst key2 = await mfkdf.kdf('test', '', 32, {\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "e3233ac4-575a-4e5b-92bf-c747b730debb",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/same",
              "fullTitle": "kdf bcrypt/same",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.toString('hex').should.equal(key2.toString('hex'))",
              "err": {},
              "uuid": "cc19b8ff-59fe-4fe6-bcd1-a9aaaae68852",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/inputdiff",
              "fullTitle": "kdf bcrypt/inputdiff",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password2', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "be52002a-864e-4ea2-95ad-764a474fb678",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/saltdiff",
              "fullTitle": "kdf bcrypt/saltdiff",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "eea08125-3629-4690-9d1b-e832ef5a466d",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/rounddiff",
              "fullTitle": "kdf bcrypt/rounddiff",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key1 = await mfkdf.kdf('password1', 'salt1', 16, { type: 'bcrypt', params: { rounds: 10 } })\nconst key2 = await mfkdf.kdf('password1', 'salt2', 16, { type: 'bcrypt', params: { rounds: 11 } })\nkey1.should.not.equal(key2)",
              "err": {},
              "uuid": "02288601-2044-4144-aa0f-0b0a21004f87",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/length",
              "fullTitle": "kdf bcrypt/length",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key16 = await mfkdf.kdf('password', 'salt', 16, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key16).should.equal(16)\nconst key32 = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key32).should.equal(32)\nconst key64 = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nBuffer.byteLength(key64).should.equal(64)",
              "err": {},
              "uuid": "5e913c6d-41c9-4a44-a244-f8851c879b97",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "bcrypt/known",
              "fullTitle": "kdf bcrypt/known",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 32, mfkdf.setup.kdf({ kdf: 'bcrypt' }))\nkey.toString('hex').should.equal('cb36d3d02d502acdf10dfc2d022bf3c024f16a368ba2df4456fbf97291f64334')",
              "err": {},
              "uuid": "892fcddb-f585-4e00-842a-780d60263e01",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/fast",
              "fullTitle": "kdf scrypt/fast",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'salt', 64, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 16384, scryptblocksize: 8, scryptparallelism: 1 }))\nkey.toString('hex').should.equal('745731af4484f323968969eda289aeee005b5903ac561e64a5aca121797bf7734ef9fd58422e2e22183bcacba9ec87ba0c83b7a2e788f03ce0da06463433cda6')",
              "err": {},
              "uuid": "645d6d23-eb14-4501-bafc-e03e3dcfcb63",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/defaults",
              "fullTitle": "kdf scrypt/defaults",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt' }))\nkey.toString('hex').should.equal('9009fca57ef2b8c342bdad6b9247e4a1b5bd85628152116513ad44e93cf1b0e2')",
              "err": {},
              "uuid": "c33490af-102e-4de4-9ae0-cd263d40e214",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/N",
              "fullTitle": "kdf scrypt/N",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024 }))\nkey.toString('hex').should.equal('ceb6a6bf4f4afeb3d1806714474d4f00ca97c2ad76a641269192d11444e13a6b')",
              "err": {},
              "uuid": "f5fef54b-b50a-47af-a290-9ca1c353d528",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/R",
              "fullTitle": "kdf scrypt/R",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptblocksize: 16 }))\nkey.toString('hex').should.equal('a63de1de715f95bebd9f6d58d78ff11028a8412c1fcf71673544373c67095836')",
              "err": {},
              "uuid": "81039d7d-55b0-4ea7-8846-c4a3ad2060f1",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "scrypt/P",
              "fullTitle": "kdf scrypt/P",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('secure', 'secure', 32, mfkdf.setup.kdf({ kdf: 'scrypt', scryptcost: 1024, scryptparallelism: 2 }))\nkey.toString('hex').should.equal('ef224277727457992dc05983b1fd1208bae35b100c853ba4bb11f1ba7ca4c436')",
              "err": {},
              "uuid": "493a5c62-8428-47b8-97ca-c3fa831edb37",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2i",
              "fullTitle": "kdf argon2i",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2i' }))\nkey.toString('hex').should.equal('7357892df510f136a0688ceab37bbaf7ba695de590065072717fa6728961c92a')",
              "err": {},
              "uuid": "0086c2e1-2511-404f-b692-9bb68a9c78a6",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2d",
              "fullTitle": "kdf argon2d",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2d' }))\nkey.toString('hex').should.equal('423b0dcc7bbfe16fa8ee7a2e2ebd8891873d726f9dfe70890a7197a5503a2848')",
              "err": {},
              "uuid": "53d6af00-f817-47cd-990d-34643ad526ad",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id",
              "fullTitle": "kdf argon2id",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ kdf: 'argon2id' }))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "7eb8a426-f6fd-4b2f-bf94-2906b99ee7c6",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/mem",
              "fullTitle": "kdf argon2id/mem",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2mem: 16384 }))\nkey.toString('hex').should.equal('e043f979311b14ff8378b785469974e899a08f05509323a04b2ca29ef63ff3af')",
              "err": {},
              "uuid": "ec3e57f8-d30d-4be1-b539-90585066a4f9",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/time",
              "fullTitle": "kdf argon2id/time",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2time: 1 }))\nkey.toString('hex').should.equal('bf6b1773bdae362ecea04b889079b6628d1f35d96a2be9f2a5481c2d1236e8d7')",
              "err": {},
              "uuid": "d92759a9-3699-44e8-9a8f-7809b05fa510",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "argon2id/parallelism",
              "fullTitle": "kdf argon2id/parallelism",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({ type: 'argon2id', argon2parallelism: 2 }))\nkey.toString('hex').should.equal('5c12c6873b938cd8467b677d23e525389e3ff7ed62b4ad9e285e1191244f40ca')",
              "err": {},
              "uuid": "5c23a445-2801-4489-9f75-d5a3a98dfe9b",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default",
              "fullTitle": "kdf default",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.kdf('password', 'somesalt', 32, mfkdf.setup.kdf({}))\nkey.toString('hex').should.equal('5cddd5b69d1fe5d83bc3e04e9122f05d9b2128a194cb739baf74679875c4b3a1')",
              "err": {},
              "uuid": "874a86ff-61a8-47c1-8647-0a4a2ae95ed3",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid",
              "fullTitle": "kdf invalid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mfkdf.kdf('password1', 'salt1', 16, { type: 'invalid', params: { } }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "a20e4dc4-c1b0-4291-938a-8fac8d7d7763",
              "parentUUID": "8ec8e00c-f118-4ee9-bbd1-053018016f78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "01157fd5-017e-4dfc-91c4-200faac035fb",
            "036d01ec-73a2-40f7-a9d9-f14c1c9c5f25",
            "260d4562-ddc7-415f-8ebf-1e57966c11d9",
            "e3233ac4-575a-4e5b-92bf-c747b730debb",
            "cc19b8ff-59fe-4fe6-bcd1-a9aaaae68852",
            "be52002a-864e-4ea2-95ad-764a474fb678",
            "eea08125-3629-4690-9d1b-e832ef5a466d",
            "02288601-2044-4144-aa0f-0b0a21004f87",
            "5e913c6d-41c9-4a44-a244-f8851c879b97",
            "892fcddb-f585-4e00-842a-780d60263e01",
            "645d6d23-eb14-4501-bafc-e03e3dcfcb63",
            "c33490af-102e-4de4-9ae0-cd263d40e214",
            "f5fef54b-b50a-47af-a290-9ca1c353d528",
            "81039d7d-55b0-4ea7-8846-c4a3ad2060f1",
            "493a5c62-8428-47b8-97ca-c3fa831edb37",
            "0086c2e1-2511-404f-b692-9bb68a9c78a6",
            "53d6af00-f817-47cd-990d-34643ad526ad",
            "7eb8a426-f6fd-4b2f-bf94-2906b99ee7c6",
            "ec3e57f8-d30d-4be1-b539-90585066a4f9",
            "d92759a9-3699-44e8-9a8f-7809b05fa510",
            "5c23a445-2801-4489-9f75-d5a3a98dfe9b",
            "874a86ff-61a8-47c1-8647-0a4a2ae95ed3",
            "a20e4dc4-c1b0-4291-938a-8fac8d7d7763"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f5c2e940-37b1-48b7-ae3c-e39a6271dc67",
          "title": "policy",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
          "file": "\\test\\features\\policy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c53b16f-f561-4fcb-9f6f-e9077fb3f4b2",
              "title": "validate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "policy validate valid",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.validate(policy.policy).should.be.true",
                  "err": {},
                  "uuid": "5d696370-f1bb-4511-bb98-2e6c153b35f3",
                  "parentUUID": "5c53b16f-f561-4fcb-9f6f-e9077fb3f4b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid",
                  "fullTitle": "policy validate invalid",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password2' })\n    )\n  )\n).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "6143ec40-1add-4ad3-8a37-e9cd529ffea4",
                  "parentUUID": "5c53b16f-f561-4fcb-9f6f-e9077fb3f4b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d696370-f1bb-4511-bb98-2e6c153b35f3",
                "6143ec40-1add-4ad3-8a37-e9cd529ffea4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 218,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "079b0999-4d42-4e88-bff1-ce9c83fa94f8",
              "title": "evaluate",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "basic 1",
                  "fullTitle": "policy evaluate basic 1",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.true",
                  "err": {},
                  "uuid": "07d1ff07-0c91-430f-bd69-39ec1ca417fd",
                  "parentUUID": "079b0999-4d42-4e88-bff1-ce9c83fa94f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy evaluate basic 2",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const policy = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password2']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password3', 'password4']).should.be.true\nmfkdf.policy.evaluate(policy.policy, ['password1', 'password4']).should.be.false\nmfkdf.policy.evaluate(policy.policy, ['password2', 'password3']).should.be.false",
                  "err": {},
                  "uuid": "47315d7f-fb7f-454c-a046-92c933ccbb18",
                  "parentUUID": "079b0999-4d42-4e88-bff1-ce9c83fa94f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07d1ff07-0c91-430f-bd69-39ec1ca417fd",
                "47315d7f-fb7f-454c-a046-92c933ccbb18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 225,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "957e282c-13b3-4a5e-b9ba-b11725640002",
              "title": "derive",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "all",
                  "fullTitle": "policy derive all",
                  "timedOut": false,
                  "duration": 238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.all([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "426afecf-6eb5-4549-9375-67efa0f42f8e",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "any",
                  "fullTitle": "policy derive any",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.any([\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "a0e40279-b695-4904-b7ff-a7c8d85b5bba",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "atLeast",
                  "fullTitle": "policy derive atLeast",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.atLeast(3, [\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n    await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n    await mfkdf.setup.factors.password('password4', { id: 'password4' })\n  ])\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "fbd8c7f9-9626-4d60-8ab7-f1a30cf1abdc",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 1",
                  "fullTitle": "policy derive basic 1",
                  "timedOut": false,
                  "duration": 635,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.or(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive3 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive4 = await mfkdf.policy.derive(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive4.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "217661e0-dcc5-4830-98d1-5e139d31bd13",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "basic 2",
                  "fullTitle": "policy derive basic 2",
                  "timedOut": false,
                  "duration": 350,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.or(\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n      await mfkdf.setup.factors.password('password2', { id: 'password2' })\n    ),\n    await mfkdf.policy.and(\n      await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n      await mfkdf.setup.factors.password('password4', { id: 'password4' })\n    )\n  )\n)\nconst derive1 = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(setup.key.toString('hex'))\nconst derive2 = await mfkdf.policy.derive(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive2.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "88688a63-4db3-42e9-b550-48ac809e4562",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deep",
                  "fullTitle": "policy derive deep",
                  "timedOut": false,
                  "duration": 247,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nconst derive = await mfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n})\nderive.key.toString('hex').should.equal(setup.key.toString('hex'))",
                  "err": {},
                  "uuid": "b9d551fd-1527-4037-9564-b0ed7eab7cd3",
                  "parentUUID": "957e282c-13b3-4a5e-b9ba-b11725640002",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "426afecf-6eb5-4549-9375-67efa0f42f8e",
                "a0e40279-b695-4904-b7ff-a7c8d85b5bba",
                "fbd8c7f9-9626-4d60-8ab7-f1a30cf1abdc",
                "217661e0-dcc5-4830-98d1-5e139d31bd13",
                "88688a63-4db3-42e9-b550-48ac809e4562",
                "b9d551fd-1527-4037-9564-b0ed7eab7cd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1938,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0d18a13c-9090-4a70-ada8-242c4cb7aef4",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\policy.js",
              "file": "\\test\\features\\policy.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid policy",
                  "fullTitle": "policy errors invalid policy",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n        await mfkdf.setup.factors.password('password2', { id: 'password2' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n])\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4'),\n  password6: mfkdf.derive.factors.password('password6')\n}).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4817cf47-8e09-40bc-a917-0582689a572e",
                  "parentUUID": "0d18a13c-9090-4a70-ada8-242c4cb7aef4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid factors",
                  "fullTitle": "policy errors invalid factors",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.policy.setup(\n  await mfkdf.policy.and(\n    await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n    await mfkdf.policy.and(\n      await mfkdf.policy.or(\n        await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n        await mfkdf.setup.factors.password('password3', { id: 'password3' })\n      ),\n      await mfkdf.policy.and(\n        await mfkdf.setup.factors.password('password4', { id: 'password4' }),\n        await mfkdf.policy.or(\n          await mfkdf.setup.factors.password('password5', { id: 'password5' }),\n          await mfkdf.setup.factors.password('password6', { id: 'password6' })\n        )\n      )\n    )\n  )\n)\nmfkdf.policy.derive(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "a13a0b52-8b18-46c1-a41a-256793be1bd2",
                  "parentUUID": "0d18a13c-9090-4a70-ada8-242c4cb7aef4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4817cf47-8e09-40bc-a917-0582689a572e",
                "a13a0b52-8b18-46c1-a41a-256793be1bd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 224,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3b70881f-5981-46ab-9b4b-571622967955",
          "title": "reconstitution",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
          "file": "\\test\\features\\reconstitution.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "setThreshold",
              "fullTitle": "reconstitution setThreshold",
              "timedOut": false,
              "duration": 228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nawait setup.setThreshold(2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "9688312a-ebd3-42b3-a426-dca9421e8567",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactor",
              "fullTitle": "reconstitution removeFactor",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n})\nderive1.key.toString('hex').should.equal(key)\nawait setup.removeFactor('password1')\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)\nderive2.removeFactor('password2').should.be.rejectedWith(RangeError)\nawait derive2.setThreshold(1)\nawait derive2.removeFactor('password2')\nconst derive3 = await mfkdf.derive.key(derive2.policy, {\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)\nmfkdf.derive.key(derive2.policy, {\n  password2: mfkdf.derive.factors.password('password2')\n}).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "8c4a8e4a-cfb5-4700-9962-70669c082b72",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "removeFactors",
              "fullTitle": "reconstitution removeFactors",
              "timedOut": false,
              "duration": 452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nconst derive1 = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive1.key.toString('hex').should.equal(key)\nconst derive2 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive2.key.toString('hex').should.equal(key)\nawait setup.removeFactors(['password1', 'password4'])\nmfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password4: mfkdf.derive.factors.password('password4')\n}).should.be.rejectedWith(RangeError)\nconst derive3 = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive3.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "89b22edf-2db9-4794-973d-8d7f05d8d117",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactor",
              "fullTitle": "reconstitution addFactor",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactor(await mfkdf.setup.factors.password('password3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "467d58be-1881-4821-839c-7156a2d6deab",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "addFactors",
              "fullTitle": "reconstitution addFactors",
              "timedOut": false,
              "duration": 217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.addFactors([\n  await mfkdf.setup.factors.password('password3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('password4', { id: 'password4' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password3: mfkdf.derive.factors.password('password3'),\n  password4: mfkdf.derive.factors.password('password4')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "9f901ebe-8ddf-451f-bd8f-010ae0a02275",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactor",
              "fullTitle": "reconstitution recoverFactor",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactor(await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }))\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('password1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "39be8158-efac-4318-945b-e36a01752ed7",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "recoverFactors",
              "fullTitle": "reconstitution recoverFactors",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.recoverFactors([\n  await mfkdf.setup.factors.password('differentPassword3', { id: 'password3' }),\n  await mfkdf.setup.factors.password('otherPassword1', { id: 'password1' })\n])\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password1: mfkdf.derive.factors.password('otherPassword1'),\n  password3: mfkdf.derive.factors.password('differentPassword3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "5b253ee4-5cd7-42c2-adb4-f11ed826c68d",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reconstitute",
              "fullTitle": "reconstitution reconstitute",
              "timedOut": false,
              "duration": 223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute(['password1'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2)\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('otherPassword2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "75898192-1530-47ab-92ca-31cf36a63ed4",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "defaults",
              "fullTitle": "reconstitution defaults",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nconst key = setup.key.toString('hex')\nawait setup.reconstitute()\nconst derive = await mfkdf.derive.key(setup.policy, {\n  password2: mfkdf.derive.factors.password('password2'),\n  password3: mfkdf.derive.factors.password('password3')\n})\nderive.key.toString('hex').should.equal(key)",
              "err": {},
              "uuid": "2b11666f-936b-4450-9263-db85434d7cd0",
              "parentUUID": "3b70881f-5981-46ab-9b4b-571622967955",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a7278fa7-af66-4876-bd34-455c15804921",
              "title": "errors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\features\\reconstitution.js",
              "file": "\\test\\features\\reconstitution.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removeFactors/factor/type",
                  "fullTitle": "reconstitution errors removeFactors/factor/type",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([12345], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "97c6343c-1beb-4761-affc-0b0e3019039f",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/range",
                  "fullTitle": "reconstitution errors removeFactors/factor/range",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute(['password4'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "f6eb63c2-3e4a-4b7e-995e-af1922f16e8f",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/factor/id/unique",
                  "fullTitle": "reconstitution errors removeFactors/factor/id/unique",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 2 })\nsetup.reconstitute(['password3'], [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('diffPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "85b815b6-bf6e-4589-a426-5e9c7d757ace",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "removeFactors/type",
                  "fullTitle": "reconstitution errors removeFactors/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute('hello', [\n  await mfkdf.setup.factors.password('otherPassword2', { id: 'password2' })\n], 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "a8581ca8-288a-43de-bbf4-dd9b2a4e669b",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "addFactors/type",
                  "fullTitle": "reconstitution errors addFactors/type",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], '12345', 2).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bc570ede-b2e8-4b31-8cb8-47321732d566",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/type",
                  "fullTitle": "reconstitution errors threshold/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], '12345').should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4ad63fc6-eac1-40db-9095-3460cf009111",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], -1).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "63f73ec7-12f3-47cd-b52b-6942a37b0b1a",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/type",
                  "fullTitle": "reconstitution errors factor/type/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 12345,\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "d8865f05-bace-4621-8323-b40788432224",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/type/range",
                  "fullTitle": "reconstitution errors factor/type/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: '',\n    id: 'password4',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "fd014594-7d1f-4586-8f4b-a60e64a9127b",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/type",
                  "fullTitle": "reconstitution errors factor/id/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "4064a5e2-85d1-4686-87b4-8321c60463d9",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/id/range",
                  "fullTitle": "reconstitution errors factor/id/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password4', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "019ccab5-e75d-4e5a-965a-ffbd3309f747",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/type",
                  "fullTitle": "reconstitution errors factor/data/type",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: 12345,\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "f0a731a8-dfe3-4853-8c73-f983c7721485",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/data/range",
                  "fullTitle": "reconstitution errors factor/data/range",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from(''),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "34c9268a-3db8-4025-80a7-405362a7ffb8",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/params/type",
                  "fullTitle": "reconstitution errors factor/params/type",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: 12345,\n    output: async () => {\n      return {}\n    }\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "0d96c562-bbed-4e26-baeb-0f98aa851ebd",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "factor/output/type",
                  "fullTitle": "reconstitution errors factor/output/type",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [\n  {\n    type: 'password',\n    id: 'password4',\n    data: Buffer.from('password4'),\n    params: async () => {\n      return {}\n    },\n    output: 12345\n  }\n], 3).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "35a97485-a840-42f4-b075-32cc3dda63ba",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "threshold/range",
                  "fullTitle": "reconstitution errors threshold/range",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const setup = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('password1', { id: 'password1' }),\n  await mfkdf.setup.factors.password('password2', { id: 'password2' }),\n  await mfkdf.setup.factors.password('password3', { id: 'password3' })\n], { threshold: 3 })\nsetup.reconstitute([], [], 4).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "77056c94-53c7-4607-9e22-f41e94c6d6ff",
                  "parentUUID": "a7278fa7-af66-4876-bd34-455c15804921",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97c6343c-1beb-4761-affc-0b0e3019039f",
                "f6eb63c2-3e4a-4b7e-995e-af1922f16e8f",
                "85b815b6-bf6e-4589-a426-5e9c7d757ace",
                "a8581ca8-288a-43de-bbf4-dd9b2a4e669b",
                "bc570ede-b2e8-4b31-8cb8-47321732d566",
                "4ad63fc6-eac1-40db-9095-3460cf009111",
                "63f73ec7-12f3-47cd-b52b-6942a37b0b1a",
                "d8865f05-bace-4621-8323-b40788432224",
                "fd014594-7d1f-4586-8f4b-a60e64a9127b",
                "4064a5e2-85d1-4686-87b4-8321c60463d9",
                "019ccab5-e75d-4e5a-965a-ffbd3309f747",
                "f0a731a8-dfe3-4853-8c73-f983c7721485",
                "34c9268a-3db8-4025-80a7-405362a7ffb8",
                "0d96c562-bbed-4e26-baeb-0f98aa851ebd",
                "35a97485-a840-42f4-b075-32cc3dda63ba",
                "77056c94-53c7-4607-9e22-f41e94c6d6ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1718,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9688312a-ebd3-42b3-a426-dca9421e8567",
            "8c4a8e4a-cfb5-4700-9962-70669c082b72",
            "89b22edf-2db9-4794-973d-8d7f05d8d117",
            "467d58be-1881-4821-839c-7156a2d6deab",
            "9f901ebe-8ddf-451f-bd8f-010ae0a02275",
            "39be8158-efac-4318-945b-e36a01752ed7",
            "5b253ee4-5cd7-42c2-adb4-f11ed826c68d",
            "75898192-1530-47ab-92ca-31cf36a63ed4",
            "2b11666f-936b-4450-9263-db85434d7cd0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2464,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ebdd9bd5-19cc-4db6-ad48-ad7cef8eed36",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\combine.js",
          "file": "\\test\\secrets\\combine.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.combine([Buffer.from('12345678')], 1, 1)",
              "err": {},
              "uuid": "e79af550-1ee2-490a-a3fc-86372a860a67",
              "parentUUID": "ebdd9bd5-19cc-4db6-ad48-ad7cef8eed36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "bb6d38d3-81c7-4fa7-b953-66387a511876",
              "parentUUID": "ebdd9bd5-19cc-4db6-ad48-ad7cef8eed36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.combine([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "cfdfd637-197f-4070-865e-cfcc84425341",
              "parentUUID": "ebdd9bd5-19cc-4db6-ad48-ad7cef8eed36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e79af550-1ee2-490a-a3fc-86372a860a67",
            "bb6d38d3-81c7-4fa7-b953-66387a511876",
            "cfdfd637-197f-4070-865e-cfcc84425341"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "70a1abca-3fde-488c-869b-267578e77c92",
          "title": "secrets",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\index.js",
          "file": "\\test\\secrets\\index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1-of-1",
              "fullTitle": "secrets 1-of-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 1)\nshares.should.be.an('array').of.length(1)\nshares[0].toString('hex').should.equal('12345678')\nconst secret = mfkdf.secrets.combine(shares, 1, 1)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "87241d36-01ce-4d3d-8602-cb4e54f93eec",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets 1-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 1, 5)\nshares.should.be.an('array').of.length(5)\nshares[0].toString('hex').should.equal('12345678')\nconst secret1 = mfkdf.secrets.combine(shares, 1, 5)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 1, 5)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0]], 1, 5)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([null, shares[0], null], 1, 5)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([], 1, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "6990b5d0-6ae0-4be6-9880-3c993fe0f6d3",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n",
              "fullTitle": "secrets k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 3)\nshares.should.be.an('array').of.length(3)\nconst secret1 = mfkdf.secrets.combine([shares[0], shares[1], shares[2]], 2, 3)\nsecret1.toString('hex').should.equal('12345678')\nconst secret2 = mfkdf.secrets.combine([null, shares[1], shares[2]], 2, 3)\nsecret2.toString('hex').should.equal('12345678')\nconst secret3 = mfkdf.secrets.combine([shares[0], null, shares[2]], 2, 3)\nsecret3.toString('hex').should.equal('12345678')\nconst secret4 = mfkdf.secrets.combine([shares[0], shares[1], null], 2, 3)\nsecret4.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "413e0ae0-860b-4e61-ad49-3e9a385b442a",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (medium)",
              "fullTitle": "secrets k-of-n (medium)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 255)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 255)\nsecret1.toString('hex').should.equal('35002a68d437')",
              "err": {},
              "uuid": "ab9d51c5-0c8d-4a3a-b8af-6f8f7b516706",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "k-of-n (large)",
              "fullTitle": "secrets k-of-n (large)",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('35002a68d437', 'hex'), 5, 1024)\nshares.should.be.an('array').of.length(1024)\nconst secret1 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret1.toString('hex').should.equal('35002a68d437')\nfor (let i = 1; i < 1020; i++) {\n  shares[i] = null\n}\nconst secret2 = mfkdf.secrets.combine(shares, 5, 1024)\nsecret2.toString('hex').should.equal('35002a68d437')\nshares[1023] = null;\n(() => {\n  mfkdf.secrets.combine(shares, 5, 1024)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "2e691590-c1fa-47a6-9403-1884db7300d9",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2-of-2",
              "fullTitle": "secrets 2-of-2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 2, 2)\nshares.should.be.an('array').of.length(2)\nxor(shares[0], shares[1]).toString('hex').should.equal('12345678')",
              "err": {},
              "uuid": "a9649d7b-3bb9-4c69-961e-de0d548d56ca",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678', 'hex'), 5, 5)\nshares.should.be.an('array').of.length(5)\nconst secret = mfkdf.secrets.combine(shares, 5, 5)\nsecret.toString('hex').should.equal('12345678');\n(() => {\n  mfkdf.secrets.combine([shares[0], shares[1], shares[2], shares[3]], 5, 5)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "129a7417-28ee-4c98-86cb-a565a6db8a00",
              "parentUUID": "70a1abca-3fde-488c-869b-267578e77c92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87241d36-01ce-4d3d-8602-cb4e54f93eec",
            "6990b5d0-6ae0-4be6-9880-3c993fe0f6d3",
            "413e0ae0-860b-4e61-ad49-3e9a385b442a",
            "ab9d51c5-0c8d-4a3a-b8af-6f8f7b516706",
            "2e691590-c1fa-47a6-9403-1884db7300d9",
            "a9649d7b-3bb9-4c69-961e-de0d548d56ca",
            "129a7417-28ee-4c98-86cb-a565a6db8a00"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 81,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c0741f9e-1585-4216-bf22-3a0827709e2d",
          "title": "secrets/recover",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\recover.js",
          "file": "\\test\\secrets\\recover.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "k-of-n",
              "fullTitle": "secrets/recover k-of-n",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], null], 2, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares[0], null, shares[2]], 2, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, shares[1], shares[2]], 2, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([shares2[0], null, shares2[2]], 2, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "696b9093-7aa6-461f-82a1-5324d076dea2",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1-of-n",
              "fullTitle": "secrets/recover 1-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 1, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], null, null], 1, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([null, shares[1], null], 1, 3)\nshares2.should.deep.equal(shares)\nconst shares3 = mfkdf.secrets.recover([null, null, shares[2]], 1, 3)\nshares3.should.deep.equal(shares)\nconst shares4 = mfkdf.secrets.recover([null, shares2[1], null], 1, 3)\nshares4.should.deep.equal(shares)",
              "err": {},
              "uuid": "31c39bfc-ff9b-4bf9-8ee2-0ee618048daa",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "n-of-n",
              "fullTitle": "secrets/recover n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3)\nconst shares1 = mfkdf.secrets.recover([shares[0], shares[1], shares[2]], 3, 3)\nshares1.should.deep.equal(shares)\nconst shares2 = mfkdf.secrets.recover([shares1[0], shares1[1], shares1[2]], 3, 3)\nshares2.should.deep.equal(shares)",
              "err": {},
              "uuid": "0e68c092-40c0-4068-a10d-0c9d07546891",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count n-of-n",
              "fullTitle": "secrets/recover invalid/count n-of-n",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 3, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 3, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "2644383b-0277-44da-a79f-7e49a005256a",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 1",
              "fullTitle": "secrets/recover invalid/count k-of-n 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], shares[1]], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "3d978662-adba-4f51-9d5b-78767c0b3c0f",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/count k-of-n 2",
              "fullTitle": "secrets/recover invalid/count k-of-n 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const shares = mfkdf.secrets.share(Buffer.from('12345678'), 2, 3);\n(() => {\n  mfkdf.secrets.recover([shares[0], null, null], 2, 3)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "8621a84d-6c6d-463b-a153-f4f52a9de8d1",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/recover invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "36280e0a-d97d-4cba-9df9-5a361695651e",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/recover invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.recover([], 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.recover([Buffer.from('12345678')], 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "5e7f4a40-8030-4db9-9cc2-4a8679928459",
              "parentUUID": "c0741f9e-1585-4216-bf22-3a0827709e2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "696b9093-7aa6-461f-82a1-5324d076dea2",
            "31c39bfc-ff9b-4bf9-8ee2-0ee618048daa",
            "0e68c092-40c0-4068-a10d-0c9d07546891",
            "2644383b-0277-44da-a79f-7e49a005256a",
            "3d978662-adba-4f51-9d5b-78767c0b3c0f",
            "8621a84d-6c6d-463b-a153-f4f52a9de8d1",
            "36280e0a-d97d-4cba-9df9-5a361695651e",
            "5e7f4a40-8030-4db9-9cc2-4a8679928459"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b03b2681-c511-4ecd-b26d-2bc146ed10ff",
          "title": "secrets/share",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\secrets\\share.js",
          "file": "\\test\\secrets\\share.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "valid",
              "fullTitle": "secrets/share valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.secrets.share(Buffer.from('12345678'), 1, 1)",
              "err": {},
              "uuid": "22b5111f-7dd2-4d96-9b19-eb095c642fe5",
              "parentUUID": "b03b2681-c511-4ecd-b26d-2bc146ed10ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/type",
              "fullTitle": "secrets/share invalid/type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share('hello', 1, 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 'hello', 1)\n}).should.throw(TypeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 'hello')\n}).should.throw(TypeError)",
              "err": {},
              "uuid": "a6e0da28-f0d1-4ba4-99c8-f30b200e38f1",
              "parentUUID": "b03b2681-c511-4ecd-b26d-2bc146ed10ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "secrets/share invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(() => {\n  mfkdf.secrets.share(Buffer.from(''), 1, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 0, 1)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 1, 0)\n}).should.throw(RangeError);\n(() => {\n  mfkdf.secrets.share(Buffer.from('12345678'), 2, 1)\n}).should.throw(RangeError)",
              "err": {},
              "uuid": "8945af23-7b42-4742-a0fe-e8951d00938f",
              "parentUUID": "b03b2681-c511-4ecd-b26d-2bc146ed10ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22b5111f-7dd2-4d96-9b19-eb095c642fe5",
            "a6e0da28-f0d1-4ba4-99c8-f30b200e38f1",
            "8945af23-7b42-4742-a0fe-e8951d00938f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5cc24cf8-7e85-46b6-bd69-a01d385e3223",
          "title": "setup/factors/password",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\password.js",
          "file": "\\test\\setup\\factors\\password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/password invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password(12345).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.password('password', { id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "e2af2dc1-3831-4bef-9731-ea83a7cb92de",
              "parentUUID": "5cc24cf8-7e85-46b6-bd69-a01d385e3223",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/password invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.password('').should.be.rejectedWith(RangeError)\nmfkdf.setup.factors.password('password', { id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "a6d77a8f-e170-443b-97f3-59a34c83c0ae",
              "parentUUID": "5cc24cf8-7e85-46b6-bd69-a01d385e3223",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/password valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.password('hello')\nfactor.type.should.equal('password')\nfactor.data.toString('hex').should.equal('68656c6c6f')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "39ffad2c-df2a-4582-a0dd-377b4ae96504",
              "parentUUID": "5cc24cf8-7e85-46b6-bd69-a01d385e3223",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2af2dc1-3831-4bef-9731-ea83a7cb92de",
            "a6d77a8f-e170-443b-97f3-59a34c83c0ae",
            "39ffad2c-df2a-4582-a0dd-377b4ae96504"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0916d5d8-1ddd-45ab-bc7e-7841633cb6d4",
          "title": "setup/factors/uuid",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\factors\\uuid.js",
          "file": "\\test\\setup\\factors\\uuid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "invalid/type",
              "fullTitle": "setup/factors/uuid invalid/type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ uuid: 12345 }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ uuid: 'hello' }).should.be.rejectedWith(TypeError)\nmfkdf.setup.factors.uuid({ id: 12345 }).should.be.rejectedWith(TypeError)",
              "err": {},
              "uuid": "36ca376d-81b2-4a5b-9016-a8e51656ff0c",
              "parentUUID": "0916d5d8-1ddd-45ab-bc7e-7841633cb6d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid/range",
              "fullTitle": "setup/factors/uuid invalid/range",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mfkdf.setup.factors.uuid({ id: '' }).should.be.rejectedWith(RangeError)",
              "err": {},
              "uuid": "f6cf4890-4343-461f-bbf3-cc482ef272fc",
              "parentUUID": "0916d5d8-1ddd-45ab-bc7e-7841633cb6d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "valid",
              "fullTitle": "setup/factors/uuid valid",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({ uuid: '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b' })\nfactor.type.should.equal('uuid')\nfactor.data.toString('hex').should.equal('6ec0bd7f11c043da975e2a8ad9ebae0b')\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "831cbc48-d059-4113-8180-087930d60708",
              "parentUUID": "0916d5d8-1ddd-45ab-bc7e-7841633cb6d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "random",
              "fullTitle": "setup/factors/uuid random",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const factor = await mfkdf.setup.factors.uuid({})\nfactor.type.should.equal('uuid')\nconst output = await factor.output()\nfactor.data.toString('hex').should.equal(output.uuid.replaceAll('-', ''))\nconst params = await factor.params()\nparams.should.deep.equal({})",
              "err": {},
              "uuid": "f6c0cd06-cbcb-422a-9762-1783f5414cc6",
              "parentUUID": "0916d5d8-1ddd-45ab-bc7e-7841633cb6d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36ca376d-81b2-4a5b-9016-a8e51656ff0c",
            "f6cf4890-4343-461f-bbf3-cc482ef272fc",
            "831cbc48-d059-4113-8180-087930d60708",
            "f6c0cd06-cbcb-422a-9762-1783f5414cc6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "42ef2d68-fdb5-4931-88a3-a48bc283c7e8",
          "title": "setup/kdf",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
          "file": "\\test\\setup\\kdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2155d1a8-1028-4b97-b96d-0218cbe958be",
              "title": "pbkdf2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf pbkdf2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha256'\n  }\n})",
                  "err": {},
                  "uuid": "9f6e8913-2ea3-4546-8f6f-e1beff8a8efc",
                  "parentUUID": "2155d1a8-1028-4b97-b96d-0218cbe958be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c5ee1644-5d90-4443-a0ad-cc196ae8ec9a",
                  "title": "pbkdf2rounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "28e5858d-375d-43f1-8556-d33c4de77c3f",
                      "parentUUID": "c5ee1644-5d90-4443-a0ad-cc196ae8ec9a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2rounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "ffcc1d2a-7390-4bf3-bd04-a651a38110fe",
                      "parentUUID": "c5ee1644-5d90-4443-a0ad-cc196ae8ec9a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2rounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2rounds: 100000\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 100000,\n    digest: 'sha256'\n  }\n})",
                      "err": {},
                      "uuid": "a77707a8-85cd-4d17-afbe-de149828d85d",
                      "parentUUID": "c5ee1644-5d90-4443-a0ad-cc196ae8ec9a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "28e5858d-375d-43f1-8556-d33c4de77c3f",
                    "ffcc1d2a-7390-4bf3-bd04-a651a38110fe",
                    "a77707a8-85cd-4d17-afbe-de149828d85d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "db573dd8-fc0e-4f9e-9269-1f0e5d34f98b",
                  "title": "pbkdf2digest",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 0\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "6bbbbccb-ae35-4b92-bcb9-1d30936e373b",
                      "parentUUID": "db573dd8-fc0e-4f9e-9269-1f0e5d34f98b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'pbkdf2',\n    pbkdf2digest: 'foo'\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "4fc3f5f9-5dff-4518-8cd0-1616d89ec390",
                      "parentUUID": "db573dd8-fc0e-4f9e-9269-1f0e5d34f98b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf pbkdf2 pbkdf2digest valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'pbkdf2',\n  pbkdf2digest: 'sha512'\n}).should.deep.equal({\n  type: 'pbkdf2',\n  params: {\n    rounds: 310000,\n    digest: 'sha512'\n  }\n})",
                      "err": {},
                      "uuid": "383f72be-8dcc-4e03-8567-b8fafb5daa85",
                      "parentUUID": "db573dd8-fc0e-4f9e-9269-1f0e5d34f98b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6bbbbccb-ae35-4b92-bcb9-1d30936e373b",
                    "4fc3f5f9-5dff-4518-8cd0-1616d89ec390",
                    "383f72be-8dcc-4e03-8567-b8fafb5daa85"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "9f6e8913-2ea3-4546-8f6f-e1beff8a8efc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8f53eaa2-a2fd-4e01-bb2e-151f72677acc",
              "title": "bcrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf bcrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt'\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 10\n  }\n})",
                  "err": {},
                  "uuid": "91e38253-0d1e-4477-a480-734fd8a48923",
                  "parentUUID": "8f53eaa2-a2fd-4e01-bb2e-151f72677acc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "31bf342c-fc2f-427e-9b58-0fe27537ed55",
                  "title": "bcryptrounds",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "635a72f2-155b-47fb-93be-dc54d9d006e2",
                      "parentUUID": "31bf342c-fc2f-427e-9b58-0fe27537ed55",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'bcrypt',\n    bcryptrounds: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "3a01ec7e-d087-4758-b154-968c0c02f754",
                      "parentUUID": "31bf342c-fc2f-427e-9b58-0fe27537ed55",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf bcrypt bcryptrounds valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'bcrypt',\n  bcryptrounds: 25\n}).should.deep.equal({\n  type: 'bcrypt',\n  params: {\n    rounds: 25\n  }\n})",
                      "err": {},
                      "uuid": "12b7f4a7-339e-4077-bdfc-3038e9ea417a",
                      "parentUUID": "31bf342c-fc2f-427e-9b58-0fe27537ed55",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "635a72f2-155b-47fb-93be-dc54d9d006e2",
                    "3a01ec7e-d087-4758-b154-968c0c02f754",
                    "12b7f4a7-339e-4077-bdfc-3038e9ea417a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "91e38253-0d1e-4477-a480-734fd8a48923"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a19d6174-5cb8-4f87-910d-e12727766d93",
              "title": "scrypt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf scrypt defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt'\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "3b0f6392-3f4b-45b7-9abc-00ac47de418b",
                  "parentUUID": "a19d6174-5cb8-4f87-910d-e12727766d93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "86468f3c-9cf8-48ca-b4c2-cc0deef3c021",
                  "title": "scryptcost",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "00816b11-66f2-463f-bc60-c803973a8476",
                      "parentUUID": "86468f3c-9cf8-48ca-b4c2-cc0deef3c021",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptcost invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptcost: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "29bd3ff3-0a5e-4aac-b341-af27cfe90705",
                      "parentUUID": "86468f3c-9cf8-48ca-b4c2-cc0deef3c021",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptcost valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptcost: 12345\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 12345,\n    blocksize: 8,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "b05c2b49-36ff-4086-a1cf-bd8ce257f5de",
                      "parentUUID": "86468f3c-9cf8-48ca-b4c2-cc0deef3c021",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "00816b11-66f2-463f-bc60-c803973a8476",
                    "29bd3ff3-0a5e-4aac-b341-af27cfe90705",
                    "b05c2b49-36ff-4086-a1cf-bd8ce257f5de"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "94026015-ceae-4319-8449-51759039003c",
                  "title": "scryptblocksize",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "609c0ea8-4a66-4acf-8198-06ef826ada77",
                      "parentUUID": "94026015-ceae-4319-8449-51759039003c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptblocksize invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptblocksize: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "0d437369-a071-4dec-abf2-ccc52b25f651",
                      "parentUUID": "94026015-ceae-4319-8449-51759039003c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptblocksize valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptblocksize: 24\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 24,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "715ebb71-d6da-43cd-ae22-4466e53e24d4",
                      "parentUUID": "94026015-ceae-4319-8449-51759039003c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "609c0ea8-4a66-4acf-8198-06ef826ada77",
                    "0d437369-a071-4dec-abf2-ccc52b25f651",
                    "715ebb71-d6da-43cd-ae22-4466e53e24d4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f99e40b4-4344-43f2-a4ab-96457dd22aa5",
                  "title": "scryptparallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "28508bf6-e333-4afe-ad4a-8fc745f3d675",
                      "parentUUID": "f99e40b4-4344-43f2-a4ab-96457dd22aa5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf scrypt scryptparallelism invalid/range",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'scrypt',\n    scryptparallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "d4a6f232-c73b-4ef1-bc32-68cbb67878fa",
                      "parentUUID": "f99e40b4-4344-43f2-a4ab-96457dd22aa5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf scrypt scryptparallelism valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'scrypt',\n  scryptparallelism: 2\n}).should.deep.equal({\n  type: 'scrypt',\n  params: {\n    rounds: 16384,\n    blocksize: 8,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "beaabfbb-f473-4358-8098-891e637c921c",
                      "parentUUID": "f99e40b4-4344-43f2-a4ab-96457dd22aa5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "28508bf6-e333-4afe-ad4a-8fc745f3d675",
                    "d4a6f232-c73b-4ef1-bc32-68cbb67878fa",
                    "beaabfbb-f473-4358-8098-891e637c921c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "3b0f6392-3f4b-45b7-9abc-00ac47de418b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4f6f8c8a-8d47-4f9b-abbe-0249cc95db61",
              "title": "argon2",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
              "file": "\\test\\setup\\kdf.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "defaults",
                  "fullTitle": "setup/kdf argon2 defaults",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.kdf({\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                  "err": {},
                  "uuid": "c36da908-7569-41bd-bcdc-d82e8e649ee3",
                  "parentUUID": "4f6f8c8a-8d47-4f9b-abbe-0249cc95db61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/type",
                  "fullTitle": "setup/kdf argon2 kdf/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 123\n  })\n}).should.throw(TypeError)",
                  "err": {},
                  "uuid": "b886174b-da7c-4699-b0b6-24ab5e5a5247",
                  "parentUUID": "4f6f8c8a-8d47-4f9b-abbe-0249cc95db61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "kdf/range",
                  "fullTitle": "setup/kdf argon2 kdf/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'foo'\n  })\n}).should.throw(RangeError)",
                  "err": {},
                  "uuid": "41216c88-cc53-4915-8371-06d269952c5b",
                  "parentUUID": "4f6f8c8a-8d47-4f9b-abbe-0249cc95db61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1edeccc2-8d87-4c0d-9f26-7135a35e6881",
                  "title": "argon2time",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/type",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "cfdf267f-8927-4edf-af50-6d088f91e654",
                      "parentUUID": "1edeccc2-8d87-4c0d-9f26-7135a35e6881",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2time invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2time: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "696a26cd-1d59-4e63-97e6-ee721616c356",
                      "parentUUID": "1edeccc2-8d87-4c0d-9f26-7135a35e6881",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2time valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2d',\n  argon2time: 10\n}).should.deep.equal({\n  type: 'argon2d',\n  params: {\n    rounds: 10,\n    memory: 24576,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "9bf30eff-c4d8-4b30-ad5e-ca25ef03c827",
                      "parentUUID": "1edeccc2-8d87-4c0d-9f26-7135a35e6881",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cfdf267f-8927-4edf-af50-6d088f91e654",
                    "696a26cd-1d59-4e63-97e6-ee721616c356",
                    "9bf30eff-c4d8-4b30-ad5e-ca25ef03c827"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1aa49217-bac4-41b4-a07a-dc9439d2aa4f",
                  "title": "argon2mem",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "1c811408-9ceb-4742-acf8-9433e20275e5",
                      "parentUUID": "1aa49217-bac4-41b4-a07a-dc9439d2aa4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2mem invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2mem: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "8c85f0ad-6da3-4179-8e97-84e796e7e96f",
                      "parentUUID": "1aa49217-bac4-41b4-a07a-dc9439d2aa4f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2mem valid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2i',\n  argon2mem: 12345\n}).should.deep.equal({\n  type: 'argon2i',\n  params: {\n    rounds: 2,\n    memory: 12345,\n    parallelism: 1\n  }\n})",
                      "err": {},
                      "uuid": "38e61106-9351-4490-8216-1b5047c0f162",
                      "parentUUID": "1aa49217-bac4-41b4-a07a-dc9439d2aa4f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1c811408-9ceb-4742-acf8-9433e20275e5",
                    "8c85f0ad-6da3-4179-8e97-84e796e7e96f",
                    "38e61106-9351-4490-8216-1b5047c0f162"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "bffe96bc-439f-4846-9b18-53a939fc640a",
                  "title": "argon2parallelism",
                  "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\kdf.js",
                  "file": "\\test\\setup\\kdf.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "invalid/type",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 'foo'\n  })\n}).should.throw(TypeError)",
                      "err": {},
                      "uuid": "bdd6b6ae-bf6e-4444-91f0-561b76aff017",
                      "parentUUID": "bffe96bc-439f-4846-9b18-53a939fc640a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "invalid/range",
                      "fullTitle": "setup/kdf argon2 argon2parallelism invalid/range",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "(() => {\n  mfkdf.setup.kdf({\n    kdf: 'argon2id',\n    argon2parallelism: 0\n  })\n}).should.throw(RangeError)",
                      "err": {},
                      "uuid": "a2824a84-bcb9-4352-9d2d-1734c4c00bbd",
                      "parentUUID": "bffe96bc-439f-4846-9b18-53a939fc640a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "valid",
                      "fullTitle": "setup/kdf argon2 argon2parallelism valid",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "mfkdf.setup.kdf({\n  kdf: 'argon2id',\n  argon2parallelism: 2\n}).should.deep.equal({\n  type: 'argon2id',\n  params: {\n    rounds: 2,\n    memory: 24576,\n    parallelism: 2\n  }\n})",
                      "err": {},
                      "uuid": "b0a8f4c3-4880-4fde-855e-13b7740f5298",
                      "parentUUID": "bffe96bc-439f-4846-9b18-53a939fc640a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bdd6b6ae-bf6e-4444-91f0-561b76aff017",
                    "a2824a84-bcb9-4352-9d2d-1734c4c00bbd",
                    "b0a8f4c3-4880-4fde-855e-13b7740f5298"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "c36da908-7569-41bd-bcdc-d82e8e649ee3",
                "b886174b-da7c-4699-b0b6-24ab5e5a5247",
                "41216c88-cc53-4915-8371-06d269952c5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4ce3472e-0bd6-45f6-b3ea-f84cf691f9e7",
          "title": "setup/key",
          "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
          "file": "\\test\\setup\\key.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "default",
              "fullTitle": "setup/key default",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const key = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\najv.validate(policySchema, key.policy).should.be.true",
              "err": {},
              "uuid": "8311afb0-4770-41bc-9094-56f7efbe8440",
              "parentUUID": "4ce3472e-0bd6-45f6-b3ea-f84cf691f9e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0e2c1730-ca36-4677-95ee-8915708972f7",
              "title": "id",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key id default",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.$id.should.be.a('string')",
                  "err": {},
                  "uuid": "bb6d5bf3-7993-4b7e-af27-46a17a638ebf",
                  "parentUUID": "0e2c1730-ca36-4677-95ee-8915708972f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key id valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 'hello-world' })\npolicy.$id.should.equal('hello-world')",
                  "err": {},
                  "uuid": "ebd643bf-d55d-492f-977c-951e286cb619",
                  "parentUUID": "0e2c1730-ca36-4677-95ee-8915708972f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key id invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: 12345 }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b96d6e09-1e1f-40ef-a5e5-29922090423e",
                  "parentUUID": "0e2c1730-ca36-4677-95ee-8915708972f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key id invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { id: '' }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "376e0e73-915e-42a8-8141-743267636b66",
                  "parentUUID": "0e2c1730-ca36-4677-95ee-8915708972f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb6d5bf3-7993-4b7e-af27-46a17a638ebf",
                "ebd643bf-d55d-492f-977c-951e286cb619",
                "b96d6e09-1e1f-40ef-a5e5-29922090423e",
                "376e0e73-915e-42a8-8141-743267636b66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "4075c7b4-6b64-478e-9f24-3b5ebf4d4642",
              "title": "size",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key size default",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n])\npolicy.size.should.equal(32)",
                  "err": {},
                  "uuid": "eeded24a-dcdb-430e-b1a8-6b41856097e4",
                  "parentUUID": "4075c7b4-6b64-478e-9f24-3b5ebf4d4642",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key size valid",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 64 })\npolicy.size.should.equal(64)",
                  "err": {},
                  "uuid": "75c3bef8-c974-4948-ab41-6608ec4fbc48",
                  "parentUUID": "4075c7b4-6b64-478e-9f24-3b5ebf4d4642",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key size invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "237fd241-8b30-4412-b9bd-812b8ee2e7b1",
                  "parentUUID": "4075c7b4-6b64-478e-9f24-3b5ebf4d4642",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key size invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 0 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "acbe804f-d42c-433c-a4f5-ecd35ad32883",
                  "parentUUID": "4075c7b4-6b64-478e-9f24-3b5ebf4d4642",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eeded24a-dcdb-430e-b1a8-6b41856097e4",
                "75c3bef8-c974-4948-ab41-6608ec4fbc48",
                "237fd241-8b30-4412-b9bd-812b8ee2e7b1",
                "acbe804f-d42c-433c-a4f5-ecd35ad32883"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 215,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "517c160d-5f9e-4a37-b13d-8fe1f3c913d0",
              "title": "threshold",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key threshold default",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n])\npolicy.threshold.should.equal(2)",
                  "err": {},
                  "uuid": "06cdd9a5-7e0c-4d5e-9119-0549d597430a",
                  "parentUUID": "517c160d-5f9e-4a37-b13d-8fe1f3c913d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key threshold valid",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password2' })\n], { threshold: 1 })\npolicy.threshold.should.equal(1)",
                  "err": {},
                  "uuid": "7120b5cf-2427-49b8-8db4-b06ad4969312",
                  "parentUUID": "517c160d-5f9e-4a37-b13d-8fe1f3c913d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key threshold invalid/type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "bf639f15-da42-45ea-9069-b9a0d512ac39",
                  "parentUUID": "517c160d-5f9e-4a37-b13d-8fe1f3c913d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key threshold invalid/range",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 0 }).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { threshold: 2 }).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "aab4bd55-42d7-4139-b817-e48593d2784f",
                  "parentUUID": "517c160d-5f9e-4a37-b13d-8fe1f3c913d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06cdd9a5-7e0c-4d5e-9119-0549d597430a",
                "7120b5cf-2427-49b8-8db4-b06ad4969312",
                "bf639f15-da42-45ea-9069-b9a0d512ac39",
                "aab4bd55-42d7-4139-b817-e48593d2784f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "38938669-2ec4-47ab-9441-dfcb15835d2e",
              "title": "salt",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "default",
                  "fullTitle": "setup/key salt default",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { size: 48 })\nconst salt = Buffer.from(policy.salt, 'base64')\nsalt.length.should.equal(48)",
                  "err": {},
                  "uuid": "fd29bba9-c92f-4f4c-9d84-45f9ec795572",
                  "parentUUID": "38938669-2ec4-47ab-9441-dfcb15835d2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid",
                  "fullTitle": "setup/key salt valid",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { policy } = await mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: Buffer.from('12345678', 'base64') })\npolicy.salt.should.equal('12345678')",
                  "err": {},
                  "uuid": "570632b3-5f13-45ec-9ef3-0935a3ae3666",
                  "parentUUID": "38938669-2ec4-47ab-9441-dfcb15835d2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key salt invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello')\n], { salt: 'hello' }).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "2fda9a1e-9e11-46bf-9163-675e4b4ca412",
                  "parentUUID": "38938669-2ec4-47ab-9441-dfcb15835d2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd29bba9-c92f-4f4c-9d84-45f9ec795572",
                "570632b3-5f13-45ec-9ef3-0935a3ae3666",
                "2fda9a1e-9e11-46bf-9163-675e4b4ca412"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 212,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7338177b-0637-47da-9c30-9311a5b3e3fd",
              "title": "factors",
              "fullFile": "C:\\xampp\\htdocs\\Multifactor\\MFKDF\\test\\setup\\key.js",
              "file": "\\test\\setup\\key.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid",
                  "fullTitle": "setup/key factors valid",
                  "timedOut": false,
                  "duration": 109,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    },\n    output: async () => {\n      return {}\n    }\n  }\n])",
                  "err": {},
                  "uuid": "84668cfe-8d49-46b9-a752-4c144e120f84",
                  "parentUUID": "7338177b-0637-47da-9c30-9311a5b3e3fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "id",
                  "fullTitle": "setup/key factors id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n  await mfkdf.setup.factors.password('hello', { id: 'password1' }),\n  await mfkdf.setup.factors.password('hello', { id: 'password1' })\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "e1ee5f27-f39b-4de2-8a78-b57b1a6d3705",
                  "parentUUID": "7338177b-0637-47da-9c30-9311a5b3e3fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/type",
                  "fullTitle": "setup/key factors invalid/type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key('hello').should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 12345,\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 12345,\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: 12345,\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(TypeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: 12345\n  }\n]).should.be.rejectedWith(TypeError)",
                  "err": {},
                  "uuid": "b990670f-f59f-440b-9597-f08ee4a9adff",
                  "parentUUID": "7338177b-0637-47da-9c30-9311a5b3e3fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid/range",
                  "fullTitle": "setup/key factors invalid/range",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mfkdf.setup.key([\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: '',\n    id: 'password',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: '',\n    data: Buffer.from('password', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)\nmfkdf.setup.key([\n  {\n    type: 'password',\n    id: 'password',\n    data: Buffer.from('', 'utf-8'),\n    params: async () => {\n      return {}\n    }\n  }\n]).should.be.rejectedWith(RangeError)",
                  "err": {},
                  "uuid": "9cbde171-8c4e-49db-b097-48d233dcda35",
                  "parentUUID": "7338177b-0637-47da-9c30-9311a5b3e3fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84668cfe-8d49-46b9-a752-4c144e120f84",
                "e1ee5f27-f39b-4de2-8a78-b57b1a6d3705",
                "b990670f-f59f-440b-9597-f08ee4a9adff",
                "9cbde171-8c4e-49db-b097-48d233dcda35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 111,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "8311afb0-4770-41bc-9094-56f7efbe8440"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./site/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}